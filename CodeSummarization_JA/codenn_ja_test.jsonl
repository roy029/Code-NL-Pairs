{"in":"view.substr(view.line(view.sel()[0]))","out":"Sublime Text 3プラグインで現在の行を取得する"}
{"in":"def compat5(L1, L2):<nl><tab> z = zip(L1, L2)<nl><tab> return not any(j1<k1 and j2>k2 for j1,j2 in z for k1,k2 in z)","out":"Pythonのリストで与えられる互換性のある合計注文を確認する。"}
{"in":"BlogPost.objects.filter(q1 | q2).annotate(blog_times=Count('id')).order_by('blog_times')","out":"Django のクエリ結果をマッチ数でソートする。"}
{"in":"import feedparser<nl>d = feedparser.parse('http:\/\/www.reddit.com\/r\/Python\/.rss')<nl>for entry in d.entries:<nl>  date = entry.published_parsed<nl>  if date.tm_year == 2015 and date.tm_mon == 4 and date.tm_mday >= 15 and date.tm_mday <= 16:<nl><tab> print entry.title","out":"feedparserを使用して、指定した日付以内のエントリーを解析する。"}
{"in":"placeholders = []<nl>for plugin in project.projectplugin_set.all():<nl><tab> placeholders.append(plugin.placeholder_id)<nl>NewsEntry.objects.filter(content__in=placeholders).distinct()","out":"django-cms placeholder outside cms - 接続されている1つのモデルからプレースホルダを使って関連モデルを取得する方法は？"}
{"in":"from pygithub3 import Github<nl><nl>username = raw_input(\"Please enter a Github username: \")<nl>password = raw_input(\"Please enter the account password: \")<nl><nl>gh = Github(login=username, password = password)<nl><nl>get_user = gh.users.get()<nl><nl>user_repos = gh.repos.list().all()<nl><nl>for repo in user_repos:<nl><tab> print repo.language","out":"pygithub3 for Pythonを使ったリポジトリ情報の取得"}
{"in":"from random import sample<nl><nl>set_a = set(sample(range(0, 50), 10))<nl>set_b = set(sample(range(0, 50), 10))<nl><nl>print set_a.intersection(set_b) # [3, 4]<nl>print set_a & set_b # sugar for the same thing","out":"2つのリストを作成し、マッチングを比較する"}
{"in":"import turtle as t<nl>polygon = [(0,0), (0,100), (100,0), (100,100)]<nl>t.goto(0,0)<nl>fp = None<nl>for p in polygon:<nl>  t.goto(p)<nl>  if not fp: fp=p<nl>t.goto(fp)<nl>t.up()<nl>t.goto(90,90)<nl>t.write(\"90,90\")<nl>t.dot(10)<nl>t.goto(50,80)<nl>t.write(\"50,80\")<nl>t.dot(10)<nl>t.done()","out":"凸型ポリゴン内の点"}
{"in":"import matplotlib.pyplot as plt<nl>d=[2,5,10,20,30,40,50,70,100,200]<nl>t0=[0.04,0.08,0.15,0.4,0.6,0.8,1.0,1.4,2.1,5.5]<nl>fig, ax = plt.subplots()<nl>plt.plot(d,t0,marker='o')<nl>ax.set_xticks(d)<nl>ax.set_yticks(t0)<nl>plt.show()","out":"Python Matplotlib - プロットされたポイントに関連するティックマークを表示する"}
{"in":"gen = (x for x in xyz if x not in a)<nl><nl>for x in gen:<nl><tab> print x","out":"FORループとIF文の組み合わせのPythonicな方法"}
{"in":"class Obj1(object):<nl><tab> def __init__(self):<nl><tab><tab>  self.list_of_obj2 = []","out":"Pythonのリストのトラブルについて"}
{"in":"sys.stdout.flush()","out":"pythonでタイマーを使って文字列のビットを表示させる"}
{"in":"a = np.array([1,2,3])<nl>b = np.array([4])<nl>c = np.hstack([a,b])","out":"numpy.ndarrayを拡張する方法"}
{"in":"def make_form(exclude_user=True):<nl><tab> class Form(forms.ModelForm):<nl><tab><tab>  class Meta:<nl><tab><tab><tab><tab>model = Folder<tab><tab><tab><nl><tab><tab><tab><tab>exclude = ['user'] if exclude_user else None<nl><tab> return Form<nl><nl>form_cls = make_form(request.user != folder.owner)","out":"Django ModelFormsのフィールドを変更する。"}
{"in":"PySys_SetPath(\".\"); <nl>mymod = PyImport_ImportModule(\"your_DLL_name or Py_module_name\");","out":"pythonでc dllを読み込む"}
{"in":"import subprocess<nl>subprocess.Popen(['C:\\\\Users\\\\Me\\Desktop\\\\externalfileIwanttorun.exe'])","out":"PythonプログラムからWindowsでパスを実行する方法は？"}
{"in":"coll = Elasticsearch()<nl>coll.update(index='stories-test',doc_type='news',id=hit.meta.id,<nl><tab><tab><tab><tab><tab> body={\"doc\": {\"stanford\": 1, \"parsed_sents\": parsed }})","out":"elasticsearch-pyを使ってドキュメントを更新する方法？"}
{"in":"import re, ahocorasick,random,time<nl><nl># search N words from dict<nl>N=3<nl><nl>#file from http:\/\/norvig.com\/big.txt<nl>with open(\"big.txt\",\"r\") as f:<nl><tab> text = f.read()<nl><nl>words = set(re.findall('[a-z]+', text.lower())) <nl>search_words = random.sample([w for w in words],N)<nl><nl>A = ahocorasick.Automaton()<nl>for i,w in enumerate(search_words):<nl><tab> A.add_word(w, (i, w))<nl><nl>A.make_automaton()<nl>#test time for ahocorasic<nl>start = time.time()<nl>print(\"ah matches\",sum(1 for i in A.iter(text))) <nl>print(\"aho done in \", time.time() - start)<nl><nl><nl>exp = re.compile('|'.join(search_words))<nl>#test time for re<nl>start = time.time()<nl>m = exp.findall(text)<nl>print(\"re matches\",sum(1 for _ in m))<nl>print(\"re done in \",time.time()-start)","out":"テキストから絵文字を抽出する"}
{"in":"INSTALLED_APPS = (<nl><tab> 'django.contrib.auth',<nl><tab> 'django.contrib.contenttypes',<nl><tab> 'django.contrib.sessions',<nl><tab> # 'django.contrib.sites',<nl><tab> 'django.contrib.messages',<nl><tab> 'django.contrib.staticfiles',<nl><tab> 'purchaseapp', #this is my app<nl><tab> # Uncomment the next line to enable the admin:<nl><tab> 'django.contrib.admin',<nl><tab> # Uncomment the next line to enable admin documentation:<nl><tab> 'django.contrib.admindocs',<nl><tab> # Use email as username https:\/\/github.com\/dabapps\/django-email-as-username<nl><tab>  'emailusernames',<nl>)","out":"djangoのテンプレートの自動読み込みが私のアプリでは機能していません。"}
{"in":"import csv<nl><nl>def append_record_to_csv(dic, csvfile):<nl><tab> with open(csvfile, 'rb') as f:<nl><tab><tab>  # discover order of field names in header row<nl><tab><tab>  fieldnames = next(csv.reader(f))<tab><nl><tab> with open(csvfile, 'ab') as f:<nl><tab><tab>  # assumes that dic contains only fieldnames in csv file<nl><tab><tab>  dwriter = csv.DictWriter(f, fieldnames=fieldnames) <nl><tab><tab>  dwriter.writerow(dic)","out":"中間コピーを作成せずに、csvファイルに行を追加する。"}
{"in":"os.rename(os.path.join(mypath, f), os.path.join(mypath, frenamed))","out":"pythonでファイル名を変更するにはどうすればよいですか？"}
{"in":"def reorder(s, word, delta):<nl>  words = s.split()<nl>  oldpos = words.index(word)<nl>  words.insert(oldpos+delta, words.pop(oldpos))<nl>  return ' '.join(words)<nl><nl>print reorder('The quick brown fox jumps over the lazy dog', 'quick', 2)","out":"文字列内の単語を移動させるにはどうすればよいですか？"}
{"in":"from Tkinter import Tk, Button, RAISED<nl>from functools import partial<nl>root = Tk()<nl>buttons = [['1','2','3'],<nl><tab><tab><tab> ['4','5','6'],<nl><tab><tab><tab> ['7','8','9'],<nl><tab><tab><tab> ['*','0','#']]<nl><nl>def buttonClicked(buttonVal):<nl><tab> print(buttonVal)<nl><nl>for r in range(4):<nl><tab> for c in range(3):<nl><tab><tab>  button = Button(root,<nl><tab><tab><tab><tab><tab><tab><tab><tab>relief = RAISED,<nl><tab><tab><tab><tab><tab><tab><tab><tab>padx = 10,<nl><tab><tab><tab><tab><tab><tab><tab><tab>text = buttons[r][c],<nl><tab><tab><tab><tab><tab><tab><tab><tab>command = partial(buttonClicked, buttons[r][c]))<nl><tab><tab>  button.grid(row = r, column = c)<nl><nl>root.mainloop()","out":"Tkinterを使ったダイアログパッドの作成"}
{"in":"# You might need to do this to get X as an ndarray (for example if X is a list)<nl>X = numpy.asarray(X)<nl><nl># Then you can simply do<nl>X[s, [0, 1, 2]]<nl><nl># Or more generally<nl>X_argmax = X[s, numpy.arange(X.shape[1])]","out":"numpy.argmaxの結果からnumpy配列のスライスを抽出する。"}
{"in":"windowicon = window.render_icon(gtk.STOCK_DIALOG_AUTHENTICATION, gtk.ICON_SIZE_MENU)<nl>window.set_icon(windowicon)","out":"PyGTKは、ストックイメージとウィンドウのアイコンを設定します。"}
{"in":"def get_int_input(prompt):<nl><tab> while True:<nl><tab><tab>  s = raw_input(prompt)<nl><tab><tab>  try:<nl><tab><tab><tab><tab>i = int(s)<nl><tab><tab>  except ValueError:<nl><tab><tab><tab><tab>print \"Please enter an integer.\"<nl><tab><tab>  else:<nl><tab><tab><tab><tab>return i<nl><nl>def get_non_int_input(prompt):<nl><tab> while True:<nl><tab><tab>  s = raw_input(prompt)<nl><tab><tab>  try:<nl><tab><tab><tab><tab>i = int(s)<nl><tab><tab>  except ValueError:<nl><tab><tab><tab><tab>return s<nl><tab><tab>  else:<nl><tab><tab><tab><tab>print \"Please don't enter an integer.\"","out":"raw_inputメソッドによるユーザー入力のチェック"}
{"in":"import boto<nl>access_key = boto.config.get_value('Credentials', 'aws_access_key_id')<nl>secret_key = boto.config.get_value('Credentials', 'aws_secret_access_key')","out":"ボトです：Pythonコードでconfigからaws_access_key_idとaws_secret_access_keyを動的に取得する？"}
{"in":"def print_table(table):<nl><tab> col_width = [max(len(x) for x in col) for col in zip(*table)]<nl><tab> for line in table:<nl><tab><tab>  print \"| \" + \" | \".join(\"{:{}}\".format(x, col_width[i])<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  for i, x in enumerate(line)) + \" |\"<nl><nl>table = [(str(x), str(f(x))) for x in mylist]<nl>print_table(table)","out":"Python形式の表形式出力"}
{"in":"new_key.publickey().exportKey(\"DER\")","out":"python RSA 鍵（PEM 形式）を 16 進文字列に変換する。"}
{"in":"def splitAppId(self, url):<nl><tab><tab>  idMatch = re.search(r'\/id([^\/]+)\\?[^\/]*$', url)<nl><tab><tab>  return idMatch.group(1)","out":"文字列にマッチするPython正規表現"}
{"in":"xs = [p[0] for p in pp]<nl>ys = [p[1] for p in pp]","out":"リストからxとyの値を抽出する"}
{"in":"import ConfigParser<nl><nl>class acc(ConfigParser.RawConfigParser, object):<nl><tab> def __init__(self, acc_file):<nl><tab><tab>  super(acc, self).__init__()<nl><tab><tab>  self.lol = 1<nl><tab><tab>  print self.has_section(self.lol)<nl><nl>a=acc(1)","out":"ConfigParserのサブクラスには、_sectionsという属性がありません。"}
{"in":"import imp<nl>hest  = imp.load_source(\"Name\", Path)","out":"PythonがGUI内でスクリプトをコンパイルする。"}
{"in":"from haystack.management.commands import update_index<nl>update_index.Command().handle()","out":"Django + CeleryでHaystackの検索インデックスを更新する。"}
{"in":"b = a.reshape(10,48)<nl>a = b.reshape(10,4,4,3)","out":"numpyの配列を軸に沿って結合・分割する方法は？"}
{"in":"def f():<nl><tab> s = ('123'<nl><tab><tab><tab>'456')<nl><tab> return s","out":"Connector\/python 3重引用符で挿入が遅くなる。"}
{"in":"if elem1.tag == 'Components':<nl><tab> temp = 0<nl><tab> for elem2 in list(elem1):<nl><tab><tab>  if elem2.tag == 'Component':<nl><tab><tab><tab><tab>for elem3 in list(elem2):<nl><tab><tab><tab><tab><tab> if elem3.tag == 'ComponentID':<nl><tab><tab><tab><tab><tab><tab>  asset['CompID'+str(temp)] = elem3.text<nl><tab><tab><tab><tab><tab> if elem3.tag == 'ComponentName':<nl><tab><tab><tab><tab><tab><tab>  asset['CompName'+str(temp)] = elem3.text<nl><tab><tab><tab><tab><tab> if elem3.tag == 'Description':<nl><tab><tab><tab><tab><tab><tab>  asset['Description'+str(temp)] = elem3.text<nl><tab><tab><tab><tab>temp+=1","out":"タグが複数重複している場合に、各xmlタグからテキストを取得する方法"}
{"in":"result = df[df.pct_change < -0.015].reindex(filtered_dates, method='bfill')","out":"各 DatetimeIndex エントリで最初にフィルタリングされた行を取得するための pandas の効率的な方法"}
{"in":"lookup = 'the dog barked'<nl><nl>with open(filename) as myFile:<nl><tab> for num, line in enumerate(myFile, 1):<nl><tab><tab>  if lookup in line:<nl><tab><tab><tab><tab>print 'found at line:', num","out":"Pythonのファイル中の特定のフレーズの行番号を取得する。"}
{"in":"theModel.objects.filter(theString__in=[1,4,7])","out":"django filter : タプルでフィルタリングできる？"}
{"in":"pen.isdown()","out":"Python -1回のキー操作で亀のペンの状態を切り替えよう"}
{"in":"positions = [<nl>  tcu.position_set.order_by('-id').values('latitude','longitude')[0]<tab><nl>  for tcu in request.user.tcu_set.prefetch_related('position_set')<nl>  ]","out":"Django モデルから json データをフィルタリングする"}
{"in":"lxml.html","out":"PythonでHTMLから目次を生成する"}
{"in":"all_events = [<nl><tab> 200.0, 420.0, 560.0, 1100.0, 1900.0, 2700.0, 3400.0, 3900.0, 4234.2, 4800.0]<nl><nl>def get_events_by_hour(all_events):<nl><tab> return [<nl><tab><tab>  len([x for x in all_events if int(x\/3600.0) == hour]) <nl><tab><tab>  for hour in xrange(24)<nl><tab> ]<nl><nl>print get_events_by_hour(all_events)","out":"不規則なタイムスタンプリストをリサンプル\/ダウンサンプリングする方法は？"}
{"in":"ax2 = ax1.twinx()<nl>p1 = ax2.plot(ind, total_facilities, '--bo')<nl>p2 = ax1.bar(ind, pdb_facilities, width, color='gray',edgecolor = \"none\")<nl>plt.xlim([-1,len(total_facilities)])<nl>ax2.set_yscale('symlog')<nl>ax1.yaxis.tick_right()<nl>ax2.yaxis.tick_left()<nl>plt.show()","out":"Matplotlibの二重Y軸プロットで棒の前に線を並べる"}
{"in":"d = { k:None for k in  ('a:b','c:d','e:f','d:c','b:a','f:e') }<nl>for k in d.keys():<nl><tab> if '{}:{}'.format(k[2],k[0]) in d:<nl><tab><tab>  d.pop(k)","out":"文字列を反転させて重複をチェックするpython"}
{"in":"cand = [[0, 0] for _ in range(4)]","out":"掛け算でリストを生成すると、リファレンスが生成されるのか"}
{"in":"num_evens = {} <nl>for combination in itertools.product(*li):<nl><tab> even_counter = len([ y for y in combination if y & 1 == 0 ])<nl><tab> num_evens.setdefault(even_counter,[]).append(combination)<nl><nl>import pprint<nl>pprint.pprint(num_evens)","out":"pythonでxリストを動的に作成する"}
{"in":"def checkuser(request):<nl><tab> if request.method == \"POST\":<nl><tab><tab>  conn = Connection('localhost', 27017)<nl><tab><tab>  db = conn['user-data']<nl><tab><tab>  userTable = db[\"logins\"]<nl><nl><tab><tab>  userToCheck = request.form['usertocheck']<nl><nl><tab><tab>  #search for user to check if it already exists<nl><tab><tab>  doesExist = str(userTable.find_one({\"username\": userToCheck}))<nl><tab><tab>  conn.close()<nl><nl><tab><tab>  if doesExist == \"None\":<nl><tab><tab><tab><tab>return \"Username is available\"<nl><tab><tab>  elif doesExist.find(\"ObjectId\") != -1:<nl><tab><tab><tab><tab>return \"Username already taken.\"<nl><tab><tab>  else:<nl><tab><tab><tab><tab>return \"Error\"<nl><nl><nl>@app.route('\/register\/checkuser', methods=['POST'])<nl>def func():<nl><tab> return checkUser(request)","out":"HTTP POSTメソッドに対応する再利用可能な関数を公開する"}
{"in":"world.browser.find_by_id(field).fill(value)","out":"レタスとスプリンターでDjango、ブラウザは開くが何も表示されない"}
{"in":"with open(\"c:\/achip.txt\", \"rU\") as f:<nl>  columns = f.readline().strip().split()<nl>  sums = [0.0] * len(columns)<nl>  row_counts = [0] * len(columns)<nl><nl>  for line in f:<nl><tab> line = line.strip()<nl><tab> if not line:<nl><tab><tab>continue<nl><nl><tab> for col, v in enumerate(line.split()):<nl><tab><tab>if v != \"NA\":<nl><tab><tab>  sums[col] += int(v)<nl><tab><tab>  row_counts[col] += 1<nl><nl>with open(\"c:\/chipdone.txt\", \"w\") as out:<nl>  for name, sum, rows in zip(columns, sums, row_counts):<nl><tab> print >>out, name,<nl><tab> if rows == 0:<nl><tab><tab>print >>out, \"NA\"<nl><tab> else:<nl><tab><tab>print >>out, sum \/ rows","out":"pythonのif elseループのヘルプ"}
{"in":"AllocationSet(<nl><tab> Alloc( name=\"some name\", value=1.23 ),<nl><tab> Alloc( name=\"another name\", value=2.34 ),<nl><tab> Alloc( name=\"yet another name\", value=4.56 ),<nl>)","out":"Pythonのメソッド引数に空白がある場合"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>delta_Array = np.array([0.01,0.02,0.03, 0.04, 0.05,<nl><tab><tab><tab><tab><tab><tab><tab><tab>0.06,0.07, 0.08, 0.09, 0.10])<nl>#Initialized to 0s. Actual values will be appended to matrix by function<nl>theta_Matrix = np.random.random() * np.random.rand(delta_Array.size, 8) <nl><nl>fig = plt.figure()<nl>p1 = plt.plot(delta_Array, theta_Matrix)<nl># make a legend for both plots<nl>leg = plt.legend(p1, '', loc=1)<nl><nl>plt.show()","out":"PythonのMatplotlibで、配列のインデックスに対応する行列の値をプロットする。"}
{"in":"class Gif(ndb.Model):<nl><tab> author = ndb.UserProperty()<nl><tab> link = ndb.StringProperty(indexed=False)<nl><tab> # you store array of tag keys here you can also just make this<nl><tab> # StringProperty(repeated=True)<nl><tab> tag = ndb.KeyProperty(repeated=True)<nl><nl><tab> @classmethod<nl><tab> def get_by_tag(cls, tag_name):<nl><tab><tab>  # a query to a repeated property works the same as if it was a single value<nl><tab><tab>  return cls.query(cls.tag == ndb.Key(Tag, tag_name)).fetch()<nl><nl># we will put the tag_name as its key.id()<nl># you only really need this if you wanna keep records of your tags<nl># you can simply keep the tags as string too<nl>class Tag(ndb.Model):<nl><tab> gif_count = ndb.IntegerProperty(indexed=False)","out":"googleデータストアを使った多対多データベースの検索"}
{"in":"def main():<nl><tab> intro()<nl><nl><tab> my_board = placeMyShips(emptyBoard())<nl><tab> my_hit_board = emptyBoard()<nl><tab> comp_board = placeCompShips(emptyBoard())<nl><tab> comp_hit_board = emptyBoard()<nl><nl><tab> myMoves(comp_board, my_hit_board)","out":"戦艦の簡単なゲーム作り"}
{"in":"import sys, os<nl><nl>sys.path.append('\/Path\/To\/Django\/Projects\/')<nl>os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'<nl><nl>from django.core.serializers import serialize<nl>from myproject.myapp import models<nl><nl>model_names = [] # a list of the names of the models you want to export<nl><nl>for model_name in model_names:<nl><tab> cls = getattr(models, model_name)<nl><tab> filename = model_name.lower() + \".json\"<nl><tab> file = open(filename, \"w\")<nl><tab> file.write(serialize(\"json\", cls.objects.all()))","out":"Djangoを使ってデータを一括で保存する"}
{"in":"query = \"\"\"<nl><tab> INSERT INTO user_profiles <nl><tab><tab>  (user_id, json_source, user_timestamp) <nl><tab> VALUES <nl><tab><tab>  (%s, %s, %s)<nl>\"\"\"<nl>cur.execute(query, (data[0], data[1].encode('utf-8'), data[2]))","out":"Pythonでsplit by tabを使うと、テキストに文字が追加され、MySQLでエラーが発生する。"}
{"in":"# beginner<nl><nl>def fac(n):<nl><tab> f = 1<nl><tab> i = 1<nl><tab> while i <= n:<nl><tab><tab>  f *= i<nl><tab><tab>  i += 1<nl><tab> return f<nl><nl># advanced beginner<nl><nl>def fac(n):<nl><tab> return n * fac(n - 1) if n > 1 else 1<nl><nl># intermediate<nl><nl>def fac(n):<nl><tab> return reduce(lambda x, y: x * y, range(1, n + 1))<nl><nl># advanced intermediate<nl><nl>import operator<nl>def fac(n):<nl><tab> return reduce(operator.mul, xrange(1, n + 1))<nl><nl># professional<nl><nl>import math<nl>print math.factorial(5)<nl><nl># guru<nl><nl>import scipy.misc as sc<nl>print sc.factorial(5, exact=True)","out":"PythonのFactorial関数"}
{"in":"m = gurobipy.model()<nl>m.setParam('TimeLimit', 5*60)","out":"pythonでgurobiのタイムアウトを設定する方法"}
{"in":"from legacy_module import *","out":"pythonでは、インポートしたモジュールの名前空間を維持したまま、他のモジュールからすべてのクラスをインポートするにはどうすればよいでしょうか。"}
{"in":"f = open('filename.ext', 'rb')<nl>f.seek(255) # skip the first 255 bytes<nl>rest = f.read() # read rest","out":"ファイルの先頭から何バイトか削除する"}
{"in":"(moviesRDD<nl><tab> .join(ratingsRDD) # Join by key<nl><tab> .values() # Extract values<nl><tab> .map(lambda x: (x[1][0], x[0], x[1][1]))) # Reshape","out":"Sparkの2つのRDDの結合の問題"}
{"in":"alldata = impdat.root.data<nl>datastruct = {}<nl>for names in impdat.rood.data.__members___:<nl><tab> datastruct[names] = eval('alldata.' + names + '[0][:]')","out":"Pythonで.mat（バージョン8.1）構造体からデータにアクセスする"}
{"in":"import threading<nl>import subprocess<nl><nl>class RepeatingTimer(threading._Timer):<nl><tab> def run(self):<nl><tab><tab>  while True:<nl><tab><tab><tab><tab>self.finished.wait(self.interval)<nl><tab><tab><tab><tab>if self.finished.is_set():<nl><tab><tab><tab><tab><tab> return<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> self.function(*self.args, **self.kwargs)<nl><nl><nl>def status():<nl><tab> print \"I'm alive\"<nl>timer = RepeatingTimer(1.0, status)<nl>timer.daemon = True # Allows program to exit if only the thread is alive<nl>timer.start()<nl><nl>proc = subprocess.Popen([ '\/bin\/sleep', \"5\" ])<nl>proc.wait()<nl><nl>timer.cancel()","out":"サブプロセスの起動と実行中に進行状況を表示する。"}
{"in":"import urllib, re<nl><nl>source = urllib.urlopen('http:\/\/www.cbssports.com\/nba\/draft\/mock-draft').read()<nl><nl>## every image name is an abbreviation composed by capital letters, so...<nl>for link in re.findall('http:\/\/sports.cbsimg.net\/images\/nba\/logos\/30x30\/[A-Z]*.png', source):<nl><tab> print link<nl><nl><nl><tab> ## the code above just prints the link;<nl><tab> ## if you want to actually download, set the flag below to True<nl><nl><tab> actually_download = False<nl><tab> if actually_download:<nl><tab><tab>  filename = link.split('\/')[-1]<nl><tab><tab>  urllib.urlretrieve(link, filename)","out":"Pythonを使用してウェブページから画像リンクを抽出する。"}
{"in":"notify-osd","out":"X-serverに、カーソルが必要な場所にあるときだけ通知させることはできますか？"}
{"in":"for file, n in num.iteritems():<nl><tab> print file, n","out":"Python: コーパスのファイル内の特定の単語を数える。"}
{"in":"now  = time.strftime(\"%X\")<nl>peer = socket.getpeername()<nl>print(\"{} - {}\".format(now, peer))","out":"Python 複数の変数\/関数を同じ行で再利用する。"}
{"in":"sendPacket('\\x5f\\x00\\x00\\x00\\x01\\x00\\x07\\x01\\xcc\\x00\\x00\\x00\\x1f\\x8b')","out":"UDPパケットでバイトを送信し、さらに変換する必要がありません。"}
{"in":"django.template.loader.get_template(template_name)","out":"Djangoでテンプレートが存在するかどうかを確認する方法は？"}
{"in":"#!\/usr\/bin\/env python<nl>from contextlib import closing<nl>from selenium.webdriver import Firefox # pip install selenium<nl><nl>url = \"http:\/\/example.com\"<nl><nl># use firefox to get page with javascript generated content<nl>with closing(Firefox()) as browser:<nl><tab> n = 1<nl><tab> while n < 10:<nl><tab><tab>  browser.get(url) # load page<nl><tab><tab>  link = browser.find_element_by_link_text(str(n))<nl><tab><tab>  while link:<nl><tab><tab><tab>  browser.get(link.get_attribute(\"href\")) # get individual 1,2,3,4 pages<nl><tab><tab><tab>  #### save(browser.page_source)<nl><tab><tab><tab>  browser.back() # return to page that has 1,2,3,next -like links<nl><tab><tab><tab>  n += 1<nl><tab><tab><tab>  link = browser.find_element_by_link_text(str(n))<nl><nl><tab><tab>  link = browser.find_element_by_link_text(\"next\")<nl><tab><tab>  if not link: break<nl><tab><tab>  url = link.get_attribute(\"href\")","out":"pythonとseleniumを使用して動的なWebページをスクレイピングする。"}
{"in":"data = [<nl><tab> {'name':'John', 'color':'red'},<nl><tab> {'name':'Bob', 'color':'green'},<nl><tab> {'name':'Tom', 'color':'blue'}<nl>]<nl>colors = ['blue', 'red', 'green']<nl>result = []<nl><nl>for c in colors:<nl><tab> result.extend([d for d in data if d['color'] == c])<nl><nl>print result","out":"対応する値のリストにマッチする辞書のリストをpythonで返す。"}
{"in":"self.showMaximized()","out":"PyQtでウィンドウの状態を最大化させる方法"}
{"in":"if self.ammo and player_rect.colliderect(self.ammo.rect):<nl><tab><tab>  self.ammo_amount += 50<nl><tab><tab>  self.all_sprites_list.remove(self.ammo)<nl><tab><tab>  self.ammo = None","out":"pythonとpygameで矩形\/スプライトを削除する方法"}
{"in":"bigrams = [word_list[i] + \" \" + wordlist[i+1] for i in range(len(wordlist)-1)]","out":"カウント頻度、毎回2つの単語を取る方法は？"}
{"in":"from pprint import pformat<nl><nl>def application(environ, start_response):<nl><tab> # show the environment:<nl><tab> output = ['<pre>']<nl><tab> output.append(pformat(environ))<nl><tab> output.append('<\/pre>')<nl><nl><tab> #create a simple form:<nl><tab> output.append('<form method=\"post\">')<nl><tab> output.append('<input type=\"text\" name=\"test\">')<nl><tab> output.append('<input type=\"submit\">')<nl><tab> output.append('<\/form>')<nl><nl><tab> if environ['REQUEST_METHOD'] == 'POST':<nl><tab><tab>  # show form data as received by POST:<nl><tab><tab>  output.append('<h1>FORM DATA<\/h1>')<nl><tab><tab>  output.append(pformat(environ['wsgi.input'].read()))<nl><nl><tab> # send results<nl><tab> output_len = sum(len(line) for line in output)<nl><tab> start_response('200 OK', [('Content-type', 'text\/html'),<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>('Content-Length', str(output_len))])<nl><tab> return output","out":"mod_wsgiを使ったPythonのPOSTデータ"}
{"in":"ld = {} # basic dictionary<nl># now open & read file<nl>with open('linked_id.txt') as fin:<nl><tab> for ln in fin: # process each line in the file<nl><tab><tab>  k, v = ln.split() # split each line eg. k = 'ID1', v = 'ID2'<nl><tab><tab>  # make a dictionary entry - setdefault puts the k(ey) in and<nl><tab><tab>  # in this case set the value to a list, append then adds to <nl><tab><tab>  # the list by k(ey)<nl><tab><tab>  ld.setdefault(k, []).append(v) <nl><nl>unq = [] # start an empty list<nl>for k, v in ld.items(): # process the dictionary elements<nl><tab> v.append(k)  # make the value list include the key<nl><tab> ll = sorted(v)  # sort the new list<nl><tab> if not ll in unq: # see if its in the unq (unique) list<nl><tab><tab>  unq.append(ll) # if not add it<nl><nl>print(unq)  # show the unique sets","out":"各行が2つのIDでリンクされているテキストファイルから、リンクされているIDをすべて見つける。"}
{"in":"from operator import itemgetter<nl>from string import ascii_uppercase<nl><nl>data = [19, 14, 36]<nl><nl>labelled = zip(data, ascii_uppercase) # [(19, 'A'), (14, 'B'), (36, 'C')]<nl><nl>sorted_data = sorted(labelled, <nl><tab><tab><tab><tab><tab><tab><tab>key=itemgetter(0)) # [(14, 'B'), (19, 'A'), (36, 'C')]<nl><nl>labels = [pair[1] for pair in sorted_data] # ['B', 'A', 'C']","out":"Pythonで未知のサイズのリストの要素に名前を割り当てる"}
{"in":"import sqlite3<nl><nl>def dict_factory(cursor, row):<nl><tab> d = {}<nl><tab> for idx, col in enumerate(cursor.description):<nl><tab><tab>  d[col[0]] = row[idx]<nl><tab> return d<nl><nl>con = sqlite3.connect(\":memory:\")<nl>con.row_factory = dict_factory<nl>cur = con.cursor()<nl>cur.execute(\"select 1 as a\")<nl>print cur.fetchone()[\"a\"]","out":"sqliteクエリからdictを取得するにはどうすればよいですか？"}
{"in":"count = input(\"How many numbers do you want to input?\")<nl>numbers = [float(num) for num in raw_input(\"Input numbers, please...\").split()]<nl>if count != len(numbers):<nl>  raise SystemExit(\"You lied to me!\")","out":"Pythonで1行にn個の整数を開きたい。"}
{"in":"for pm in root.Document.Placemark:<nl><tab> point = [p for p in pm.getchildren() if p.tag.endswith('Point')]<nl><tab> if point:<nl><tab><tab>  coords = point[0].coordinates.text<nl><tab> else:<nl><tab><tab>  poly = [p for p in pm.getchildren() if p.tag.endswith('Polygon')]<nl><tab><tab>  if poly:<nl><tab><tab><tab><tab>coords = poly[0].outerBoundaryIs.LinearRing.coordinates.text<nl><tab> print pm.name, coords","out":"djangoを使ったKMLの子要素のパージング"}
{"in":"import matplotlib.pyplot as plt<nl>a = '\\\\frac{a}{b}'  #notice escaped slash<nl>plt.plot()<nl>plt.text(0.5, 0.5,'$%s$'%a)<nl>plt.show()","out":"pythonでlatex-formulaを印刷する。"}
{"in":"import os<nl>os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"<nl><nl>from mysite.polls.models import Poll, Choice","out":"自分のモデルにアクセスするためには、何をインポートする必要がありますか？"}
{"in":"urlFile = open(\"mailList.txt\", \"r+\")<nl>mailList = [i.strip() for i in urlFile.readlines()]","out":"Python smtplibで.txtファイルから複数の受信者にメールを送信する。"}
{"in":"def custom_sort(population):<nl><tab> pop_dict = { ind.ID: ind for ind in population }<nl><nl><tab> start = []<nl><tab> nones = []<nl><tab> end = []<nl><tab> for ind in population:<nl><tab><tab>  if ind.mate is None:<nl><tab><tab><tab><tab>nones.append(ind)<nl><tab><tab>  elif pop_dict[ind.mate] not in start:<nl><tab><tab><tab><tab>start.insert(0, ind)<nl><tab><tab><tab><tab>end.append(pop_dict[ind.mate])<nl><tab> return start + nones + end","out":"Pythonです：リストを2つの属性でソートする"}
{"in":"import math<nl>from decimal import Decimal<nl><nl>def s(x):<nl><tab> return (Decimal(0.298**k))\/ Decimal(math.factorial(k))<nl><nl>prevSK = 0<nl>sum=0<nl>valueList = {}<nl>for k in (range(0,501)):<nl><nl><tab> try:<nl><tab><tab>  a = (round(s(k),5))<nl><tab><tab>  r = (round(s(k)\/prevSK,5))<nl><tab><tab>  print \"a{n}: {a}\".format(n=k, a=a)<nl><tab><tab>  print \"r{n}: {r}\".format(n=k, r=r)<nl><tab><tab>  valueList[k] = {\"a{n}\".format(n=k) : a, \"r{n}\".format(n=k) : r}<nl><tab><tab>  prevSK = s(k)<nl><tab><tab>  summa = sum=sum+a<nl><tab> except Exception, e:<nl><tab><tab>  print e<nl><tab><tab>  prevSK = (Decimal(s(k),))<nl><nl><tab> continue<nl><nl>print \"The sum is:\", summa","out":"ループ要素のラベリング、ナンバリング＋総括"}
{"in":"s = \"534349511\"<nl>print ' '.join([s[i:i+2] for i in range(0,len(s),2)])","out":"2桁ごとに空白を入れた文字列をフォーマットします。"}
{"in":"DAB_FIELD_RENDERER = 'django_admin_bootstrapped.renderers.BootstrapFieldRenderer'","out":"django-admin-bootstrapped DateField、TimeField、PointField を混乱させる。"}
{"in":"sortedfreqlist = sorted(freqlist, key=lambda item: int(item[1]), reverse=True)","out":"Pythonでファイルを頻度でソートする"}
{"in":"python-docx","out":"python-docxで既存のdocxに内容を追加する。"}
{"in":"tests=(<nl><tab> ('fck','fc kopenhavn',True),<nl><tab> ('fco','fc kopenhavn',False),<nl><tab> ('irl','in real life',True),<nl><tab> ('irnl','in real life',False),<tab> <nl><tab> ('ifk','ifk gotebork',True),<tab><nl><tab> ('ifko','ifk gotebork',False),<tab> <nl><tab> ('aik','allmanna idrottskluben',True),<nl><tab> ('aid','allmanna idrottskluben',True),<nl><tab> ('manu','manchester united',True), <nl><tab> ('fz','faz zoo',True), <nl><tab> ('fzz','faz zoo',True),<nl><tab> ('fzzz','faz zoo',False),<tab> <nl><tab> )<nl><nl>def is_abbrev(abbrev, text):<nl><tab> abbrev=abbrev.lower()<nl><tab> text=text.lower()<nl><tab> words=text.split()<nl><tab> if not abbrev:<nl><tab><tab>  return True<nl><tab> if abbrev and not text:<nl><tab><tab>  return False<nl><tab> if abbrev[0]!=text[0]:<nl><tab><tab>  return False<nl><tab> else:<nl><tab><tab>  return (is_abbrev(abbrev[1:],' '.join(words[1:])) or<nl><tab><tab><tab><tab><tab> any(is_abbrev(abbrev[1:],text[i+1:])<nl><tab><tab><tab><tab><tab><tab>  for i in range(len(words[0]))))<nl><nl>for abbrev,text,answer in tests:<nl><tab> result=is_abbrev(abbrev,text)<nl><tab> print(abbrev,text,result,answer)<nl><tab> assert result==answer","out":"文字列が名前の省略形として可能かどうかをチェックする"}
{"in":"print '<a href=\"%(url)s\">%(url)s<\/a>' % {'url': my_url}","out":"名前付きパラメータの文字列フォーマット？"}
{"in":"mapper.connect('st','\/st\/submit_data',controller=storm, action='submit_data')","out":"Cherrypy Webアプリのルーティング(fail to roadリソース)"}
{"in":"class NonscientificDecimalField(DecimalField):<nl><tab> \"\"\" Prevents values from being displayed with E notation, with trailing 0's<nl><tab><tab>  after the decimal place  truncated. (This causes precision to be lost in<nl><tab><tab>  many cases, but is more user friendly and consistent for non-scientist<nl><tab><tab>  users)<nl><tab> \"\"\"<nl><tab> def value_from_object(self, obj):<nl><tab><tab>  def remove_exponent(val):<nl><tab><tab><tab><tab>\"\"\"Remove exponent and trailing zeros.<nl><tab><tab><tab><tab><tab>>>> remove_exponent(Decimal('5E+3'))<nl><tab><tab><tab><tab><tab>Decimal('5000')<nl><tab><tab><tab><tab>\"\"\"<nl><tab><tab><tab><tab>context = decimal.Context(prec=self.max_digits)<nl><tab><tab><tab><tab>return val.quantize(decimal.Decimal(1), context=context) if val == val.to_integral() else val.normalize(context)<nl><nl><tab><tab>  val = super(NonscientificDecimalField, self).value_from_object(obj)<nl><tab><tab>  if isinstance(val, decimal.Decimal):<nl><tab><tab><tab><tab>return remove_exponent(val)","out":"DecimalFieldで末尾の0が不規則に表示される。"}
{"in":"import os<nl><nl>def upload(file_name_number,files_dict): <nl><nl><tab> filename = int(raw_input(file_name_number))<nl><tab> #as the key to dictionary is integer<nl><tab> if filename in files_dict:<nl><tab><tab>  # upload code here<nl><tab><tab>  print \"dummy\"<nl><tab> else:<nl><tab><tab>  print \"The selected number does not exist in current directory.\"<nl><tab><tab>  upload(file_name_number,files_dict)#why are you calling this again<nl><tab> return filename<nl><nl>def create():<nl><tab> files_dict = showListAndSaveDict()<nl><tab> firstFile  = upload(\"Select the number of first file:\",files_dict)<nl><tab> secondFile = upload(\"Select the number of second file:\",files_dict)<nl><tab> thirdFile  = upload(\"Select the number of third file:\",files_dict)<nl><nl>def showListAndSaveDict():<nl><tab> files = [f for f in os.listdir('.') if os.path.isfile(f)]<nl><tab> files_dict = {}<nl><tab> i=0<nl><tab> for f in files:<nl><tab><tab>  i = i+1<nl><tab><tab>  print (str(i) + \" - \" + f)  <nl><tab><tab>  files_dict[i] = f<nl><tab> return files_dict<nl><nl>create()","out":"ファイル名の代わりに、各ファイルに関連する番号を使用してファイルをアップロードする。"}
{"in":"year=['51-52', '53', '55' , '56' , '58', '59', '60', '61']<nl>photo=[[70,72,73], [64,65,68],[79,80,81,82],[74,77,78],[60,61,62],[84,85,87],[57,58,59],[53,54,55,56]]<nl><nl>for i in range(len(year)):<nl><tab>for j in range(len(photo[i])):<nl><tab><tab> print '<img src=\\\"http:\/\/files.getdropbox.com\/u\/100000\/Akuja\/%s\/P10104%s.JPG>' % (year[i], photo[i][j])","out":"Pythonのprintに変数を入れることができない"}
{"in":"pyaudio.paInt16","out":"PortAudio \/ PyAudioを使用して入力デバイスから振幅範囲を取得する。"}
{"in":"import logging<nl>class RequestsConnectionFilter(logging.Filter):<nl><tab> def filter(self, record):<nl><tab><tab>  return False<nl>logging.getLogger('newrelic.lib.requests.packages.urllib3.connectionpool').addFilter(RequestsConnectionFilter())","out":"Heroku で New Relic \/ Celery がログを汚染しないようにする。"}
{"in":"import warnings<nl>from sqlalchemy import exc as sa_exc<nl><nl>with warnings.catch_warnings():<nl><tab> warnings.simplefilter(\"ignore\", category=sa_exc.SAWarning)<nl><tab> # code here...","out":"sqlalchemyの警告をオフにする"}
{"in":"import cx_Oracle<nl><nl>dsn_tns = cx_Oracle.makedsn('my_ip_address_server_next_port', 0000, 'sid')<nl>db = cx_Oracle.connect('user', 'password', dsn_tns)<nl>curs = db.cursor()<nl>curs.callproc(\"dbms_output.enable\")<nl><nl>curs.callproc('where.my_package.ger_result', ['something',])<nl><nl>statusVar = curs.var(cx_Oracle.NUMBER)<nl>lineVar = curs.var(cx_Oracle.STRING)<nl>while True:<nl>  curs.callproc(\"dbms_output.get_line\", (lineVar, statusVar))<nl>  if statusVar.getvalue() != 0:<nl><tab> break<nl>  print lineVar.getvalue()","out":"cx_OracleとSql * Plusで同じ結果を得るにはどうすればよいですか？"}
{"in":"#!\/usr\/bin\/python<nl># -*- coding: utf-8 -*-<nl><nl><nl>from ctypes import windll, Structure, c_long, byref #windows only<nl><nl><nl>class RECT(Structure):<nl><tab> _fields_ = [<nl><tab> ('left',<tab> c_long),<nl><tab> ('top',<tab>  c_long),<nl><tab> ('right',<tab>c_long),<nl><tab> ('bottom',  c_long),<nl><tab> ]<nl><tab> def width(self):  return self.right  - self.left<nl><tab> def height(self): return self.bottom - self.top<nl><nl><nl>def onTop(window):<nl><tab> SetWindowPos = windll.user32.SetWindowPos<nl><tab> GetWindowRect = windll.user32.GetWindowRect<nl><tab> rc = RECT()<nl><tab> GetWindowRect(window, byref(rc))<nl><tab> SetWindowPos(window, -1, rc.left, rc.top, 0, 0, 0x0001)","out":"Pygameでウィンドウの位置を変えずに上部に設定する"}
{"in":"def export(modeladmin, request, queryset):<nl><tab> \"\"\"<nl><tab> not sure if this will work<nl><tab> \"\"\"<nl><tab> request.session['export_querset'] = queryset<nl><nl><tab> \"\"\"<nl><tab> if above does not work then just set this and check for it in view and u can make the queryset again if this is set <nl><tab> \"\"\"<nl><tab> request.session['export_querset'] = 1<nl><tab> return HttpResponseRedirect(\"\/export\/\")","out":"Djangoです：HttpResponseRedirect を使ってクエリセットを別のビューに渡す"}
{"in":"chargeTypeName = models.CharField(max_length=6, blank=True)","out":"Python Django rest framework ポストゲットシリアライザー"}
{"in":"logger = logging.getLogger('my-logger')<nl>logger.propagate = False<nl># now if you use logger it will not log to console.","out":"Pythonでコンソールロギングを無効化・再有効化するにはどうしたらいいですか？"}
{"in":"subprocess.Popen(['ping www.google.com > \/dev\/null &'], shell=True, preexec_fn=os.setsid)","out":"PythonのPopenで背景処理を作る"}
{"in":"re_str = r\"\\?engine=(?P<eng>[\\w-]*?)&query=(?P<query>[=\\d\\+\\w-]*?)&subegine=(?P<sub>\\w*)\\s\"<nl>reg = re.compile(re_str)<nl>for line in file:<nl>  m = reg.search(line)<nl>  print \"Engine\", m.group(\"eng\")<nl>  print \"Query\", m.group(\"query\")<nl>  print \"Sub\", m.group(\"sub\")","out":"ApacheのログのGETリクエストを引数で解析する。"}
{"in":"items = ['Item'] * 6<nl>for i, item in enumerate(items, start=1):<nl><tab> number = (i + 1) \/ 2<nl><tab> print('{} {}'.format(number, item))","out":"2回出現する連続した数字を印刷する？"}
{"in":"service.start()<nl>worker_1.start()<nl>worker_1.join()<nl>service.terminate()","out":"サーバーとクライアントを同じファイル内で実行する - python"}
{"in":"from django.db.models import Count<nl>Article.objects.annotate(num_comments=Count('comment')).filter(num_comments__gt=10)","out":"オブジェクトを参照するオブジェクトの数でオブジェクトをフィルタリングするにはどうすればよいですか？"}
{"in":"ms.listSubscribe(<nl><tab> id=settings.MAILCHIMP_NEWSLETTER_LIST_ID,<nl><tab> email_address=self.user.email,<nl><tab> merge_vars={'FNAME': self.user.first_name,<nl><tab><tab>  'LNAME': self.user.last_name,<nl><tab><tab>  'GROUPINGS': [<nl><tab><tab><tab><tab>{'id': 9917,<nl><tab><tab><tab><tab>'groups': 'food service operator',},]},<nl><tab> double_optin=False,<nl><tab> update_existing=True,<nl>)","out":"グループ分けを設定しようとするとmailsnakeからエラーが出る。"}
{"in":"contour(im, levels=[245], colors='black', origin='image')","out":"Pythonで画像の外形輪郭やシルエットを抽出する。"}
{"in":"import sys<nl>import selenium<nl>from selenium import webdriver<nl>from selenium.webdriver.common.keys import Keys<tab><nl><nl>driver = webdriver.Firefox()<nl>driver.get(\"http:\/\/website.aspx\")<tab> <nl><nl>elem = driver.find_element_by_id(\"ctl00_ctl00\")<nl>elem.send_keys( '15' )<nl>elem.send_keys( Keys.RETURN )","out":"RでWebサイトのフォーム入力やリンクの「クリック」をスクレイピングする方法とは？"}
{"in":"cygpath -w","out":"CygwinでPosixからWindowに移行する方法"}
{"in":"class StringError(Exception):<nl><tab> NO_E = 0<nl><tab> HAS_Z = 1<nl><nl>def string_checker(string):<nl><tab> if 'e' not in string:<nl><tab><tab>  raise StringError('e not found in string', StringError.NO_E)<nl><tab> if 'z' in string:<nl><tab><tab>  raise StringError('z not allowed in string', StringError.HAS_Z)<nl><tab> return string.upper()<nl><nl>s = 'testing'<nl>try:<nl><tab> ret = string_checker(s)<nl><tab> print 'String was okay:', ret<nl>except StringError as e:<nl><tab> print 'String not okay with an error code of', e.args[1]","out":"欠損値を持つタプル"}
{"in":"#Important assumption here... wordlist is sorted<nl><nl>base=wordlist[0]<tab><tab><tab><tab><tab><tab><tab> #consider the first word in the list<nl>for word in wordlist:<tab><tab><tab><tab><tab>  #loop through the entire list checking if<nl><tab> if not word.startswith(base):<tab>  # the word we're considering starts with the base<nl><tab><tab>  print base<tab><tab><tab><tab><tab><tab>  #If not... we have a new base, print the current<nl><tab><tab>  base=word<tab><tab><tab><tab><tab><tab><tab>#  one and move to this new one<nl><tab> #else word starts with base<nl><tab><tab>  #don't output word, and go on to the next item in the list<nl>print base<tab><tab><tab><tab><tab><tab><tab><tab><tab> #finish by printing the last base","out":"Python- リスト中の他の単語を含む単語をすべて削除する。"}
{"in":"with open('text.txt') as text:<nl><tab> with open('unique.txt', 'w') as output:<nl><tab><tab>  seen = set()<nl><tab><tab>  for line in text:<nl><tab><tab><tab><tab>line_hash = hash(line)<nl><tab><tab><tab><tab>if line_hash not in seen:<nl><tab><tab><tab><tab><tab> output.write(line)<nl><tab><tab><tab><tab><tab> seen.add(line_hash)","out":"大きなテキストファイルの内容をユニークにする方法"}
{"in":"import numpy as np<nl>import ImageGrab<nl>import cv2<nl><nl>while(True):<nl><tab> printscreen_pil =  ImageGrab.grab()<nl><tab> printscreen_numpy =<tab>np.array(printscreen_pil.getdata(),dtype=uint8)\\<nl><tab> .reshape((printscreen_pil.size[1],printscreen_pil.size[0],3)) <nl><tab> cv2.imshow('window',printscreen_numpy)<nl><tab> if cv2.waitKey(25) & 0xFF == ord('q'):<nl><tab><tab>  cv2.destroyAllWindows()<nl><tab><tab>  break","out":"OpenCVとPython-2.7によるスクリーンキャプチャ。"}
{"in":"import webapp2<nl>from google.appengine.ext import ndb<nl><nl>def parent_key():<nl><tab> return ndb.Key('My','Entities')<nl><nl>class SmallModel(ndb.Model):<nl><tab> n = ndb.IntegerProperty(required=True)<nl><tab> stamp = ndb.DateTimeProperty(auto_now_add=True)<nl><nl>class MainHandler(webapp2.RequestHandler):<nl><tab> def get(self):<nl><tab><tab>  self.response.write('Hello world. Simple form. <form method=\"post\"><input name=\"n\" type=\"number\"><input type=\"submit\"><\/form>')<nl><tab> def post(self):<nl><tab><tab>  entity = SmallModel(parent=parent_key(),n=int(self.request.get('n')))<nl><tab><tab>  entity.put()<nl><tab><tab>  self.redirect('\/list')<nl><nl>class List(webapp2.RequestHandler):<nl><tab> def get(self):<nl><tab><tab>  self.response.out.write(\"here's a list:\")<nl><tab><tab>  entities = SmallModel.query(ancestor=parent_key())<nl><tab><tab>  for entity in entities.iter():<nl><tab><tab><tab><tab>self.response.out.write(\" %s \" % entity.n)<nl><tab><tab>  self.response.out.write(\"...end list.\")<nl><nl>app = webapp2.WSGIApplication([<nl><tab> ('\/', MainHandler),<nl><tab> ('\/list',List)<nl>], debug=True)","out":"App Engine Dev Serverのデータストアの更新速度が遅い？"}
{"in":"import subprocess<nl>p = subprocess.Popen(\"some_long_command\",stdout=subprocess.PIPE)<nl>for line in iter(p.stdout.readline, \"\"):<nl><tab> print line","out":"Python 2.4で長時間実行されるosコマンドから読み出す必要がある。"}
{"in":"shell=True","out":"WindowsにおけるPythonのサブプロセスに関する問題"}
{"in":"import sys<nl><nl>for line in fileinput.input(file_full_path, inplace=True):<nl><tab> newline, count = re.subn(search_str, replace_str, line.rstrip())<nl><tab> sys.stderr.write(\"your message here\")<nl><tab> print newline","out":"Fileinput (Python)を使って検索と置換を行い、コンソールにメッセージを送信する"}
{"in":"time_waited = 0<nl>then = time.time()<nl>for p in processes:<nl><tab> if time_waited >= DURATION:<nl><tab><tab>  p.join(0)<nl><tab><tab>  p.terminate()<nl><tab> p.join(DURATION - time_waited)<nl><tab> time_waited = time.time() - then","out":"タイムアウトでpythonのプロセス群に参加する"}
{"in":"import tkFileDialog<nl><nl>old_file = tkFileDialog.askopenfilename(filetypes=[('.csvfiles', '.csv')],<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> title='Old file selected first')","out":"Python tkinter タイトルバーの'open'を変更する。"}
{"in":"import networkx as nx<nl><nl>G = nx.Graph()<nl>G.add_node(1,color='red')<nl>G.add_node(2,color='red')<nl>G.add_node(3,color='blue')<nl>G.add_node(4,color='blue')<nl><nl>G.add_edges_from([(1,2),(1,3),(3,4)])<nl><nl>for (u,v) in G.edges_iter():<nl><tab> if G.node[u]['color'] != G.node[v]['color']:<nl><tab><tab>  print u,v","out":"ネットワークXの中で特定の条件を満たすエッジを探す"}
{"in":"for k, i in enumerate(row):<nl><tab> print(str(k+1) + \".\" + \"\".join(i))","out":"データベースフェッチから番号付きメニューリストを作成する - Python"}
{"in":"app.register_blueprint(imported_plugin.plugin_handler, url_prefix=imported_config.FOO)","out":"Flaskアプリに新しい「プラグイン」をランタイムで追加する。"}
{"in":"os.walk(\"path\").next()[1]","out":"Pythonでos.walkを使って、入力として与えられたパスからdirのリストを取得する方法。"}
{"in":"url(r'^guideline\/(?P<id>\\d+)\/(?P<slug>[-\\w]+)\/$', perma_post, name=\"cv_perma\")","out":"Djangoでurlの末尾に文字列（タイトル）を追加する方法は？"}
{"in":"list(the_iterator)","out":"ジェネレータやイテレータが生成したすべての要素を返す標準メソッド"}
{"in":"import BeautifulSoup<nl>from BeautifulSoup import BeautifulSoup<nl><nl>soup = BeautifulSoup(totstring)<nl><nl>body = soup.find(\"body\")<nl><nl>bodytext = body.text","out":"ElementTreeを用いたpythonでのxmlパース処理"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl>from mpl_toolkits.mplot3d import Axes3D<nl><nl><nl>data = np.array(data)<nl>length = data.shape[0]<nl>width = data.shape[1]<nl>x, y = np.meshgrid(np.arange(length), np.arange(width))<nl><nl>fig = plt.figure()<nl>ax = fig.add_subplot(1,1,1, projection='3d')<nl>ax.plot_surface(x, y, data)<nl>plt.show()","out":"matplotlibを使って「リストのリスト」から3次元曲面をプロットする。"}
{"in":"team_member = Team.objects.get(id=team_member_id)<nl>if team_member.site.id == request.user.site_set.all().first().id:<nl><tab>print \"same site\"<nl>else:<nl><tab>print \"different site\"","out":"あるユーザーがモデルインスタンスを「所有」しているかどうかを認証する方法"}
{"in":"import maya.cmds as mc<nl><nl>Xsl = (mc.ls (sl=1, sn=1))[0]<nl><nl>def toastFUNC (arg=0):<nl><tab> mc.animCurveEditor (curveEditor, e=1, lck=1)<nl><nl>mc.window(w=500)<nl>mc.paneLayout( configuration='vertical2', swp=1, ps=[2, 70, 0] )<tab> <nl>mc.frameLayout(w=150, h=100, lv=0)<nl><nl>mc.outlinerEditor(mlc='modelList', slc='modelList', showReferenceNodes=0, showReferenceMembers=0,<tab> showAttributes=1, showSelected=0, highlightActive=1, showAnimCurvesOnly=0, autoExpand=1,<nl>showConnected=1, showDagOnly=0, ignoreDagHierarchy=1, expandConnections=0, showCompounds=0,<tab>showNumericAttrsOnly=0,<nl>autoSelectNewObjects=0, doNotSelectNewObjects=1, transmitFilters=0, showSetMembers=1,<tab> setFilter='defaultSetFilter', lck=1, sec=toastFUNC)<nl><nl>mc.setParent('..')<nl><nl>mc.frameLayout(w=1, h=100, lv=0)<nl>curveEditor = mc.animCurveEditor(mlc='modelList', slc='modelList', dak=1, di=0, dat='off', lck=1)<nl>mc.setParent('..')<nl>mc.showWindow()","out":"3Dビューで物理的に選択を解除したオブジェクトを、アウトライナーで選択したままにするにはどうすればよいですか？"}
{"in":"d = {<nl><tab> \"data\": {<nl><tab><tab>  \"id\": 2,<nl><tab><tab>  \"name\": \"My TEST\",<nl><tab><tab>  \"image\": \"1.jpg\",<nl><tab><tab>  \"article\": [<nl><tab><tab><tab><tab>{<nl><tab><tab><tab><tab><tab> \"id\": 1,<nl><tab><tab><tab><tab><tab> \"name\": \"TEST\"<nl><tab><tab><tab><tab>}<nl><tab><tab>  ]<nl><tab> }<nl>}<nl><nl><nl>myitems=[{<nl><tab> 'title': d[\"data\"]['name'],<nl><tab> 'image': d[\"data\"]['image'],<nl><tab> 'article_id': d[\"data\"]['article'][0]['id']<nl>}]<nl>print myitems<nl>[{'image': '1.jpg', 'article_id': 1, 'title': 'My TEST'}]","out":"PythonでJSONをパースする方法 in relationship"}
{"in":"import urllib.parse, urllib.request<nl><nl>params = { \"SendXML\": \"<company><User><Username>username<\/Username><Password>passweord<\/Password><\/User><Content Type=sms>..\" }<nl>url_string = \"http:\/\/api.company.com\/SendMessageXml.ashx?%s\" % (urllib.parse.urlencode(params))<nl>s = \"\"<nl>with urllib.request.urlopen(url_string) as url:<nl><tab> s = url.read()<nl><nl>print s","out":"URL の空白"}
{"in":"from datetime import datetime, timedelta<nl>Example.objects.filter(date_created__lte=datetime.utcnow() - <nl><tab><tab><tab><tab><tab><tab><tab><tab>  timedelta(days=6*30)).delete()","out":"日付のためのDjango Queryset"}
{"in":"import os, shutil<nl><nl>#Get the list of all folders present within the particular directory<nl>folder_list = os.walk('.').next()[1]<nl><nl>#Start zipping the folders<nl>for each_folder in folder_list:<nl><tab> shutil.make_archive(each_folder, 'zip', os.getcwd() + \"\\\\\" + each_folder)","out":"shutilを使用して特定のフォルダのzipを作成する方法"}
{"in":"def f(s):<nl><tab> for x in range(len(s)):<nl><tab><tab>  if s[x] == 'o':<nl><tab><tab><tab><tab>s = s[:x]+'e'+s[x+1:]<nl><tab> return s","out":"Python 3.4 ヘルプ - 文字列の文字を置き換えるためにスライスを使う"}
{"in":"__import__('cmds.' + command_name)","out":"App Engineでモジュールを動的にインポートするにはどうすればよいですか？"}
{"in":"root.geometry('200x200')<nl>root.mainloop()","out":"tkinterです：コンテンツのサイズが変わってもウィンドウがリサイズされないようにするにはどうしたらいいですか？"}
{"in":"def using_split2(line, _len=len):<nl><tab> words = line.split()<nl><tab> index = line.index<nl><tab> offsets = []<nl><tab> append = offsets.append<nl><tab> running_offset = 0<nl><tab> for word in words:<nl><tab><tab>  word_offset = index(word, running_offset)<nl><tab><tab>  word_len = _len(word)<nl><tab><tab>  running_offset = word_offset + word_len<nl><tab><tab>  append((word, word_offset, running_offset - 1))<nl><tab> return offsets","out":"文字列を空白で分割し、単語のオフセットと長さを保持する方法"}
{"in":"req = google.appengine.ext.webapp.Request(dict(os.environ))","out":"DBモデルでリクエストオブジェクトを取得する？"}
{"in":"#!\/usr\/bin\/env python<nl>query = [\"football\", \"basketball\", \"martial arts\", \"baseball\"]<nl>lists = [[\"apple\", \"football\", \"basketball court\"], [\"ball\"], [\"martial-arts\", \"baseball\", \"banana\", \"food\", \"doctor\"]]<nl>from random import random<nl><nl>def fake_levenshtein(word1, word2):<nl><tab> return random()<nl><nl>def avg_list(l):<nl><tab><tab>  return reduce(lambda x, y: x + y, l) \/ len(l)<nl><nl>for l in lists:<nl><tab> score = []<nl><tab> for w1 in l:<nl><tab><tab>  for w2 in query:<nl><tab><tab><tab><tab>score.append(fake_levenshtein(w1, w2))<nl><tab> print avg_list(score)","out":"文字列を含む2つのリストの類似度スコア"}
{"in":"import itertools<nl><nl>bin1 = [1,2]<nl>bin2 = [3,4]<nl>bin3 = [5,6]<nl><nl>print [[bin1[0],y] for y in bin3] + [[bin1[1],y] for y in bin2]","out":"複数のビンから1つのアイテムを選択する際に、IF条件で可能なすべての組み合わせを返す"}
{"in":"import glob<nl>import os<nl><nl>filelog_ext=\".log\" #log extension<nl>array = []<nl><nl>for filename in glob.iglob(os.path.join(path, filelog_ext)):<nl><tab> with open(filename) as f:<nl><tab><tab>  array.extend(f)","out":"複数ファイルのデータ一覧を配列に格納する。"}
{"in":"QOUT=[1.0, 3.0, 1.0, 2.0]<nl>QIN=[2.0, 3.0, 5.0, 2.0]<nl>TIN=[10.0,12.0,13.0, 12.0]<nl><nl>V=[2.0, 4.0, 5.0]<nl><nl>T=[10.0, 11.0, 12.0]<nl><nl>for q_in, q_out in zip(QIN, QOUT):<nl><tab> C = [v + q_in - q_out for v in V]<tab> <nl><tab> print C<nl><nl><tab> lineNum=0<tab><tab><tab><nl><tab> for t1 in range(len(TIN)):<nl><tab><tab>  Tx=[]<nl><tab><tab>  for c in range(len(C)): <nl><tab><tab><tab><tab>for i in range(len(T)):<tab><nl><tab><tab><tab><tab><tab> Tx.append((T[i]*C[c]+TIN[t1]*QIN[lineNum])\/(C[c]+QIN[lineNum]))<nl><tab><tab>  lineNum +=1<nl><tab><tab>  print Tx","out":"あるリストの要素をループさせて、異なる範囲を持つ別のリストの要素に変更するにはどうすればよいですか？"}
{"in":"n[n[:,0] > 0, :]","out":"条件を指定した行列に対するNumpyの高度なインデックス付け"}
{"in":"import re<nl><nl>a_pattern = re.compile(\"query\\:(.+?)\\,\")<nl>re.findall(a_pattern, 'query:text_you_want_to_extract,')","out":"PythonでフォーマットされていないJsonデータを処理する方法とは？"}
{"in":"with open(filename) as f:<nl><tab>lines=f.readlines()<nl><nl>d=dict()<nl>for line in lines:<nl>  line=line.strip()<nl>  if line:<nl><tab>  (k,v)=line.split(\":\", 1)<nl><tab>  d[k]=v<nl><nl>print(\"%s: %s\" % (d['Package'], d['Version']))","out":"Pythonを使って、.txtファイル内の分離した文字列の値を連結する方法はありますか？"}
{"in":"import numpy as np<nl>import pandas as pd<nl><nl>### create sample data<nl>date = pd.date_range(\"2010-01-01\", periods=365*3)<nl>date = pd.Index(np.random.choice(date, 30000))<nl>order_id = np.random.randint(10, 1000, size=30000)<nl><nl>df = pd.DataFrame({\"date\":date, \"order_id\":order_id})<nl><nl>### group by year and date<nl>date = pd.Index(df[\"date\"])<nl>df2 = df[\"order_id\"].groupby([date.year, date]).count()<nl><nl>### shift all year to 2000<nl>date = df2.index.get_level_values(1)<nl>new_date = pd.Index(pd.io.date_converters.parse_date_fields(np.ones(len(date))*2000, date.month, date.day))<nl>year = df2.index.get_level_values(0)<nl>df2.index = pd.MultiIndex.from_arrays([year, new_date])<nl><nl>### plot<nl>p = df2.unstack(0).plot()<nl>p.xaxis.set_ticklabels(range(1, 13));","out":"Pandasで年号に依存しない日付をプロットする"}
{"in":"date = \"2010-11-22\"<nl>timestamps = set(['2011-02-22', '2011-02-05', '2011-02-04', '2010-12-14', '2010-12-13', '2010-12-12', '2010-12-11', '2010-12-07', '2010-12-02', '2010-11-30', '2010-11-26', '2010-11-23', '2010-11-22', '2010-11-16'])<nl>#then you can just update it like so<nl>timestamps.update(['2010-11-16']) #if its in there it does nothing<nl>timestamps.update(['2010-12-30']) # it does add it","out":"pythonのリストで一意な項目"}
{"in":"with open('topon.txt') as infile:<nl>  for line in infile:<nl><tab> print line.split('.', 1)[0]","out":"Pythonによる文の処理"}
{"in":"for r in result:<nl>  for d in dict:<nl><tab> if d['value'] == r:<nl><tab><tab> print \"ok\"","out":"Python - 辞書リストの中の値。"}
{"in":"import os<nl>import glob<nl><nl>files = list(glob.glob(os.path.join(directory,'*.*')))","out":"pythonでユーザー指定ディレクトリのファイル名からリストを作成する方法"}
{"in":"from copy import deepcopy<nl>list1.append(deepcopy(list2))","out":"リストをリストに追加し、値を上書きする"}
{"in":"from multiprocessing import Process<nl>p = Process(target=myfunc1)<nl>p.start()<nl>p2 = Process(target=myfunc2)<nl>p2.start()<nl># and so on<nl>p.join()<nl>p2.join()<nl># the join means wait untill it finished","out":"複数の機能を同時に実行する方法"}
{"in":"import os<nl>import shutil<nl><nl>os.nice(9)<nl>shutil.copy('\/var\/tmp\/1', '\/var\/tmp\/2')","out":"pythonでniceコマンドを使うには？"}
{"in":"from scipy.optimize import fsolve<nl>import math<nl><nl>def equations(p):<nl><tab> x, y = p<nl><tab> return (x+y**2-4, math.exp(x) + x*y - 3)<nl><nl>x, y =  fsolve(equations, (1, 1))<nl><nl>print equations((x, y))","out":"Pythonを使って一対の非線形方程式を解くには？"}
{"in":"from time import time<nl>prevState = (False,time())<nl>while not self.done():<nl><tab> current = time()<nl><tab> if self._io_left_nav.button0 and (current-prevState[1])*1000>2: #For example, 2 ms<nl><tab><tab>  if self._io_left_nav.button0 != prevState[0]:<nl><tab><tab><tab><tab>print(\"repeats\")<nl><tab><tab>  prevState = (self._io_left_nav.button0,time())","out":"pythonを使ってロボットボタンの状態を確認する方法は？"}
{"in":"print datetime.datetime.strptime(fecha2, '%m\/%d\/%y %H:%M')","out":"Pythonの時刻データがフォーマットと一致しない"}
{"in":"for student, student_data in student_quiz_scores.iteritems():<nl><tab> for i, average in enumerate(the_averages):<nl><tab><tab>  print \"<nl>The average for quiz\",i+1,\"is:\",average<nl><tab><tab>  if student_data[i]>average:<nl><tab><tab><tab><tab>print student, \"got a\",student_data[i],\"which is\",(str(student_data[i]-average))+\"%\", \"higher than the average. :)\"<nl><tab><tab>  else:<nl><tab><tab><tab><tab>print student, \"got a\", student_data[i], \"which is\", (str(-student_data[i]+average))+\"%\", \"lower than the average. :(\"","out":"辞書のさまざまなキーに一度に関数を適用する。"}
{"in":"last_host = None<nl>hosts = []<tab><tab><tab><tab><tab> # the list of hosts<nl>host_responses = []<tab><tab> # the list of responses for each host<nl>responses = []<nl>for output in expandresults:<nl><tab> if output.val is not None:<nl><tab><tab>  if output.hostname != last_host:<tab> # new host<nl><tab><tab><tab><tab>if last_host:<tab> # only append host_responses after a new host<nl><tab><tab><tab><tab><tab> host_responses.append(responses)<nl><tab><tab><tab><tab>hosts.append(output.hostname)<nl><tab><tab><tab><tab>responses = [output.val]<tab><tab>  # start the new list of responses<nl><tab><tab><tab><tab>last_host = output.hostname<nl><tab><tab>  else:<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # same host, append the response<nl><tab><tab><tab><tab>responses.append(output.val)<nl>host_responses.append(responses)<nl><nl>for host, responses in zip(hosts, host_responses):<nl><tab> self.WriteOut(host, ','.join(responses))","out":"Pythonで異なるクラスの複数の大きなデータ構造を結合する。メモリ使用量を減らしながら、必要なデータを結合して保存するにはどうしたらよいか？"}
{"in":"from IPython.nbformat import current as nbf<nl><nl>nb = nbf.new_notebook()<nl><nl>cells = []<nl><nl>for var in my_list:<nl><tab> # Assume make_image() saves an image to file and returns the filename<nl><tab> image_file = make_image(var)<nl><tab> text = \"Variable: %s<nl>![image](%s)\" % (var, image_file)<nl><tab> cell = nbf.new_text_cell('markdown', text)<nl><tab> cells.append(cell)<nl><nl>nb['worksheets'].append(nbf.new_worksheet(cells=cells))<nl><nl>with open('my_notebook.ipynb', 'w') as f:<nl><tab><tab>  nbf.write(nb, f, 'ipynb')","out":"レポート生成のためにipythonノートブックにセルをプログラム的に追加する"}
{"in":"from subprocess import Popen, PIPE<nl><nl>scpt = '''<nl><tab> on run {x, y}<nl><tab><tab>  return x + y<nl><tab> end run'''<nl>args = ['2', '2']<nl><nl>p = Popen(['osascript', '-'] + args, stdin=PIPE, stdout=PIPE, stderr=PIPE)<nl>stdout, stderr = p.communicate(scpt)<nl>print (p.returncode, stdout, stderr)","out":"PythonスクリプトにAppleScriptを埋め込むにはどうすればよいですか？"}
{"in":"info = XXX.objects.filter(a = 111) #return the list of QuerySet (objects)<nl>for item in info:<nl><tab> item.b = 111<tab># Object<nl><tab> item.save()","out":"forループで項目を追加する"}
{"in":"import csv<nl>reader = csv.reader(open('output.csv', 'rb'))<nl>reader1 = csv.reader(open('output1.csv', 'rb'))<nl>writer = csv.writer(open('appended_output.csv', 'wb'))<nl>for row in reader:<nl><tab> row1 = reader1.next()<nl><tab> writer.writerow(row + row1)","out":"pythonを使用して、あるcsvファイルの内容を別のcsvファイルに追加する。"}
{"in":"h = lambda x: f(x)+g(x)","out":"Python : ラムダ定義関数の追加"}
{"in":"self.CreateStatusBar(2)<nl>self.SetStatusText(\"A Custom StatusBar...\", 1)<nl>wx.CallLater(10000, self.SetStatusText, \"\", 1)","out":"メニューとのインタラクションでwx.StatusBarのテキストを管理する方法"}
{"in":"import numpy as np<nl>from collections import Counter<nl><nl>a=['John', 'John', 'John', 'Mark', 'Mark', 'Mark', 'Joe']<nl>b= ['John', 'Mark', 'Joe', 'Joe', 'Joe', 'Jack']<nl>c= ['Mark', 'Joe', 'Jack', 'Jack', 'Tony']<nl><nl>ac = Counter(a)<nl>bc = Counter(b)<nl>cc = Counter(c)<nl><nl><nl>allLists = [list(), list(), list()]<nl><nl>allNames = set(ac.keys() + bc.keys() + cc.keys());<nl><nl>for name in allNames:<nl><nl><tab> aCount = ac[name];<nl><tab> bCount = bc[name];<nl><tab> cCount = cc[name];<nl><nl><tab> allCounts = np.array([aCount, bCount, cCount]);<nl><nl><tab> maxIndex = allCounts.argsort()[::-1][0];<nl><nl><tab> allLists[maxIndex] += [name];<nl><nl><nl>alist, blist, clist = allLists[:]<nl><nl>print alist, blist, clist","out":"複数のディクショナリを横断して、最も値の大きい各キーに対応するディクショナリ名を取得する方法"}
{"in":"re.sub('<a[^>]+>(.*?)<\/a>', '\\\\1', text)","out":"Python reを使ってリンクを消す"}
{"in":"import os<nl>print os.environ['BUILD_NUMBER']","out":"pythonスクリプトでjenkinsプラグインを使用する方法は？"}
{"in":"import matplotlib<nl>import numpy as np<nl>import matplotlib.cm as cm<nl>import matplotlib.pyplot as plt<nl>from scipy.interpolate import interp2d<nl><nl># http:\/\/en.wikipedia.org\/wiki\/File:Bilininterp.png<nl>xi = np.array([0.0, 1.0])<nl>yi = np.array([0.0, 1.0])<nl>zi = np.array([[0.0, 1.0], [1.0, 0.5]])<nl><nl># Another example<nl>xi = np.array([0.0, 0.25, 1.0])<nl>yi = np.array([0.0, 0.75, 1.0])<nl>zi = np.array([[0.0, 0.5, 1.0], [0.5, 0.7, 0.5], [1.0, 1.0, 1.0]])<nl><nl># I want 20 \"levels\" to be shown<nl>contour_breaks = 20<nl>ticks = np.linspace(zi.min(), zi.max(), contour_breaks, endpoint=True)<nl><nl># Attempt 4 (interp2d does to correct bilinear interpolation)<nl>fig = plt.figure()<nl>axes = fig.add_subplot(111, aspect='equal')<nl>f = interp2d(xi, yi, zi, kind='linear')<nl>xi2 = np.linspace(0., 1., 100)<nl>yi2 = np.linspace(0., 1., 100)<nl>zi2 = f(xi2, yi2)<nl>axes.contour(xi2, yi2, zi2, ticks[1:-1], colors='k')<nl>fill = axes.contourf(xi2, yi2, zi2, ticks, cmap=cm.jet)<nl>fig.colorbar(fill, ticks=ticks)<nl><nl># Show the plots<nl>plt.show()","out":"Python\/Matplotlib - バイリニア補間を使った等高線プロット"}
{"in":"ssh = paramiko.SSHClient()<nl>ssh.set_missing_host_key_policy(<nl><tab><tab><tab><tab>paramiko.AutoAddPolicy())<nl><nl>ftp = ssh.open_sftp() <nl>ftp.get('remotefile', 'localfile')","out":"Paramiko SFTPClient - 設定されていないホストキーポリシー？"}
{"in":"users = Table('users', metadata, autoload=True)","out":"Pyramid SqlAlchemyで2つのデータベースを使う。"}
{"in":"RoleFormSet = inlineformset_factory(UserRole, User.role.though)","out":"多対多の関係でフォームセットをインライン化するためのペンダント"}
{"in":"cursor.execute(\"DELETE FROM test WHERE name=%s\", (Value,));","out":"Pythonを使ったMySQLで、値をタイプして更新・削除する。"}
{"in":"page_key = ndb.Key(Book, bookId, Chapter, chapterId, Page, pageId)<nl>page = page_key.get()","out":"GAEで祖先を扱う"}
{"in":"#!\/usr\/bin\/env python2.7<nl># -*- coding: utf-8 -*-<nl>\"\"\"Example of Flask and qrcode.<nl><nl>NOTE: by requirements image in memory!<nl>\"\"\"<nl><nl>__author__ = 'Daniel Leybovich <setarckos@gmail.com>'<nl>__version__ = (0, 0, 1)<nl><nl><nl>import os<nl>import sys<nl>import flask<nl>import qrcode<nl>import cStringIO<nl><nl><nl>app = flask.Flask(__name__)<nl><nl><nl>def random_qr(url='www.google.com'):<nl><tab> qr = qrcode.QRCode(version=1,<nl><tab><tab><tab><tab><tab><tab><tab>  error_correction=qrcode.constants.ERROR_CORRECT_L,<nl><tab><tab><tab><tab><tab><tab><tab>  box_size=10,<nl><tab><tab><tab><tab><tab><tab><tab>  border=4)<nl><nl><tab> qr.add_data(url)<nl><tab> qr.make(fit=True)<nl><tab> img = qr.make_image()<nl><tab> return img<nl><nl><nl>@app.route('\/get_qrimg')<nl>def get_qrimg():<nl><tab> img_buf = cStringIO.StringIO()<nl><tab> img = random_qr(url='www.python.org')<nl><tab> img.save(img_buf)<nl><tab> img_buf.seek(0)<nl><tab> return flask.send_file(img_buf, mimetype='image\/png')<nl><nl><nl>if __name__ == '__main__':<nl><tab> app.run(host='0.0.0.0', debug=True)","out":"Flaskでpythonのqrcodeを使って生成したQR画像を配信する方法"}
{"in":"value = my_list[0]<nl>if isinstance(value, list):<nl><tab> value = value[0]<nl><nl># use the value","out":"任意のネストされたリストからリスト以外の最初の値を読み出す"}
{"in":"blar = re.search(\"Blar=(-?\\d+\\.\\d+)((?:,-?\\d+\\.\\d+)+)\", x)<nl>blar.groups()","out":"pythonで、あるトークンの後にあるN個の数字を見つける正規表現"}
{"in":"cursor = r.table('timetests').filter(<nl><tab> lambda t: t['time'].during(r.now() - 3600, r.now())<nl><tab> ).run(conn)","out":"RethinkDBとPythonで1時間より新しいアイテムをフィルタリングする。"}
{"in":"import traceback<nl><nl>class MyClass(object):<nl><tab>def __init__(self):<nl><tab><tab> self.traceback = traceback.extract_stack()[-2]<nl><nl>obj = MyClass()<nl><nl>print 'Instantiated in {0}:{1}'.format(*obj.traceback)","out":"オブジェクトがどこでインスタンス化されたかを調べるにはどうすればよいですか？"}
{"in":"import HTMLParser<nl>parser = HTMLParser.HTMLParser()<nl>unescaped_string = parser.unescape(html_escaped_string)","out":"JSONレスポンスでアポストロフィが変換されない問題"}
{"in":"from PIL import Image<nl>import StringIO<nl>tempBuff = StringIO.StringIO()<nl>tempBuff.write(curimg)<nl>tempBuff.seek(0) #need to jump back to the beginning before handing it off to PIL<nl>Image.open(tempBuff)","out":"jpeg文字列をPILイメージオブジェクトに変換する。"}
{"in":"value = func_returning_a_tuple()[0]","out":"タプルのアンパッキング：ダミー変数とインデックスの比較"}
{"in":"import matplotlib.pyplot as plt<nl><nl>fig = plt.figure()<nl><nl># Add subplots<nl>nRows = 4<nl>nCols = 2<nl>nPlots = 7<nl>ax1 = fig.add_subplot(nRows,nCols,1)<nl>ax1.set_yscale('log')<nl>ax1.set_xscale('log')<nl><nl>for n in range(1, nPlots+1):<nl><tab> plt.subplot(nRows,nCols,n, sharex=ax1, sharey=ax1)<nl><nl># Turn off tick lables where needed. <nl>index = 0<nl>for r in range(1, nRows +1):<nl><tab>  for c in range(1, nCols + 1):<nl><tab><tab><tab>index += 1<nl><tab><tab><tab># Turn off y tick labels for all but the first column.<nl><tab><tab><tab>if ((c != 1) and (index <= nPlots)):  <nl><tab><tab><tab><tab> ax = plt.subplot(nRows, nCols, index, sharex=ax1, sharey=ax1)<nl><tab><tab><tab><tab> plt.setp(ax.get_yticklabels(), visible=False)<nl><tab><tab><tab> # Turn off x tick lables for all but the bottom plot in each <nl><tab><tab><tab> # column. <nl><tab><tab><tab>if ((nPlots - index) >= nCols):<nl><tab><tab><tab><tab> ax = plt.subplot(nRows, nCols, index, sharex=ax1, sharey=ax1) <nl><tab><tab><tab><tab> plt.setp(ax.get_xticklabels(), visible=False)<nl><nl>plt.subplots_adjust(wspace=0, hspace=0)<nl><nl>plt.show()","out":"Matplotlib\/Pyplotの共有軸を奇数のサブプロットで使用する。"}
{"in":"import pickle  <nl><nl>d = {'key1':'value1'}<nl>dd = {frozenset(d.items()):'my_value'}<nl><nl># Save to dumpfile<nl>pickle.dump(dd, open('dumpfile', 'wb'))<nl><nl># Load again from dumpfile<nl>dd = pickle.load(open('dumpfile', 'rb'))","out":"文字列をfrozensetに戻すにはどうすればよいですか？"}
{"in":"from apscheduler.scheduler import Scheduler<nl><nl>schedule = Scheduler()<nl>jobs = schedule.get_jobs() #jobs is a list of apscheduler jobs<nl>jobs_kwargs = map(lambda k: k.kwargs, jobs)","out":"pythonでオブジェクトのリストからオブジェクトのプロパティのリストを取得する"}
{"in":"from Tkinter import *<nl><nl>def getpwd():<nl><tab> password = ''<nl><tab> root = Tk()<nl><tab> pwdbox = Entry(root, show = '*')<nl><tab> def onpwdentry(evt):<nl><tab><tab><tab>password = pwdbox.get()<nl><tab><tab><tab>root.destroy()<nl><tab> def onokclick():<nl><tab><tab><tab>password = pwdbox.get()<nl><tab><tab><tab>root.destroy()<nl><tab> Label(root, text = 'Password').pack(side = 'top')<nl><nl><tab> pwdbox.pack(side = 'top')<nl><tab> pwdbox.bind('<Return>', onpwdentry)<nl><tab> Button(root, command=onokclick, text = 'OK').pack(side = 'top')<nl><nl><tab> root.mainloop()<nl><tab> return password","out":"Pythonでグラフィカルなダイアログを使用してユーザーにパスワードを尋ねる最も簡単な方法？"}
{"in":"import gc<nl>gc.collect()","out":"Python 2.5でGoogle App Engineのblobstoreにファイルとして書き込むための適切な方法を教えてください。"}
{"in":"backtonormal = urllib.unquote(thestring)","out":"PythonでURLクォートされたUTF-8文字列をアンクォートする方法"}
{"in":"request.args.get('variable')","out":"Tipfyを使ってHTTP GET変数を取得する。"}
{"in":"import pprint<nl>import subprocess<nl><nl>df = subprocess.check_output('lsusb', shell=True)<nl>device_ids = []<nl>for line in filter(lambda s: s.startswith('Bus'), df.split('<nl>')):<nl><tab> businfo, id, _ = line.split(':')<nl><tab> id = id.split()[1]<nl><tab> device_ids.append(id)<nl><nl>pprint.pprint(device_ids)","out":"usbのシリアルナンバーを取得する方法 python"}
{"in":"os.mkdir","out":"関数のパラメータを元にディレクトリを作成する、Python"}
{"in":"data = file.readlines()","out":"ファイルからデータを読み出し、リストのリストに格納する Python"}
{"in":"# Success<nl>def is_element_present(self, id_type, id_locator):<nl><tab> driver = self.driver<nl><tab> element_found = True<nl><tab> driver.implicitly_wait(1)<nl><tab> try:<nl><tab><tab>  element = WebDriverWait(driver, 0).until(<nl><tab><tab><tab><tab>EC.presence_of_element_located((id_type, id_locator))<nl><tab><tab>  )<nl><tab> except:<nl><tab><tab>  element_found = False<nl><tab> driver.implicitly_wait(30)<nl><tab> return element_found","out":"30秒のタイムアウトを待たずに要素が存在しないことをテストする方法"}
{"in":"import re<nl><nl>string = \"\"\"736.199070736:  LOG_MOD_L0_RECEIVE_TXBRP_CONTROL(0, <nl> 0x0075007f, <nl> 0x005500dd,  <nl> 0x000a00f5)\"\"\"<nl><nl>result = re.search(r'\\(.*\\)', string) # matches anything between parenthesis<nl><nl>result.group()<nl><nl>'(0, 0x0075007f, 0x005500dd,  0x000a00f5)'","out":"pythonで特定の文字列を表示する方法は？"}
{"in":"figure(self.figures[fig].number)","out":"matplotlibの数値への参照の辞書を反復処理する方法"}
{"in":"print main1.__file__","out":"Pythonモジュールの変更がインポートされない"}
{"in":"datetime.strptime(x,\"%Y%m%d%H%M%S%f\")","out":"Pythonの日付までの数値の文字列"}
{"in":"marmot = Animal.objects(genus='Marmota').first()<nl>photo = marmot.photo.read()<nl>content_type = marmot.photo.content_type","out":"Pythonでmongoengineから画像を取得し、httpのレスポンスとしてページに表示する。"}
{"in":"print DoGood._DoGood__prv # access a private attribute.","out":"pythonクラスのprivate属性で値を代入できるのはなぜですか？"}
{"in":"for line in lines:<nl><tab> x, y = line.split()<nl><tab> if int(x) > int(y): return True<nl>return False","out":"for-loopの比較演算子"}
{"in":"three_letters = [word for word in words if len(word) == 3]","out":"リスト理解力を使って、リストから3文字の単語をすべて選択する"}
{"in":"tuple([10*x for x in img.size])","out":"タプルにスカラーを乗せる"}
{"in":"for i in range(1, 4):<nl><tab> type_dict['type_%d' % i] = myTree.cssselect('element_type_%d' % i)","out":"タグ付きデータから複数の要素タイプを選択する、よりPythonicな方法"}
{"in":"from win32com.client import constants<nl>import win32com.client<nl>speaker = win32com.client.Dispatch(\"SAPI.SpVoice\")<nl><nl>d = {'a':'alfa', 'b':'bravo', 'c':'charlie', 'd':'delta', 'e':'echo', 'f':'foxtrot',<nl> 'g':'golf', 'h':'hotel', 'i':'india', 'j':'juliett', 'k':'kilo', 'l':'lima',<nl> 'm':'mike', 'n':'november', 'o':'oscar', 'p':'papa', 'q':'quebec', 'r':'romeo',<nl> 's':'sierra', 't':'tango', 'u':'uniform', 'v':'victor', 'w':'whiskey', <nl> 'x':'x-ray', 'y':'yankee', 'z':'zulu'}<nl>speaker.speak(\"Hello.. Please write a line you want me to say\")<nl>print (\"Type your text now:\")<nl>inp = input()<nl>print (\"Outputting...\")<nl>result = ' '.join(d[c.lower()] for c in inp)<nl>speaker.speak(result)","out":"言葉を使って仕事をし、ABCをアルファ、ブラボー、チャーリーに翻訳する必要がある。"}
{"in":"tempfile.mkdtemp()","out":"Pythonで「一時ファイル」フォルダを使う"}
{"in":"def naming(instance, file_name):<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> <nl><tab> model_name = instance.__class__.__name__<nl><tab> return os.path.join(model_name, file_name)","out":"django で upload_to でディレクトリと関数を指定する方法"}
{"in":"def start_requests(self):<nl><tab> for i in range(1000):<nl><tab><tab>  yield Request(\"http:\/\/www.example.com\/bla-bla-bla\/\" + str(i), self.parse_tv)","out":"scrapyを使ってサイトを再帰的にクロールする"}
{"in":"link_string = '<a href=\"\/search\/?q=%%23%s\"> %s <\/a>'","out":"Pythonで%文字から脱出する"}
{"in":"class CategoryForm(forms.ModelForm):<nl><tab> class Meta:<nl><tab><tab>  model = models.Category<nl><tab><tab>  exclude = ()<nl><tab><tab>  form = CategoryForm<nl><nl>class CategoryAdmin(admin.ModelAdmin):<nl><tab> list_display = ['department','name']<nl><tab> list_filter = ['department','name']<nl><nl><tab> def get_form(self, request, obj=None, **kwargs):<nl><tab><tab>  form = super(CategoryAdmin, self).get_form(request, obj=None, **kwargs)<nl><tab><tab>  form.base_fields['department'].queryset = Department.objects.filter(<nl><tab><tab><tab><tab>name = request.user.customuser.department.name)<nl><tab><tab>  return form","out":"django modelform の request.user に admin でアクセスする方法。"}
{"in":"import numpy as np<nl><nl>def some_function(x):<nl><tab> return 3*x<nl><nl>input = np.ones([10,26])<nl>input = np.hstack([input,np.empty([input.shape[0],1])])<nl>for row in input:<nl><tab> row[-1] = some_function(row[0])<nl><nl>output = input","out":"Webトラフィックの数値を取得する方法と、numpy配列にカラムを追加する方法は？"}
{"in":"Group.objects.exclude(id__in=request.user.groups.all().values_list('id', flat=True))","out":"djangoでユーザが所属していないグループをすべてリストアップするには？"}
{"in":"arr = np.loadtxt('test.txt', ndmin=2)","out":"ファイルが1次元しかなくても、np.loadtxtが多次元配列を返すようにするにはどうすればよいですか？"}
{"in":"class ClassDict(object):<nl>  def __init__(self):<nl><tab> self.classes = {}<nl><nl>  def add(self, cls):<nl><tab> self.classes[cls.__name__] = cls<nl><nl>  def remove(self, cls):<nl><tab> if self.classes[cls.__name__] == cls:<nl><tab><tab>del self.classes[cls.__name__]<nl><tab> else:<nl><tab><tab>raise KeyError('%r' % cls)<nl><nl>  def __getitem__(self, key):<nl><tab> return self.classes[key]<nl><nl>  def __repr__(self):<nl><tab> return 'ClassDict(%s)' % (', '.join(self.classes),)<nl><nl>class C(object):<nl>  pass<nl><nl>class D(object):<nl>  pass<nl><nl>cd = ClassDict()<nl>cd.add(C)<nl>cd.add(D)<nl><nl>print cd<nl><nl>print cd['C']","out":"Python - リストからキーを使ってクラスにアクセスする"}
{"in":"ws1 = wb.active<nl>ws2 = wb.create_sheet()","out":"openpyxlを使用して1つのワークブックに2つのシートを同時に書き込む方法"}
{"in":"# copied directly from the docs<nl>from jinja2 import Environment, PackageLoader<nl><nl>env = Environment(loader=PackageLoader('yourapplication', 'templates'))<nl>template = env.get_template('mytemplate.html')<nl>print template.render(the='variables', go='here')","out":"Jinja2のテンプレートをpythonのプログラムの中で使うにはどうしたらいいでしょうか？"}
{"in":"from django.contrib import admin<nl>from django.contrib.admin import widgets<nl>from django.contrib.admin.sites import site<nl>from django import forms<nl><nl>class BlogRawIdWidget(widgets.ForeignKeyRawIdWidget):<nl><tab> def url_parameters(self):<nl><tab><tab>  res = super().url_parameters()<nl><tab><tab>  res['type__exact'] = 'PROJ'<nl><tab><tab>  return res<nl><nl>class ProjectAdminForm(forms.ModelForm):<nl><tab> def __init__(self, *args, **kwargs):<nl><tab><tab>  super().__init__(*args, **kwargs)<nl><tab><tab>  self.fields['blog'].queryset = Blog.objects.filter(type='PROJ')<nl><tab><tab>  self.fields['blog'].widget = BlogRawIdWidget(rel=Project._meta.get_field('blog').rel, admin_site=site)<nl><nl><tab> class Meta:<nl><tab><tab>  # Django 1.8 convenience:<nl><tab><tab>  fields = '__all__'<nl><tab><tab>  model = Project<nl><nl>class ProjectAdmin(admin.ModelAdmin):<nl><tab> form = ProjectAdminForm<nl><tab> raw_id_fields = ('blog',)","out":"Djangoのraw_id_fieldのForeignKeyの選択肢を制限する方法。"}
{"in":"with open(\"filename_here\") as f:<nl><tab> content = f.readlines()<nl>print content","out":"ファイルからhttpリンクを読み出し、リストに追加する。"}
{"in":"class ScheduledPayment(Base):<nl><tab> id = Column(Integer, primary_key=True)<nl><tab> invoice_id = Column(Integer)<nl><tab> is_canceled = Column(Boolean, default=False)<nl><nl><tab> __table_args__ = (<nl><tab><tab>  Index('only_one_active_invoice', invoice_id, is_canceled,<nl><tab><tab><tab><tab>  unique=True,<nl><tab><tab><tab><tab>  postgresql_where=(~is_canceled)),<nl><tab> )","out":"Postgresでsqlalchemyを使用して部分ユニークインデックスを作成する。"}
{"in":"my_plot = pg.PlotWidget()<nl>my_layout.addWidget(my_plot)<nl>my_plot.plot(x, y)","out":"新しいウィンドウを生成せずにQtにPyQtGraphを埋め込む"}
{"in":"import pandas<nl>import numpy<nl>my_series = pandas.Series([0,0,1,2,0,3,4,0,0])<nl>numpy.trim_zeros(my_series)","out":"Pandas: シリーズから末尾のゼロを取り除く"}
{"in":"password = \"pass\"<nl>username = \"user\"<nl>transport.connect(username = username, password = password)","out":"pythonでsftpを使用してリモートマシンからファイルをコピーする。"}
{"in":"import re<nl><nl>with open(\"Tyger.txt\") as f:<nl><tab> words = re.findall(\"\\w+\", f.read())","out":"pythonのリストから句読点を取り除く"}
{"in":"[(i,j) for i,j in ((a-1,b), (a+1,b), (a,b-1), (a,b+1)) if 0<=i<MAXX and 0<=j<MAXy and X[i][j] is not None ]","out":"2Dリストの直交隣接を求めるリスト内包の作成"}
{"in":"import json<nl>for l in xrange(100):<nl><tab> try:<nl><tab><tab>  with open('C:\/Twitter\/json\/user_%d.json' % l, 'r') as f:<nl><tab><tab><tab><tab>data = json.load(f)<nl><tab><tab><tab><tab>#do stuff with obj<nl><tab> except IOError:<nl><tab><tab>  pass","out":"Python：配列から欠落したファイルを処理する"}
{"in":"def transform_date(date_string, tzinfo):<nl><tab> fmt = '%Y-%m-%d'<nl><tab> date = datetime.strptime(date_string, fmt).replace(tzinfo=tzinfo)<nl><tab> return date","out":"tzinfoをdatetimeに挿入する。"}
{"in":"q = taskqueue.Queue('slowQueue') <nl>task = taskqueue.Task(url='\/worker\/slow', params={'name': name})<nl>q.add(task)","out":"google app engineでタスクをデフォルト以外のキューに追加する。"}
{"in":"tuples = [(2,5),(8,9),(11,19),(22,43),(47,50)]<nl>#tuples = [(2,7),(9,14),(17,20)]<nl><nl>def result(tuple, value):<nl><tab> start = tuples[0][0] - 1<nl><tab> for idx in range(len(tuples) - 1):<nl><tab><tab>  if tuples[idx][1] >= value + start:<nl><tab><tab><tab><tab>break<nl><tab><tab>  start = start + (tuples[idx+1][0] - tuples[idx][1] - 1)  <nl><tab> return value + start  <nl><nl>for i in range(1, 16):<nl><tab> print str(i) + ' ' + str(result(tuples, i))","out":"異種タプルの要素の和"}
{"in":"from . import abc","out":"内部モジュールで__init__のメソッドをインポートする方法は？"}
{"in":"set([a, b, c, a])","out":"Pythonでリストを単一化する最速の方法"}
{"in":"import subprocess<nl>params = ['convert', 'pdf_file', 'jpg:-']<nl>image_data = subprocess.check_output(params)","out":"サブプロセスで生成されたjpgをメインスクリプトでキャプチャする。"}
{"in":"for k,g in df.groupby(df['A'] - np.arange(df.shape[0])):<nl><tab> print g","out":"pandasのデータフレームを連続した値のグループにスライスする。"}
{"in":"def in_ipython():<nl><tab> try:<nl><tab><tab>  __IPYTHON__<nl><tab> except NameError:<nl><tab><tab>  return False<nl><tab> else:<nl><tab><tab>  return True","out":"ipythonでpythonスクリプトがインタラクティブに実行されていることを検出する。"}
{"in":"while 1:<nl><tab> print \"hello from stdout\"<nl><tab> sys.stdout.flush()<nl><tab> print >> sys.stderr, \"Hello from stderr\"<nl><tab> sleep(1)","out":"upstartジョブでpythonからstdoutをキャプチャする。"}
{"in":"import os, time<nl><nl>allfiles = []<nl>now = time.time()<nl><nl># walk will return triples (current dir, list of subdirs, list of regular files)<nl># file names are relative to dir at first<nl>for dir, subdirs, files in os.walk(\"\/storage\/disk-1\/Media\/Video\/TV\"):<nl><tab> for f in files:<nl><tab><tab>  if not f.endswith(\".avi\"):<nl><tab><tab><tab><tab>continue<nl><tab><tab>  # compute full path name<nl><tab><tab>  f = os.path.join(dir, f)<nl><tab><tab>  st = os.stat(f)<nl><tab><tab>  if st.st_mtime < now - 3600*24*7:<nl><tab><tab><tab><tab># too old<nl><tab><tab><tab><tab>continue<nl><tab><tab>  allfiles.append((f, st))","out":"Pythonを使用して、ファイルシステムの検索に基づいて、ファイル情報オブジェクトの配列を取得するにはどうすればよいですか？"}
{"in":"#! \/usr\/bin\/python2<nl><nl>import sys<nl>from lxml import etree<nl><nl>result = etree.Element('root')<nl>parser = etree.XMLParser(remove_blank_text=True)<nl><nl># Add each file to the tree<nl>for xmlfile in sys.argv[1:]:<nl>  with open(xmlfile) as xmlfile:<nl><tab> btree = etree.parse(xmlfile, parser)<nl>  # Ensure that the resulting tree has the right root<nl>  result.tag = btree.getroot().tag<nl>  # Consider each 2nd-level item<nl>  for bchild in btree.xpath(\"\/*\/*\"):<nl><tab> tags = result.xpath(\".\/%s\"%bchild.tag)<nl><tab> if len(tags) == 0:<nl><tab><tab># Add <dog-list>, for example<nl><tab><tab>#print \"adding %s to %s\"%(bchild.tag, result.tag)<nl><tab><tab>result.append(bchild)<nl><tab> else:<nl><tab><tab>for bgrandchild in bchild:<nl><tab><tab>  # add <dog>, for example<nl><tab><tab>  #print \"adding %s to %s\"%(bgrandchild.tag, tags[0].tag)<nl><tab><tab>  tags[0].append(bgrandchild)<nl><nl>with open(\"output.xml\", \"w\") as output:<nl>  output.write(etree.tostring(result, pretty_print = True))","out":"既存のXMLファイルに、XMLファイルのデータを追加する。"}
{"in":"many=True","out":"django-notifications-hq からの NotificationQuerySet のシリアライズがうまくいかない。"}
{"in":"import re<nl>s = r'''<html><nl> <head><nl>  <script type=\"text\/javascript\"><nl>  function redirecttoauth(sessionid, test) {<nl><tab>function body ...<nl>  }<nl>  <\/script><nl> <\/head><nl> <body><nl> <\/body><nl><\/html><nl>'''<nl><nl>start = r'function redirecttoauth\\(sessionid'<nl>end = r'}'<nl>result = re.search(r'%s(.*)%s' % (start, end), s, re.DOTALL).group(1)<nl>print(result)","out":"htmlの中で関数属性を取得するには？"}
{"in":"hexstrings = [\"DE\", \"AD\", \"BE\", \"EF\"]<tab># big-endian 0xDEADBEEF<nl><nl>bytes = bytearray(int(x, 16) for x in hexstrings)<nl>bytes = bytearray.fromhex(\"\".join(hexstrings))<tab>  # Python 2.6 may need u\"\"","out":"バイト文字列のリストをバイト配列（バイトストリーム）に変換する。"}
{"in":"# -*- Mode: Python -*-<nl># vi:si:et:sw=4:sts=4:ts=4<nl><nl>import subprocess<nl>import sys<nl>import select<nl><nl>p = subprocess.Popen([\"find\", \"\/proc\"],<nl><tab> stdout=subprocess.PIPE, stderr=subprocess.PIPE)<nl><nl>stdout = []<nl>stderr = []<nl><nl>while True:<nl><tab> reads = [p.stdout.fileno(), p.stderr.fileno()]<nl><tab> ret = select.select(reads, [], [])<nl><nl><tab> for fd in ret[0]:<nl><tab><tab>  if fd == p.stdout.fileno():<nl><tab><tab><tab><tab>read = p.stdout.readline()<nl><tab><tab><tab><tab>sys.stdout.write('stdout: ' + read)<nl><tab><tab><tab><tab>stdout.append(read)<nl><tab><tab>  if fd == p.stderr.fileno():<nl><tab><tab><tab><tab>read = p.stderr.readline()<nl><tab><tab><tab><tab>sys.stderr.write('stderr: ' + read)<nl><tab><tab><tab><tab>stderr.append(read)<nl><nl><tab> if p.poll() != None:<nl><tab><tab>  break<nl><nl>print 'program ended'<nl><nl>print 'stdout:', \"\".join(stdout)<nl>print 'stderr:', \"\".join(stderr)","out":"pythonのサブプロセスでstdoutとstderrを通常通り出力させるだけでなく、出力を文字列としてキャプチャすることは可能でしょうか？"}
{"in":"averages = {}<tab> # Create a new empty dictionary to hold the averages<nl>for key, values in scores.items(): <nl>  averages[key] = float(sum([int(i) for i in values])) \/ len(values)  <nl>  # Rather than store the averages in a local variable, store them in under the appropriate key in your new dictionary.","out":"辞書内の値の平均値を別の辞書に格納する - Python"}
{"in":"from Tkinter import *<nl>from OpenGL.Tk import *<nl><nl>b=Opengl(height=100,width=100)<nl>root = b.master<nl>f = Frame(root, width=100, bg='blue')<nl>f.pack(side='left', fill='y')<nl>b.pack(side='right', expand=1, fill='both')<nl><nl>root.mainloop()","out":"tkinterの非トップレベルopglウィジェット"}
{"in":"data_file = raw_input(\"Please type name of input data! \")<nl>data = open(data_file)<nl><nl>new_list = list()<nl><nl>for line in data:<nl><tab> line = line.rstrip()<nl><tab> first_empty = line.find(\" \")<nl><tab> items_whole = line[first_empty + 1:]<nl><tab> items_list = items_whole.split()<nl><tab> # Use a 'list comprehension' to convert the items list into a list of floats<nl><tab> floats_list = [float(i) for i in items_list]<nl><nl><tab> # Use the built in 'sorted' method to sort the floats<nl><tab> # If the sorted float list is the same as the original float list, then all the items are ascending<nl><tab> if floats_list == sorted(floats_list):<nl><tab><tab>  print items_list<nl><tab><tab>  # Add the list of floats into the 'new_list' for any post processing<nl><tab><tab>  new_list += [floats_list]","out":"Pythonです：ファイルの中で値が大きくなり続けている行だけを抽出する"}
{"in":"def cartprod(x,y):<nl><tab> nx = len(x)<nl><tab> ny = len(y)<nl><tab> for i in range(nx+ny):<nl><tab><tab>  for j in range(max(0,i-ny+1), min(i+1,nx)):<nl><tab><tab><tab><tab>yield (x[j],y[i-j])","out":"カルテシアン積を繰り返し、上位の項目が先に組み合わされるようにするにはどうすればよいですか？"}
{"in":"bools = [True, True, False, True, True, False, True]<nl><nl>print ''.join(chr(ord('A') + i) if b else ' ' for i, b in enumerate(bools))","out":"ブーリアンリストを文字列に変換する"}
{"in":"data = \"\"\"<nl>1 A 3 B 2 C 0 <nl><tab><tab>  D 0<nl><tab> E 1 F 0<nl><tab> G 2 H 0<nl><tab><tab>I 0\"\"\"<nl><nl>def construct_nodes(data):<nl><tab> return dict((next(data), construct_nodes(data))<nl><tab><tab><tab><tab><tab> for _ in xrange(int(next(data))))<nl><nl>print construct_nodes(iter(data.split()))","out":"Pythonです：テキストファイルから木のようなデータを読み込んで辞書に格納する"}
{"in":"with open(\"file.txt\", \"r\") as in_file:<nl><tab> buf = in_file.readlines()<nl><nl>with open(\"file.txt\", \"w\") as out_file:<nl><tab> for line in buf:<nl><tab><tab>  if line == \"; Include this text<nl>\":<nl><tab><tab><tab><tab>line = line + \"Include below<nl>\"<nl><tab><tab>  out_file.write(line)","out":"特定の行の後に行を追加する"}
{"in":"class MyXMLRPCServer(SimpleXMLRPCServer.SimpleXMLRPCServer):<nl><tab> def process_request(self, request, client_address):<nl><tab><tab>  self.client_address = client_address<nl><tab><tab>  return SimpleXMLRPCServer.SimpleXMLRPCServer.process_request(<nl><tab><tab><tab><tab>self, request, client_address)<nl><nl>server=SimpleXMLRPCServer.MyXMLRPCServer((host, port))","out":"Python xmlrpc server の regested 関数でリクエストの IP アドレスを取得するにはどうすればよいですか？"}
{"in":"import sys;<tab># Why use ';'? It's so non-pythonic.<nl><nl>inp = sys.stdin.read().split()<tab> # Take whitespaces as delimiter<nl>t = int(inp[0])<nl>readAt = 1<nl>for i in range (0,t):<nl><tab> x,y,z = map(int,inp[readAt:readAt+3])<tab> # Read the next three elements<nl><tab> n = (2*z)\/(x+y)<nl><tab> d = (y-x)\/(n-5)<nl><tab> a = x-(2*d)<nl><tab> print n<nl><tab> #for j in range(0,n):<nl><tab> #<tab> sys.stdout.write(a+j*d)<nl><tab> #<tab> sys.stdout.write(' ')<nl><tab> #print ' '<nl><tab> print ' '.join([str(a+ti*d) for ti in xrange(n)]) # More compact and faster<nl><tab> readAt += 3<tab># Increment the index from which to start the next read","out":"AP2用spojでpythonでNZEC。"}
{"in":"cgs = cg.sum()<nl>cgs.columns = ['number2']<nl>d = pd.concat([bg.sum(), cgs], axis=1)<nl>d.plot(kind='bar', stacked=True)","out":"2つのpandas groupbyオブジェクトから積み上げ棒グラフをプロットする？"}
{"in":"import ctypes as cs<nl>import numpy as np<nl><nl>#import dll library handle:<nl>tdll = cs.WinDLL(pathToDLL)<nl>#specify result and argument types<nl>tdll.TST.restype = None<nl>tdll.TST.argtypes = [cs.POINTER(cs.POINTER(cs.c_double*3)), cs.POINTER(cs.c_long)]<nl><nl>#call the dll function 'TST':<nl>Ar = (cs.c_double*3)()<nl>_A = cs.pointer(Ar)<nl>tdll.TST(cs.byref(_A), cs.byref(cs.c_long(3)))<nl>result = Ar[:]","out":"FORTRAN(DLL)を使って二重配列を返し、Pythonでさらに処理する。"}
{"in":"import datetime, calendar<nl>date1 = datetime.date(year1, month1, day1) # month and day are 1-base<nl>date2 = datetime.date(year2, month2, day2)<nl>days_in_first_year = (datetime.date(year1,12,31)-date1).days<nl>days_in_last_year = (date2 - datetime.date(year2, 1, 1)).days<nl>if year1 != year2:<nl><tab> n_days_list = [days_in_first_year]<nl><tab> for year in range(year1+1, year2): n_days_list.append(365 + (1*calendar.isleap(year)))<nl><tab> n_days_list.append(days_in_last_year)<nl>else: n_days_list = [days_in_first_year + days_in_last_year]","out":"pythonで2つの日付の間の1年の日数を計算する方法"}
{"in":"QObject.sender","out":"QActionのtriggered()シグナルをpyqtで再実装するにはどうすればよいですか？"}
{"in":"self.font = pygame.font.SysFont('Arial', 25)<nl><nl>def addText(self):<nl><tab> self.screen.blit(self.font.render('Hello!', True, (255,0,0)), (200, 100))<nl><tab> pygame.display.update()","out":"この矩形に文字を入れるにはどうしたらいいのでしょうか？"}
{"in":"if isinstance(MyNodeModel.your_property, StringProperty):<nl><tab> print(\"a string\")","out":"neomodelでプロパティのタイプを確認する"}
{"in":"m = np.array([x[:5] for x in d], dtype=object)","out":"pythonでnumpy配列の最初の数項目をインクルードする方法"}
{"in":"matplotlib.pyplot.switch_backend('Agg')","out":"Matplolibで画像を画面に表示させないようにするには？Python"}
{"in":"from scipy.cluster import hierarchy<nl>def getNewick(node, newick, parentdist, leaf_names):<nl><tab> if node.is_leaf():<nl><tab><tab>  return \"%s:%.2f%s\" % (leaf_names[node.id], parentdist - node.dist, newick)<nl><tab> else:<nl><tab><tab>  if len(newick) > 0:<nl><tab><tab><tab><tab>newick = \"):%.2f%s\" % (parentdist - node.dist, newick)<nl><tab><tab>  else:<nl><tab><tab><tab><tab>newick = \");\"<nl><tab><tab>  newick = getNewick(node.get_left(), newick, node.dist, leaf_names)<nl><tab><tab>  newick = getNewick(node.get_right(), \",%s\" % (newick), node.dist, leaf_names)<nl><tab><tab>  newick = \"(%s\" % (newick)<nl><tab><tab>  return newick<nl><nl>tree = hierarchy.to_tree(Z,False)<nl>getNewick(tree, \"\", tree.dist, leaf_names)","out":"デンドログラムをnewickフォーマットで保存"}
{"in":"with open('filename.pickle', 'rb') as infile:<nl><tab> loaded_people = pickle.load(infile)<nl><tab> loaded_user = pickle.load(infile)<nl>#have them input their username<nl>#have them input their password<nl>if username_password.get(username) == password:<nl><tab> print 'OK, loaded'<nl><tab> like_people = loaded_data<nl><tab> username_password = loaded_user<nl>else:<nl><tab> raise Exception('nice try but no cigar')","out":"pickleから情報をダンプ、ロード、読み取る方法"}
{"in":"from Tkinter import * # Python 3.x: from tkinter import *<nl><nl>def hello(e=None):<nl><tab> print('Hello')<nl><nl>root = Tk()<nl>Button(root, text='say hello', command=hello).pack()<nl>root.bind('<Escape>', lambda e: root.quit())<nl>root.bind('h', hello)<nl>root.mainloop()","out":"pythonでキー入力をトレースする"}
{"in":"from selenium import webdriver<nl>browser = webdriver.Firefox()<nl>browser.get('http:\/\/subscene.com\/english\/How-I-Met-Your-Mother-Seventh-Season\/subtitle-482407.aspx')<tab><tab>  <nl>browser.execute_script('WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(\"s$lc$bcr$downloadLink\", \"\", true, \"\", \"\/english\/How-I-Met-Your-Mother-Seventh-Season\/subtitle-482407-dlpath-90698\/zip.zipx\", false, true))')<nl>raw_input()","out":"Pythonです：javascriptのボタンからダウンロードリンクを取得する"}
{"in":"def location(x,y,dim_x,dim_y):<nl><tab> index = 1*(y==0) + 2*(y==dim_y-1) + 3*(x==0) + 6*(x==dim_x-1)<nl><tab> return [\"interior\",\"top\",\"bottom\",\"left\",\"top-left\",<nl><tab><tab><tab><tab>\"bottom-left\",\"right\",\"top-right\",\"bottom-right\"][index]","out":"グリッド(配列)上の位置を効率的に決定する方法。"}
{"in":"with mock.patch.object(Parent, 'test_method') as mock_method:<nl><tab> child = Child()<nl><tab> mock_param = mock.Mock()<nl><tab> child.test_method(mock_param)<nl><tab> mock_method.assert_called_with(mock_param)","out":"ベースクラスのメソッドがオーバーライドされたときにモックする方法は？"}
{"in":"array = [('item1',90),('item2',76),('item3',83),('item4',90)]<nl>srt = sorted(array,key=lambda x: x[1], reverse=True)<nl>rankings = []<nl>rank = 0<nl>from itertools import groupby<nl>for k,v in groupby(srt,lambda x: x[1]): # group by score<nl><tab> grp = [(rank,tup[0]) for tup in v] # get item tup[0] and put it in a tuple with the rank<nl><tab> rankings += grp<nl><tab> rank += len(grp) # increase rank for next grouping<nl>print(rankings)<nl>[(0, 'item1'), (0, 'item4'), (2, 'item3'), (3, 'item2')]","out":"タプルの配列をランク付けする"}
{"in":"def sortOD(od):<nl><tab> res = OrderedDict()<nl><tab> for k, v in sorted(od.items()):<nl><tab><tab>  if isinstance(v, dict):<nl><tab><tab><tab><tab>res[k] = sortOD(v)<nl><tab><tab>  else:<nl><tab><tab><tab><tab>res[k] = v<nl><tab> return res","out":"入れ子になったOrderedDictをキーで再帰的にソートする。"}
{"in":"a + b + c","out":"2セットのブラケットを使用してスライスする"}
{"in":"AWS_S3_SECURE_URLS = True","out":"Django-Storages を amazon S3 と https で使う。"}
{"in":"__lt__()","out":"Djangoのモデルの並び順"}
{"in":"nargs='+'","out":"Python: 変数サイズのリストを取るargparse"}
{"in":"def test(a):<nl><tab> return a<nl><nl>def invoker(*args):<nl><tab> print sum(args) # Prints 25<nl><tab> print args # Prints (10, 15)<nl><nl>invoker(test(10), test(15))","out":"他の関数からの引数を持つ関数"}
{"in":"data[0]['f'] = var","out":"pythonでjsonに要素を追加する。"}
{"in":"def palindrome(s):<nl><tab> i = 0<nl><tab> while i <= len(s) \/ 2:<nl><tab><tab>  if s[i] != s[-i - 1]:<nl><tab><tab><tab><tab>return False<nl><tab><tab>  i += 1<nl><tab> return True","out":"pythonのwhileループを使った回文チェックの方法"}
{"in":"class NamedFunction:<nl><tab> def __init__(self, name, f):<nl><tab><tab>  self.f = f<nl><tab><tab>  self.name = name<nl><nl><tab> def __call__(self, *args, **kwargs):<nl><tab><tab>  return self.f(*args, **kwargs)<nl><nl><tab> def __str__(self):<nl><tab><tab>  return self.name<nl><nl><nl>f = NamedFunction(\"lambda: 'blah'\", lambda: 'blah')<nl>print(f())<nl>print(f)","out":"関数の__str__を置き換える方法"}
{"in":"import socks, urllib2<nl>from sockshandler import SocksiPyHandler<nl>proxy_opener = urllib2.build_opener(SocksiPyHandler(socks.PROXY_TYPE_SOCKS5, \"IP\", 9050))<nl>print proxy_opener.open(\"http:\/\/whatismyip.org\/\").read()","out":"SocksiPyでモジュールをアンラップするにはどうすればよいですか？"}
{"in":"import pyperclip<nl>pyperclip.copy('The text to be copied to the clipboard.')","out":"文字列を先頭文字以外を小文字に変更し、クリップボードにコピーする。"}
{"in":"class B():<nl><tab> def hello(self):<nl><tab><tab>  print \"hello\"<nl><nl>class A():<nl><tab>@staticmethod<nl><tab>def newHello(self):<nl><tab><tab> A.oldHello(self) # Here the error<nl><tab><tab> print ' world'<nl><nl><tab>def inject(self):<nl><tab><tab> A.oldHello = B.hello<nl><tab><tab> B.hello = A.newHello<nl><nl>A().inject()<nl>B().hello()","out":"Pythonで静的メソッドをバウンディングする方法は？"}
{"in":"import matplotlib.pyplot as plt<nl><nl>a= [1,2,3,4,5,6,7,8,9]<nl>b= [5,3,4,5,3,2,1,2,3]<nl>plt.hist(a,9, weights=b)<nl>plt.show()","out":"ビン化されたデータからヒストグラムを作成し、ビンと頻度値を持っています。"}
{"in":"from selenium import webdriver<nl>from bs4 import BeautifulSoup<nl><nl>driver = webdriver.Firefox()<nl>driver.get(url)<nl>driver.set_window_position(0, 0)<nl>driver.set_window_size(100000, 200000)<nl>driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")<nl>time.sleep(5) # wait to load<nl><nl># at this point, if you see the Firefox window that opened you will see the message<nl><nl># Anyway, if you manage to get pass trough that blocking, you could load BeautifulSoup this way: <nl>soup = BeautifulSoup(driver.page_source)","out":"Pythonを用いたWebクローラによるHref抽出。"}
{"in":"import matplotlib.pyplot as plt<nl>from mpl_toolkits.mplot3d import Axes3D<nl>import numpy as np<nl>import itertools<nl><nl>#read in data from csv organised in columns labelled 'lat','lon','elevation'<nl>data = np.recfromcsv('elevation-sample.csv', delimiter=',')<nl><nl># create a 3d axis on a figure<nl>fig = plt.figure()<nl>ax = fig.add_subplot(111, projection='3d')<nl><nl># Find unique (i.e. constant) latitude points<nl>id_list = np.unique(data['lat'])<nl><nl># stride is how many lines to miss.  set to 1 to get every line<nl># higher to miss more<nl>stride = 5<nl><nl># Extract each line from the dataset and plot it on the axes<nl>for id in id_list[::stride]:<nl><tab> this_line_data = data[np.where(data['lat'] == id)]<nl><tab> lat,lon,ele = zip(*this_line_data)<nl><tab> ax.plot(lon,lat,ele, color='black')<nl><nl># set the viewpoint so we're looking straight at the longitude (x) axis<nl>ax.view_init(elev=45., azim=90)<nl><nl>ax.set_xlabel('Longitude')<nl>ax.set_ylabel('Latitude')<nl>ax.set_zlabel('Elevation')<nl>ax.set_zlim([0,1500])<nl><nl>plt.show()","out":"pythonとmatplotlibで地理データを線でプロット\/マップする。"}
{"in":"from xml.dom.minidom import parseString<nl>import json<tab><tab>  <nl>def bar(somejson, key):<nl><tab> def val(node):<nl><tab><tab>  # Searches for the next Element Node containing Value<nl><tab><tab>  e = node.nextSibling<nl><tab><tab>  while e and e.nodeType != e.ELEMENT_NODE:<nl><tab><tab><tab><tab>e = e.nextSibling<nl><tab><tab>  return (e.getElementsByTagName('string')[0].firstChild.nodeValue if e <nl><tab><tab><tab><tab><tab> else None)<nl><tab> # parse the JSON as XML<nl><tab> foo_dom = parseString(xmlrpclib.dumps((json.loads(somejson),)))<nl><tab> # and then search all the name tags which are P1's<nl><tab> # and use the val user function to get the value<nl><tab> return [val(node) for node in foo_dom.getElementsByTagName('name') <nl><tab><tab><tab><tab>if node.firstChild.nodeValue in key]<nl><nl>bar(foo, 'P1')<nl>[u'cccc', u'aaa', u'ss']<nl>bar(foo, ('P1','P2'))<nl>[u'cccc', u'cccc', u'aaa', u'ss']","out":"pythonを使用して、キーによって特定のjson値を見つけるにはどうすればよいですか？"}
{"in":"class OneFruit(object):<nl><tab> def add_color(self, color):<nl><tab><tab>  self.color = color<nl><tab> def add_taste(self, taste):<nl><tab><tab>  self.taste = taste<nl><nl>class Fruit(object):<nl><tab> def add_item(self, name):<nl><tab><tab>  setattr(self, name, OneFruit())","out":"文字列からサブクラスを作成する"}
{"in":"cursor.execute(\"create table \" + config.table + \" (\" + \", \".join(config.cols) + \")\")","out":"リストオブジェクトに存在するカラム名をテーブルに追加する方法"}
{"in":"X-CSRFToken","out":"403 FORBIDDEN ajaxを使用して投稿を送信する DJANGO"}
{"in":"__init__.py","out":"templategs \"not a valid tag library\"、モデルの読み込みに失敗する。"}
{"in":"#!\/usr\/bin\/env python<nl>from contextlib import closing<nl>from selenium.webdriver import Firefox # pip install selenium<nl>from selenium.webdriver.support.ui import WebDriverWait<nl><nl># use firefox to get page with javascript generated content<nl>with closing(Firefox()) as browser:<nl><tab>  browser.get(url)<nl><tab>  button = browser.find_element_by_name('button')<nl><tab>  button.click()<nl><tab>  # wait for the page to load<nl><tab>  WebDriverWait(browser, timeout=10).until(<nl><tab><tab><tab>lambda x: x.find_element_by_id('someId_that_must_be_on_new_page'))<nl><tab>  # store it to string variable<nl><tab>  page_source = browser.page_source<nl>print(page_source)","out":"PythonでJavascriptで生成されたページを取得する"}
{"in":"sorted(set(itertools.chain.from_iterable(sequences)))","out":"ユニークなアイテムの順序付きリストを取得するための最良の\/最もpythonicな方法"}
{"in":"class StrippedCharField(CharField):<nl><tab>  \"\"\"Newforms CharField that strips trailing and leading spaces.\"\"\"<nl><tab>  def clean(self, value):<nl><tab><tab><tab>if value is not None:<nl><tab><tab><tab><tab> value = value.strip()<nl><tab><tab><tab>return super(StrippedCharField, self).clean(value)","out":"Djangoのフォームからスペースを取り除く"}
{"in":"trie = {\"a\": {\"b\": {\"e\": {},<nl><tab><tab><tab><tab><tab><tab>  \"f\": {},<nl><tab><tab><tab><tab><tab><tab>  \"g\": {\"l\": {},<nl><tab><tab><tab><tab><tab><tab><tab><tab>  \"m\": {},<nl><tab><tab><tab><tab><tab><tab><tab><tab>  \"n\": {}}},<nl><tab><tab><tab><tab>  \"c\": {\"h\": {},<nl><tab><tab><tab><tab><tab><tab>  \"i\": {}},<nl><tab><tab><tab><tab>  \"d\": {\"j\": {},<nl><tab><tab><tab><tab><tab><tab>  \"k\": {}}}}<nl><nl>target = 'achqr'<nl>sub_trie = trie<nl>longest_sequence = []<nl>for c in target:<nl><tab> sub_trie = sub_trie.get(c)<nl><tab> if sub_trie is None:  # the letter being looked for doesn't exist after this sequence<nl><tab><tab>  break<nl><tab> longest_sequence.append(c)  # track the sequence since the trie is not reverse linked<nl>print(longest_sequence)","out":"pythonで辞書の辞書として表現されたツリーから単語を検索する方法は？"}
{"in":"wtype=np.dtype([('x',x.dtype),('y',y.dtype),('z',z.dtype)])<nl>w=np.empty(len(x),dtype=wtype)<nl>w['x']=x<nl>w['y']=y<nl>w['z']=z","out":"numpy 1次元配列を構造化配列に積み上げる。"}
{"in":"def md5(fname):<nl><tab> hash = hashlib.md5()<nl><tab> with open(fname, \"rb\") as f:<nl><tab><tab>  for chunk in iter(lambda: f.read(4096), b\"\"):<nl><tab><tab><tab><tab>hash.update(chunk)<nl><tab> return hash.hexdigest()","out":"ファイルのMD5チェックサムを生成する？"}
{"in":"import MySQLdb<nl>import os<nl>import time<nl>from stat import ST_MTIME<nl><nl>TIME_TO_SLEEP = 1<tab><tab><tab> # to avoid CPU burning<nl><nl>mydb = MySQLdb.connect(host=\"IP_add\", user=\"uname\", passwd=\"pass\", db=\"DB_name\")<nl>cursor = mydb.cursor()<nl>last_date = 0<nl>while True:<tab><tab><tab><tab><tab><tab><tab><tab># or what you want as stop condition<nl><tab> time.sleep(TIME_TO_SLEEP)<nl><tab> stat = os.stat(filename)<nl><tab> if stat[ST_MTIME] > last_date: # check the last modification date<nl><tab><tab>  last_date = stat[ST_MTIME] # if more recent, store the last date<nl><tab><tab>  with open(filename) as f:<tab># open the file<nl><tab><tab><tab><tab>sql = f.read()<tab><tab><tab># put the content in the sql data base<nl><tab><tab><tab><tab>if sql:<nl><tab><tab><tab><tab><tab> cursor.execute(sql)<nl><tab><tab><tab><tab><tab> mydb.commit()<nl><nl>mydb.close()","out":"Pythonスクリプトを実行し、1秒ごとに既知の場所に生成される新しい.txtファイルから情報を読み取る。"}
{"in":"data = {<nl><tab> 'name'<tab><tab> : 'thomas',<nl><tab> 'id'<tab><tab><tab>: 'bonjour',<nl><tab> 'city'<tab><tab> : 'cerfontaine',<nl><tab> 'auth_token' : YOUR_AUTH_TOKEN_HERE<nl>}","out":"dashing dashboardのApiキー"}
{"in":"with open('file_a','r') as fa:  # open file a --> read the files into lists<nl><tab> list_a = fa.read().splitlines()<nl>with open('file_b','r') as fb:  # open file b --> read the files into lists<nl><tab> list_b = fb.read().splitlines()<nl><nl># get element in list_b if list_a contain the element(only first 24 characters)<nl>match_list = [n for n in list_b if n[:24] in list_a]<nl><nl>with open('file_c','w+') as fc:  # write the matching list to the new file<nl><tab> fc.write('<nl>'.join(match_list))","out":"2つのテキストファイルを照合して、一致するものを見つけ、オリジナルのコンテンツに置き換えるには？"}
{"in":"import numpy as np<nl>import theano<nl>import theano.tensor as tt<nl><nl><nl>def numpy_v1(a, b):<nl><tab> ainvb = np.zeros((3, 2, 4))<nl><tab> for i in range(4):<nl><tab><tab>  ainvb[:, :, i] = a \/ b[:, i].T<nl><tab> return ainvb<nl><nl><nl>def numpy_v2(a, b):<nl><tab> return a[:, :, None] \/ b<nl><nl><nl>def compile_theano_v1():<nl><tab> a, b = tt.matrices('a', 'b')<nl><tab> return theano.function([a, b], a[:, :, None] \/ b)<nl><nl><nl>def main():<nl><tab> dt = np.dtype(np.float32)<nl><nl><tab> a = [[12, 3],<nl><tab><tab><tab>[2, 4],<nl><tab><tab><tab>[2, 4], ]<nl><nl><tab> b = [[12, 3, 2, 3],<nl><tab><tab><tab>[2, 4, 4, 5]]<nl><nl><tab> a = np.asarray(a, dtype=dt)<nl><tab> b = np.asarray(b, dtype=dt)<nl><tab> print(a.shape)<nl><tab> print(b.shape)<nl><nl><tab> theano_v1 = compile_theano_v1()<nl><nl><tab> numpy_v1_ainvb = numpy_v1(a, b)<nl><tab> numpy_v2_ainvb = numpy_v2(a, b)<nl><tab> theano_v1_ainvb = theano_v1(a, b)<nl><nl><tab> assert np.allclose(numpy_v1_ainvb, numpy_v2_ainvb)<nl><tab> assert np.allclose(numpy_v2_ainvb, theano_v1_ainvb)<nl><nl><nl>main()","out":"行列を別の行列の行で分割したもので、ループがないもの。"}
{"in":"connect(checkbox, SIGNAL(stateChanged(int)), button, SLOT(buttonStateChanged(int)));","out":"pyqtでチェックボックスがチェックされるまでボタンを無効にする方法は？"}
{"in":"if name in exons:<nl><tab> y = exons[name]<nl><tab> minDist = 99999 # large number<nl><tab> minIdx = None<nl><tab> minNum = None<nl><tab> for i, (low,high) in enumerate(y):<nl><tab><tab>  dlow = abs(low - ppos1)<nl><tab><tab>  dhigh = abs(high - ppos1)<nl><tab><tab>  dist = min(dlow, dhigh)<nl><tab><tab>  if dist < minDist:<nl><tab><tab><tab><tab>minDist = dist<nl><tab><tab><tab><tab>minIdx = i<nl><tab><tab><tab><tab>minNum = 0 if dlow < dhigh else 1<nl><tab> print(y[minIdx])<nl><tab> print(y[minIdx][minNum])","out":"ある位置から最も近い数字の集合を見つける"}
{"in":"if stateid in states:<nl><tab> print(states[stateid])","out":"dictのキーと値のマッチングがうまくいかない"}
{"in":"import re<nl>scores = [\"Bob Foo - 10 \/ 10<nl>\",<nl><tab><tab><tab> \"John Smith - 5 \/ 10<nl>\",<nl><tab><tab><tab> \"Bob Foo - 7 \/ 10<nl>\",<nl><tab><tab><tab> \"Jack T - 6 \/ 10<nl>\",<nl><tab><tab><tab> \"Jack T - 4 \/ 10<nl>\",<nl><tab><tab><tab> \"Bob Foo - 9 \/ 10<nl>\"]<nl><nl># First, split the names and scores up<nl>scores = [re.match('(\\S+ \\S+) - (\\d+)', score).groups() for score in scores]<nl>#print (scores)<nl><nl># Convert the number string into an integer<nl>scores = [[score[0], int(score[1])] for score in scores]<nl>#print (scores)<nl><nl># Create a dictionary, keyed by the name<nl>names = set(score[0] for score in scores)<nl>scores = {<nl><tab> name: [score[1] for score in scores if name == score[0]]<nl><tab> for name in names<nl>}<nl># print (scores)<nl><nl># Compute the average for each name<nl>scores = {<nl><tab> name: sum(score)\/len(score)<nl><tab> for name, score in scores.items()<nl>}<nl>print (scores)","out":"Python 3でリスト内の文字列から平均値を求める"}
{"in":"import json<tab> <nl><nl>j = \"\"\"[<nl>  {\"Event\":\"start\",\"EventDateTime\":\"2015-09-15T03:45:16.681428Z\"},<nl>  {\"Event\":\"process\",\"EventDateTime\":\"2015-09-15T03:45:16.681428Z\"},<nl>  {\"Event\":\"end\",\"EventDateTime\":\"2015-09-15T03:45:16.681428Z\"}<nl>]\"\"\"<nl><nl>j = json.loads(j)<nl>for item in j:<nl><tab> print '%s\\t%s' % (item['Event'], item['EventDateTime'])","out":"PythonでJSON配列を解析し、区切り文字列を作成する。"}
{"in":"ax2.patch.set_visible(True)","out":"matplotlibで軸を2つ並べ替えて背景を設定する方法は？"}
{"in":"from itertools import izip_longest<nl>with open(\"filea.csv\") as source1,open(\"fileb.csv\")as source2,open(\"filec.csv\",\"a\") as dest2:<nl><tab> zipped = izip_longest(source1,source2) # use izip_longest which will add None as a fillvalue where we have uneven length files<nl><tab> for line in zipped:<nl><tab><tab>  if line[1]: # if we have two lines to join<nl><tab><tab><tab><tab>dest2.write(\"{},{}<nl>\".format(line[0][:-1],line[1][:-1]))<nl><tab><tab>  else: # else we are into the longest file, just treat line as a single item tuple<nl><tab><tab><tab><tab> dest2.write(\"{}\".format(line[0]))","out":"pythonでcsvファイルを別のファイルに追記する方法"}
{"in":"for word in commonWords :<nl><tab> text = text.replace(' '+word+' ', ' ')","out":"与えられた集合から、その単語が他の単語の中に含まれていない場合に限り、出現するすべての単語を置き換える"}
{"in":"[main_list[x] for x in indexes]","out":"pythonのリストから特定のインデックスを持つアイテムを選び出す"}
{"in":"import urllib<nl>import string<nl>import random<nl>import os<nl><nl>filename_charset = string.ascii_letters + string.digits<nl>filename_length = 10<nl>file_save_dir = '\/home\/user\/download\/'<nl><nl>filename = ''.join(random.choice(filename_charset)<nl><tab><tab><tab><tab><tab><tab> for s in range(filename_length))<nl><nl>urllib.urlretrieve (\"http:\/\/www.example.com\/image.png\", <nl><tab><tab><tab><tab><tab><tab>  os.path.join(file_save_dir, filename + '.png'))","out":"python\/jangoでURLを使って画像を保存する方法"}
{"in":"def save(self, **kwargs):<nl><tab> from django.utils.text import slugify<nl><nl><tab> self.slug = slugify(self.user.username)<nl><tab> super(UserProfile, self).save()","out":"ユーザーからスラッグフィールドを生成"}
{"in":"import json<nl>import re<nl><nl>def parse(v):<nl><tab> # Remove newlines and replace \"=\" with \":\"<nl><tab> v1 =  v.replace('=', ':').replace(\"<nl>\", \"\")<nl><tab> # Enclose strings in double quotes<nl><tab> v2 = re.sub(r'(\\d*[a-zA-Z][a-zA-Z0-9]*)', r'\"\\g<1>\"', v1)<nl><tab> # If you want booleans<nl><tab> v3 = re.sub(r'\"(true|false)\"', r'\\g<1>', v2)<nl><tab> # Create lists<nl><tab> return json.loads(re.sub(r\"{([^:]+)}\", r'[\\g<1>]', v3))","out":"擬似Json文字列をPythonオブジェクトに変換する。"}
{"in":"values = [None]*1000","out":"Pythonで定義済みの長さを持つリストを定義する方法"}
{"in":"def application(env, start_response):<nl><tab> start_response('200 OK', [('Content-Type','text\/html')])<nl><tab> return \"Hello World\"","out":"nginxとuWSGIはPythonで認証データを取得する。"}
{"in":"from django.db.models import CharField<nl>from django.db.models import  Q<nl><nl>fields = [f for f in table._meta.fields if isinstance(f, CharField)]<nl>queries = [Q(**{f.name: SEARCH_TERM}) for f in fields]<nl><nl>qs = Q()<nl>for query in queries:<nl><tab> qs = qs | query<nl><nl>table.objects.filter(qs)","out":"djangoでテーブルの全フィールドを検索する。"}
{"in":"instancemodelname = ContentType.objects.get(app_label=\"myappname\", model=\"mymodelname\")<nl>b = instancemodelname.model_class()(account_username='testtestest')<nl>b.save()","out":"Django \/ Python, データベースの保存機能を再利用可能にする（modelnameとappnameを文字列から受け取るようにする）, contenttypesまたは他の方法を使用して？"}
{"in":"count = 0<nl>for item in items:<nl><tab> if item == 'Boston Americans':<nl><tab><tab>  count += 1<nl>print count","out":"リスト内の出現回数をカウントする別の方法"}
{"in":"from django.db.models import Q<nl>from django.db.models.query import QuerySet<nl>import operator<nl><nl>def django_admin_keyword_search(model, keywords, search_fields):<nl><tab> \"\"\"Search according to fields defined in Admin's search_fields\"\"\"<nl><tab> all_queries = None<nl><nl><tab> for keyword in keywords.split(' '):  #breaks query_string into 'Foo' and 'Bar'<nl><tab><tab>  keyword_query = None<nl><nl><tab><tab>  for field in search_fields:<nl><tab><tab><tab><tab>each_query = Q(**{field+'__icontains':keyword})<nl><nl><tab><tab><tab><tab>if not keyword_query:<nl><tab><tab><tab><tab><tab> keyword_query = each_query<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> keyword_query = keyword_query | each_query<nl><nl><tab><tab>  if not all_queries:<nl><tab><tab><tab><tab>all_queries = keyword_query<nl><tab><tab>  else:<nl><tab><tab><tab><tab>all_queries = all_queries & keyword_query<nl><nl><tab> result_set = model.objects.filter(all_queries).distinct()<nl><nl><tab> return result_set","out":"Django Adminの検索エンジンを自分なりの見解で使う"}
{"in":"dir = 'C:\\Users\\Shankar\\Documents\\Other'<nl>if os.path.exists(dir):<nl><tab> shutil.rmtree(dir)<nl>os.makedirs(dir)","out":"Python - 既に存在するフォルダを上書きする。"}
{"in":"f = open('workfile', 'r')<nl>for num,line in enumerate(f):<nl><tab> print(num+\" \"+line)","out":"pythonで文字列に行番号を付加する。"}
{"in":"nreceive = True#nreceive = Not Received<nl>ticks = 0<nl>f = None<nl>while nreceive and ticks < 101:#try to get the info 100 times or until it's received<nl><tab> ticks+=1<nl><tab> try:<nl><tab><tab>  f = mysocket.makefile('rb')<nl><tab><tab>  if not f == None:<nl><tab><tab><tab><tab>nreceive = False<nl><tab> except:<nl><tab><tab>  pass<nl>data = f.read(1024)","out":"Pythonでクライアントがデータを受け取らない"}
{"in":"session['user_id']","out":"ピラミッドログインユーザー"}
{"in":"from sqlalchemy.sql.expression import bindparam<nl>stmt = addresses.update().\\<nl><tab> where(addresses.c.id == bindparam('_id')).\\<nl><tab> values({<nl><tab><tab>  'user_id': bindparam('user_id'),<nl><tab><tab>  'email_address': bindparam('email_address'),<nl><tab> })<nl><nl>conn.execute(stmt, [<nl><tab> {'user_id': 1, 'email_address' : 'jack@yahoo.com', '_id':1},<nl><tab> {'user_id': 1, 'email_address' : 'jack@msn.com', '_id':2},<nl><tab> {'user_id': 2, 'email_address' : 'www@www.org', '_id':3},<nl><tab> {'user_id': 2, 'email_address' : 'wendy@aol.com', '_id':4},<nl>])","out":"SQLAlchemy CoreでWHEREを使って一括更新する。"}
{"in":"keys_list = map(str, keys_list)<nl># or keys_list = [str(key) for key in keys_list]","out":"Pythonです：jsonから生成されたkeysリストからuを取り除く"}
{"in":"import pygame, sys<nl>from pygame.locals import *<nl><nl>SCREEN_X=400<nl>SCREEN_Y=400<nl>#Screen size<nl><nl>SPRT_RECT_X=0  <nl>SPRT_RECT_Y=0<nl>#This is where the sprite is found on the sheet<nl><nl>LEN_SPRT_X=100<nl>LEN_SPRT_Y=100<nl>#This is the length of the sprite<nl><nl>screen = pygame.display.set_mode((SCREEN_X, SCREEN_Y)) #Create the screen<nl>sheet = pygame.image.load('C:\\YOURFILE') #Load the sheet<nl><nl>sheet.set_clip(pygame.Rect(SPRT_RECT_X, SPRT_RECT_Y, LEN_SPRT_X, LEN_SPRT_Y)) #Locate the sprite you want<nl>draw_me = sheet.subsurface(sheet.get_clip()) #Extract the sprite you want<nl><nl>backdrop = pygame.Rect(0, 0, SCREEN_X, SCREEN_Y) #Create the whole screen so you can draw on it<nl><nl>screen.blit(draw_me,backdrop) #'Blit' on the backdrop<nl>pygame.display.flip()<nl>#Draw the sprite on the screen","out":"pythonでスプライトシートからスプライトイメージを選択する方法は？"}
{"in":"def pairwise(iterable):<nl><tab> it = iter(iterable)<nl><tab> last = next(it)+next(it)<nl><tab> for curr in it:<nl><tab><tab>  yield last, curr<nl><tab><tab>  last = last[1]+curr<nl><nl><nl>def valid_pair((last, curr)):<nl><tab> return last[0] in valid and last[1] in valid and curr in valid","out":"後続の文字の3連のカウンターを作成"}
{"in":"# -*- coding: utf-8 -*-<nl>\"\"\"<nl>Description of example<nl>\"\"\"<nl><nl>import pyqtgraph as pg<nl>from pyqtgraph.Qt import QtCore, QtGui<nl>import numpy as np<nl><nl>pg.mkQApp()<nl><nl>axis = pg.DateAxisItem(orientation='bottom')<nl>pw = pg.PlotWidget(axisItems={'bottom': axis})<nl>pw.setWindowTitle('pyqtgraph example: DateTimeAxis')<nl>pw.show()<nl>pw.setXRange(1383960000, 1384020000) <nl><nl>## Start Qt event loop unless running in interactive mode or using pyside.<nl>if __name__ == '__main__':<nl><tab> import sys<nl><tab> if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):<nl><tab><tab>  QtGui.QApplication.instance().exe","out":"DateAxisItemにブランチからアクセスする方法"}
{"in":"def gen_alphaLabels(donotInclude):<nl><tab> for i in range(65,91):<nl><tab><tab>  char = chr(i)<nl><tab><tab>  if char not in donotInclude:<nl><tab><tab><tab><tab>yield char","out":"ジェネレーター関数の値をスキップする"}
{"in":"text = 'abcdefa'<nl>pattern = re.compile('a|c')<nl>[(m.group(), m.start()) for m in pattern.finditer(text)]","out":"Pythonで文字位置のリストを取得する方法は？"}
{"in":"file = str(QFileDialog.getExistingDirectory(self, \"Select Directory\"))","out":"Pyqtでディレクトリダイアログを表示させる方法"}
{"in":"re.sub(\"\\((\\w*) (\\w*)\\)\", r\"\\1\", t)","out":"正規表現で木の葉を削除する(Python)"}
{"in":"values, vectors = scipy.sparse.linalg.eigs(P, k=1, sigma=1)","out":"行列の特定の固有値に対応する固有ベクトルを調べるにはどうすればよいですか？"}
{"in":"from collections import defaultdict<nl><nl>words = \"apple banana apple strawberry banana lemon\"<nl><nl>d = defaultdict(int)<nl>for word in words.split():<nl><tab> d[word] += 1","out":"pythonでアイテム頻度カウント"}
{"in":"from netCDF4 import Dataset<nl><nl># a dictionary of lists that hold all the datasets from a given day<nl>grouped_datasets = {}<nl><nl>for f in listdir(path):<nl><tab> if isfile(join(path,f)):<nl><tab><tab>  full_path = join(path,f)<nl><tab><tab>  f = Dataset(full_path, 'r')<nl><tab><tab>  basetime = f.variables['base_time'][:]<nl><tab><tab>  altitude = f.variables['alt'][:]<nl><tab><tab>  temp = f.variables['tdry'][:]<nl><tab><tab>  actual_date =  strftime(\"%Y-%m-%d %H:%M:%S\", gmtime(basetime))<nl><tab><tab>  measurement_day =  strftime(\"%Y-%m-%d\", gmtime(basetime))<nl><nl><tab><tab>  # if we haven't encountered any datasets from this day yet...<nl><tab><tab>  if measurement_day not in grouped_datasets:<nl><tab><tab><tab><tab># add that day to our dict<nl><tab><tab><tab><tab>grouped_datasets[measurement_day] = []<nl><nl><tab><tab>  # now append our dataset to the correct day (list)<nl><tab><tab>  grouped_datasets[measurement_day].append(f)","out":"日替わりでファイル群をまとめる"}
{"in":"def limitSizeDay(*args):<nl><tab> value = dayValue.get();<nl><tab> if len(value) > 2: dayValue.set(value[:2]);<nl><nl>dayValue = StringVar();<nl>dayValue.trace('w', limitSizeDay);<nl><nl>day_entry1=Entry(List1, bg=\"#282B2B\", fg=\"white\", width=2, textvariable=dayValue);<nl>day_entry1.place(x=77, y=58);","out":"(Python)入力欄を最大2文字に制限する方法"}
{"in":"__import__(attackerControlledString)","out":"設定ファイルからshell\/pythonコマンドを注入することは可能でしょうか？"}
{"in":"g = Github(token)<nl>user = g.get_user()<nl>repo = user.create_repo(full_name)","out":"PyGithubで新しいリポジトリを作成する方法"}
{"in":"for i in range(len(table_data)):<nl>  for j in range(len(table_data[i])):<nl><tab> table_data[i][j] = len(table_data[i][j])","out":"文字列の値のリストを、その文字列の長さを表す整数のリストに変換する"}
{"in":"import os<nl>from os.path import join, isdir, islink, isfile<nl><nl>def mywalk(top, topdown=True, onerror=None, ignore_list=('.ignore',)):<nl><tab> try:<nl><tab><tab>  # Note that listdir and error are globals in this module due<nl><tab><tab>  # to earlier import-*.<nl><tab><tab>  names = os.listdir(top)<nl><tab> except Exception, err:<nl><tab><tab>  if onerror is not None:<nl><tab><tab><tab><tab>onerror(err)<nl><tab><tab>  return<nl><tab> if len([1 for x in names if x in ignore_list]):<nl><tab><tab>  return <nl><tab> dirs, nondirs = [], []<nl><tab> for name in names:<nl><tab><tab>  if isdir(join(top, name)):<nl><tab><tab><tab><tab>dirs.append(name)<nl><tab><tab>  else:<nl><tab><tab><tab><tab>nondirs.append(name)<nl><nl><tab> if topdown:<nl><tab><tab>  yield top, dirs, nondirs<nl><tab> for name in dirs:<nl><tab><tab>  path = join(top, name)<nl><tab><tab>  if not islink(path): <nl><tab><tab><tab><tab>for x in mywalk(path, topdown, onerror, ignore_list):<nl><tab><tab><tab><tab><tab> yield x<nl><tab> if not topdown:<nl><tab><tab>  yield top, dirs, nondirs","out":"ディレクトリを無視できるPythonウォーカー"}
{"in":"g = df.groupby(\"ID\")<nl>s = g[\"Based on\"].apply(lambda group: group.values)<nl>s.to_frame()","out":"Python Pandasによるオブジェクトdtypesのgroupby割り当て"}
{"in":"class Track:<nl><tab> def __init__(self, artist, title, album=None):<nl><tab><tab>  self._artist = str(artist)<nl><tab><tab>  self._title = str(title)<nl><tab><tab>  self._album = album<nl><nl><tab> def __str__(self):<nl><tab><tab>  return self.artist + \" \" + self.title + \" \" + self.album<nl><tab> #example for artist<nl><tab> @property<nl><tab> def artist(self):<nl><tab><tab>  return self._artist<nl><tab> @artist.setter<nl><tab> def artist(self, artist):<nl><tab><tab>  if artist != type(\"string\"):#ensure that value is of string type.<nl><tab><tab><tab><tab>raise ValueError<nl><tab><tab>  else:<nl><tab><tab><tab><tab>self._artist = artist<nl><tab> #this way you could properly make setters and getter for your attributes<nl><tab> #same ofr the other stuff<nl><nl>Track = Track(\"Andy\", \"Me\", \"Self named\")","out":"pythonでオブジェクトと文字列を使ったクラスを定義する"}
{"in":"n=int(raw_input('n='))<nl>for i in range(1,n+1):<nl><tab> for j in range(1,n+1):<nl><tab><tab>  if j==1 or j==n or j==i:<nl><tab><tab><tab><tab>print'#',<nl><tab><tab>  else:<nl><tab><tab><tab><tab>print' ',<nl><nl><tab> print","out":"Python言語で次のパターンを表示します。"}
{"in":"small_list_set = set(small_list)<nl>for line in big_list:<nl><tab> for item in line:<nl><tab><tab>  if item in small_list_set:<nl><tab><tab><tab><tab>bucket.append(line)","out":"2つの非常に大きなリストの重なりを見つけるための最速アルゴリズム？"}
{"in":"string = 'strings'<nl><nl>new_D = {'r': 1, 's': 1, 't': 1, 'r' : 3, 'i' : 4 }<nl><nl>sum_of_chars = 0<nl>for character in string:<nl><tab> if character in new_D:<nl><tab><tab>  sum_of_chars += new_D[character]<nl><tab> else:<nl><tab><tab>  sum_of_chars += 1 # Default?<nl><nl>print(sum_of_chars)","out":"Pythonで辞書のキーに一致する文字列インデックスごとに値を取得する方法"}
{"in":"pylab.get_backend()","out":"pythonでmatplotlibのグラフを対話的に表示する"}
{"in":"def test_overlap(dt1_st, dt1_end, dt2_st, dt2_end):<nl><tab> return not (dt1_st < dt2_end and dt1_end >dt2_st)","out":"N組のリストで日付が重なっているかどうかを調べる"}
{"in":"xlrd.xldate.xldate_from_date_tuple","out":"xlrdを使用してPythonの日付からExcelの日付に変換する方法（属性 xlrd.xldate_from_date_tuple は存在しません。）"}
{"in":"x['C'] = x['B'].replace(to_replace=r'\\b'+x['A']+r'\\b', value='',regex=True)","out":"他のカラムに出現する単語を削除する、パンダ"}
{"in":"import urllib3<nl>c = urllib3.HTTPSConnectionPool('10.0.3.168', port=9001, cert_reqs='CERT_NONE',<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  assert_hostname=False)<nl>c.request('GET', '\/')","out":"urllib3での証明書検証を無視する。"}
{"in":"Content-Type","out":"Python3でJSONデータを誤操作するボトル、Python2にはないボトル"}
{"in":"def puzzle(s,a,b):<nl><tab> if a*b != len(s):<nl><tab><tab> print \"Not possible\"<nl><tab><tab> return<nl><tab> start =0<nl><tab> end = b+1<nl><tab> output =\"\"<nl><tab> for i in range(0,a):<nl><tab><tab>  output= output+s[start: end]+\"<nl>\"<nl><tab><tab>  start = end+1<nl><tab><tab>  end = end+b<nl><tab> print output","out":"Python 3で文字列を一定間隔で分割する方法"}
{"in":"return render_to_response('base_index.html', locals(), csrfContext)","out":"csrfContextでの変数の受け渡しについて教えてください。"}
{"in":"name = input(\"Insert the name you want to delete: \")<nl># let's strip excessive whitespace and change to lower case:<nl>name = name.strip().lower()<nl>book = \"data.txt\"<nl><nl># use 'with' construct to ensure that file is closed after use:<nl>with open(book, 'r') as f: <nl><tab> lines = f.read().splitlines()<nl><nl>filtered = []<nl>for line in lines:<nl><tab> try: # guard against incorrect record, e.g. 'Guido, 1956'<nl><tab><tab>  name_, sex, year = line.split(',')<nl><tab> except ValueError:<nl><tab><tab>  print(\"cannot unpack this line:\", line)<nl><tab><tab>  continue<nl><tab> if name == name_.strip().lower():<nl><tab><tab>  continue # we don't want this line, so we skip it<nl><tab> filtered.append(line) # line is ok, we keep it<nl><nl># join list of lines into one string and write to the file:<nl>with open(book, 'w') as f:<nl><tab> f.write('<nl>'.join(filtered))","out":"ファイル中の文字列のリストから特定の文字列を削除する python"}
{"in":"re.sub(r'<p>(?=[A-Z]{2,})','<i>',MyText)","out":"re.sub (python)マッチした文字列の一部を置換する。"}
{"in":"if self.isCellEditControlShown:<nl><tab> # _active_row and _active_col are set in the event handler...<nl><tab> cellEditor = self.GetCellEditor(self._active_row, self._active_col)<nl><tab> textControl = cellEditor.GetControl()<nl><tab> textControl.Paste()","out":"wxPython: グリッドセルにペーストを実装する方法は？"}
{"in":"import time, Image<nl><nl>import cv2<nl>from livestreamer import Livestreamer<nl><nl># change to a stream that is actually online<nl>livestreamer = Livestreamer()<nl>plugin = livestreamer.resolve_url(\"http:\/\/twitch.tv\/flosd\")<nl>streams = plugin.get_streams()<nl>stream = streams['mobile_High']<nl><nl># download enough data to make sure the first frame is there<nl>fd = stream.open()<nl>data = ''<nl>while len(data) < 3e5:<nl><tab> data += fd.read()<nl><tab> time.sleep(0.1)<nl>fd.close()<nl><nl>fname = 'stream.bin'<nl>open(fname, 'wb').write(data)<nl>capture = cv2.VideoCapture(fname)<nl>imgdata = capture.read()[1]<nl>imgdata = imgdata[...,::-1] # BGR -> RGB<nl>img = Image.fromarray(imgdata)<nl>img.save('frame.png')<nl># img.show()","out":"twitch.tvストリームの最初のフレームをダウンロードする。"}
{"in":"cipher = {}<nl>for f in open('mapping.txt'):<nl>  org, cip = f.split()<nl>  cipher[ord(org)] = cip<nl><nl><nl>inpt = input('Enter string: ')<nl><nl>inpt = inpt.translate(cipher)<nl>print('Message: ' + inpt)","out":"txtファイルの情報で文字列を暗号化する方法は？"}
{"in":"if condition:<nl><tab> return redirect('\/dashboard\/')<nl>else:<nl><tab> return super(UserFormView, self).get(request)","out":"Djangoです：FormView：初期ロジックを追加する方法は？"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl><nl>shifts = np.linspace(1, 50, 25)[:, np.newaxis]<nl>x = np.arange(50)[np.newaxis, :]<nl>data = np.exp(-(x - shifts)**2 \/ 50) * shifts<nl><nl>fig, (ax1, ax2) = plt.subplots(2, 1)<nl><nl>im1 = ax1.imshow(data, interpolation='none', cmap='viridis')<nl>fig.colorbar(im1, ax=ax1, label='raw values')<nl><nl>norm_data = (data - np.min(data, axis=1)[:, np.newaxis]) \/ np.ptp(data, axis=1)[:, np.newaxis]<nl>im2 = ax2.imshow(norm_data, interpolation='none', cmap='viridis')<nl>fig.colorbar(im2, ax=ax2, label='normalized by row')","out":"Matplotlibの \"imshow \"を使って、ヒーマップの値を行方向にスケーリングする方法は？"}
{"in":"#!\/usr\/bin\/env python<nl>import wx<nl>class MyFrame(wx.Frame):<nl><tab> def __init__(self, parent, ID, title):<nl><tab><tab>  wx.Frame.__init__(self, parent, ID, title, wx.DefaultPosition)<nl><tab><tab>  Buttons = []<nl><tab><tab>  Buttons.append(wx.Button(self,-1, \"Approve Location\"))<nl><tab><tab>  Buttons.append(wx.Button(self,-1, \"Approve Item\"))<nl><tab><tab>  Buttons.append(wx.Button(self,-1, \"Change Qty\"))<nl><tab><tab>  Buttons.append(wx.Button(self,-1, \"Approve\"))<nl><tab><tab>  sizer = wx.GridBagSizer(5,3)<nl><tab><tab>  sizer.Add(Buttons[0], (0, 5), (1,1), wx.EXPAND)<nl><tab><tab>  sizer.Add(Buttons[1], (1, 4), (1,1), wx.EXPAND)<nl><tab><tab>  sizer.Add(Buttons[2], (1, 5), (1,1), wx.EXPAND)<nl><tab><tab>  sizer.Add(Buttons[3], (2, 5), (1,1), wx.EXPAND)<nl><tab><tab>  self.SetSizerAndFit(sizer)<nl><tab><tab>  self.Centre()<nl>class MyApp(wx.App):<nl><tab> def OnInit(self):<nl><tab><tab>  frame = MyFrame(None, -1, \"Gridbagsizer\")<nl><tab><tab>  frame.Show(True)<nl><tab><tab>  self.SetTopWindow(frame)<nl><tab><tab>  return True<nl>if __name__ == \"__main__\":<nl><tab> app = MyApp(0)<nl><tab> app.MainLoop()","out":"wxpythonのオブジェクトの配置について"}
{"in":"import sys<nl>from PyQt5.QtGui import *<nl>from PyQt5.QtWidgets import *<nl>from PyQt5.QtCore import *<nl><nl>class Window(QWidget):<nl><tab> def __init__(self, *args, **kwargs):<nl><tab><tab>  QWidget.__init__(self, *args, **kwargs)<nl><nl><tab><tab>  self.label = QLabel(\"Test\", self)<nl><tab><tab>  self.label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)<nl><tab><tab>  self.label.setAlignment(Qt.AlignCenter)<nl><tab><tab>  self.label.setStyleSheet(\"QLabel {background-color: red;}\")<nl><nl><tab><tab>  self.button = QPushButton(\"Test\", self)<nl><nl><tab><tab>  self.layout = QGridLayout()<nl><tab><tab>  self.layout.addWidget(self.label, 0, 0)<nl><tab><tab>  self.layout.addWidget(self.button, 0, 1)<nl><nl><tab><tab>  self.setLayout(self.layout)<nl><tab><tab>  self.show()<nl><nl>app = QApplication(sys.argv)<nl>win = Window()<nl>sys.exit(app.exec_())","out":"PyQt5: ラベルを中央揃えする"}
{"in":"input_file=\"input_{0}.in\".format(case)<nl><nl>os.system=(\".\/a.out {0}\".format(input_file))","out":"Pythonで入力ファイルを使ったスクリプトの実行"}
{"in":"input = open(\"sparse.csv\").read().split() # split by newlines and spaces<nl>i = iter(input)<nl>for date in i:<nl><tab> if date != \"nan\":<nl><tab><tab>  value = i.next()<nl><tab><tab>  # process pairs","out":"スパースなcsvファイルをpandasに読み込む"}
{"in":"import cv<nl>resim = cv.LoadImage('image.jpg')<nl>capture = cv.CaptureFromFile('video.avi')<nl>while(1):<nl><tab> frame = cv.QueryFrame(capture)<nl><tab> cv.SetImageROI(frame,(100,100,resim.width,resim.height))<nl><tab> cv.Add(frame,resim,frame)<nl><tab> cv.ResetImageROI(frame)<nl><tab> cv.ShowImage('frame',frame)<nl><tab> if cv.WaitKey(33)==27:<nl><tab><tab>  break","out":"写真と動画を合成する"}
{"in":"en-ner-person.bin","out":"javaでテキストからEntityの名前を見つける方法"}
{"in":"import cPickle<nl># save the classifier<nl>with open('my_dumped_classifier.pkl', 'wb') as fid:<nl><tab> cPickle.dump(gnb, fid)<tab> <nl><nl># load it again<nl>with open('my_dumped_classifier.pkl', 'rb') as fid:<nl><tab> gnb_loaded = cPickle.load(fid)","out":"scikit-learnで分類器をディスクに保存する。"}
{"in":"class MARGINS(ctypes.Structure):<nl>  _fields_ = [(\"cxLeftWidth\", c_int),<nl><tab><tab><tab><tab>  (\"cxRightWidth\", c_int),<nl><tab><tab><tab><tab>  (\"cyTopHeight\", c_int),<nl><tab><tab><tab><tab>  (\"cyBottomHeight\", c_int)<nl><tab><tab><tab><tab> ]<nl>margins = MARGINS(1, 2, 1, 1)<nl><nl>dwm.DwmExtendFrameIntoClientArea(handel, ctypes.byref(margins))","out":"Windows 7 PythonでMARGINS構造。"}
{"in":"find_elements_by_xpath('\/\/div[@class=\"myclass\"]\/a').get_attribute(\"content\")","out":"Seleniumを使用して、別のタグの中にあるカスタムタグを見つける方法"}
{"in":"pygame.draw.polygon(screen, black, [[300,400],[150,100],[450,300]],6)","out":"pythonで多角形を描くにはどうしたらいいですか？"}
{"in":"re.sub(\"(?<=[^a-zA-Z])pi(?=[^a-zA-Z])\", \"(math.pi)\", \"2pi3 + supirse\")","out":"Pythonでre.subマッチの一部のみを置換する。"}
{"in":"intlist = range(1,10)<nl>randomeven = random.choice([i for i in intlist if i % 2 == 0])","out":"述語を満たすランダムな値を選択する pythonic な方法。"}
{"in":"toolzip = zipfile.ZipFile(myzipfile,  'r')<nl>names = toolzip.namelist()<nl>for n in names:<nl><tab> data = toolzip.read(n)<nl><tab> # do something with data","out":"WindowsでPythonを使って禁断のファイル名を含むZIPアーカイブを展開するにはどうすればよいですか？"}
{"in":"class Test(object):<nl><tab> def __new__(*args):<nl><tab><tab>  return False","out":"pythonのオブジェクトを変数に設定する"}
{"in":"BMesh.calc_volume","out":"Pythonです：多面体を作成し、その断面を取得する"}
{"in":"import networkx as nx<nl># weighted MultiGraph<nl>M = nx.MultiGraph()<nl>M.add_edge(1,2,weight=7)<nl>M.add_edge(1,2,weight=19)<nl>M.add_edge(2,3,weight=42)<nl><nl># create weighted graph from M<nl>G = nx.Graph()<nl>for u,v,data in M.edges_iter(data=True):<nl><tab> w = data['weight']<nl><tab> if G.has_edge(u,v):<nl><tab><tab>  G[u][v]['weight'] += w<nl><tab> else:<nl><tab><tab>  G.add_edge(u, v, weight=w)<nl><nl>print G.edges(data=True)<nl># [(1, 2, {'weight': 26}), (2, 3, {'weight': 42})]","out":"Networkx : マルチグラフを重み付きエッジを持つ単純なグラフに変換する"}
{"in":"jpeg.read(2)<nl>b = jpeg.read(1)<nl>try:<nl><tab> while (b and ord(b) != 0xDA):<nl><tab><tab>  while (ord(b) != 0xFF): b = jpeg.read(1)<nl><tab><tab>  while (ord(b) == 0xFF): b = jpeg.read(1)<nl><tab><tab>  if (ord(b) >= 0xC0 and ord(b) <= 0xC3):<nl><tab><tab><tab><tab>jpeg.read(3)<nl><tab><tab><tab><tab>h, w = struct.unpack(\">HH\", jpeg.read(4))<nl><tab><tab><tab><tab>break<nl><tab><tab>  else:<nl><tab><tab><tab><tab>jpeg.read(int(struct.unpack(\">H\", jpeg.read(2))[0])-2)<nl><tab><tab>  b = jpeg.read(1)<nl><tab> width = int(w)<nl><tab> height = int(h)<nl>except struct.error:<nl><tab> pass<nl>except ValueError:<nl><tab> pass","out":"Python3 - jpegの次元情報を解析する。"}
{"in":"# calcuate normalization factor<nl>factor = 1.0 \/ sum(in_degree_dist.itervalues())<nl><nl># sort the dictionary<nl>sorted_in_degree_dist = OrderedDict((key, in_degree_dist[key] * factor)<nl><tab> for key in sorted(in_degree_dist))<nl><nl># or <nl>sorted_in_degree_dist = OrderedDict((key, value * factor)<nl><tab> for key, value in sorted(in_degree_dist.iteritems()))","out":"pythonで辞書の並べ替えと和訳をする"}
{"in":"l.set_option(ldap.OPT_HOST_NAME, settings.AD_DNS_NAME)","out":"UWSGIは、基礎となるDjangoアプリからのLDAPSリクエストに影響を与えますか？"}
{"in":"names = []<nl>values = []<nl>data = []<nl>with open('yourfile') as lines:<nl><tab> for line in lines:<nl><tab><tab>  first, rest = line.split(' ', 1)<nl><nl><tab><tab>  if first == 'name':<nl><tab><tab><tab><tab>names.append(rest)<nl><nl><tab><tab>  elif first == 'values':<nl><tab><tab><tab><tab>floats = map(float, rest.split())<nl><tab><tab><tab><tab>values.append(tuple(floats))<nl><nl><tab><tab>  elif first == 'data':<nl><tab><tab><tab><tab>int_str, floats_str = rest.split(' ', 1)<nl><tab><tab><tab><tab>floats = map(float, floats_str.split())<nl><tab><tab><tab><tab>data.append( (int(int_str),) + tuple(floats) )","out":"pythonでファイルから異なる配列にデータを読み込む"}
{"in":"# List files in directory and upload them to bucket<nl>for filename in all_files:<nl><tab> #skip all directory entries which are not a file<nl><tab> if not os.path.isfile(filename):<nl><tab><tab><tab> continue<tab> <nl><tab> k = Key(bucket)<nl><tab> k.key = os.path.basename(filename)<nl><tab> k.set_contents_from_filename(filename, cb=percent_cb, num_cb=10)","out":"ファイル名からパスを取り除く"}
{"in":"x = [[a, b, c], [d, e, f], [g, h, i]]<nl>itertools.product(*x)","out":"長さの異なる引数のリストを渡す"}
{"in":"for x in doclist:<nl><tab> if x == '[':<nl><tab><tab>  count=count+1<nl><tab> elif count == 1:<nl><tab><tab>  response=raw_input(\"Please enter %s\" % x)<nl><tab><tab>  count=count-1<nl><tab> else:<nl><tab><tab>  pass","out":"forループの生入力"}
{"in":"def listfiles(directory):<nl><tab> return [f for f in os.listdir(directory) <nl><tab><tab><tab><tab>  if os.path.isdir(os.path.join(directory, f))]","out":"Pythonで、ディレクトリ内のファイルではなく、すべてのディレクトリを取得する方法はありますか？"}
{"in":"d1 = mysql.connect(database1)<nl>d2 = mysql.connect(database2)<nl><nl>with d2 as c2: # new transaction<nl><tab> c2.execute(\"SELECT f1, f2, f3 FROM table\")<nl><tab> with d1 as c1:<nl><tab><tab>  c1.executemany(\"INSERT INTO table (f1, f2, f3) VALUES (%s, %s, %s)\", c2)","out":"既存のデータベースに、すでに存在するデータに影響を与えることなく、データを追加する方法は？"}
{"in":"before = ['JACKIE:34', 'MATT:444', 'CEN:12', 'PETE:12', 'RANDY:92', 'MITCH:2', 'JAN:2']<nl>after = [(name, int(value)) for name, value in (x.split(':') for x in before)]<nl>print after","out":"Python リストからタプルへの変換"}
{"in":"# Using extended slice notation to reverse the string<nl>if str(n) == str(n)[::-1]:<nl><tab> print \"Palindrome!\"","out":"回文作成プログラム"}
{"in":"response.xpath('\/\/li[@class=listclass\"]\/div[not(contains(@class,\"divclass\"))]\/text()').extract()","out":"Scrapy: divのリストからdivを解析する。"}
{"in":"class AlgoMixin(object):<nl>  # Does not end in \"Test\"; not a subclass of unittest.TestCase.<nl>  # You may prefer \"AbstractBase\" or something else.<nl><nl>  def test_empty(self):<nl><tab> result = self.function(make_empty_graph())<nl><tab> self.assertTrue(result)<nl><nl>class TestF(AlgoMixin, unittest.TestCase):<nl>  function = staticmethod(f)<nl>  # Doesn't need to be in setup, nor be an instance attribute.<nl>  # But doesn't take either self or class parameter, so use staticmethod.<nl><nl>  def test_random(self):<nl><tab> pass  # Specific test for algorithm 'f'.","out":"nosetestsでpythonのテストケースを因数分解する方法"}
{"in":"import zipfile<nl><nl>fh = open(targetzip, 'rb')<nl>z = zipfile.ZipFile(fh)<nl>for name in z.namelist():<nl><tab> z.extract(name, extractto)<nl>fh.close()","out":"ZIPファイルを解凍する簡単なスクリプト"}
{"in":"branches = [ref for ref in repo.refs.keys(\"refs\/heads\/\") if<nl><tab><tab><tab><tab>any((True for commit in repo.get_walker(include=[repo.refs[ref]])<nl><tab><tab><tab><tab><tab>  if commit.id == YOURSHA))]","out":"Python dulwichを使って、特定のgitコミットshaがどのブランチに含まれているかをチェックする？"}
{"in":"test = props.find('S\/[@N=\"SamAccountName\"]')","out":"Python ETREEによるwindows XML出力のパージング"}
{"in":"def isAnagram(str1, str2):<nl><tab> str1_list = list(str1)<nl><tab> str1_list.sort()<nl><tab> str2_list = list(str2)<nl><tab> str2_list.sort()<nl><nl><tab> return (str1_list == str2_list)","out":"単語のリストに対してアナグラムを検索する"}
{"in":"if (<nl><tab> (\"this phrase\" in textfile or \"that phrase\" in textfile) and not (<nl><tab> \"not this phrase\" in textfile or \"not that phrase\" in textfile)<nl>):<nl><tab> return True","out":"pythonでテキストファイルに特定の文字列があるかどうかをチェックする"}
{"in":"import collections<nl>import itertools<nl><nl>d = collections.defaultdict(list)<nl>for indices in itertools.product(*map(range, a.shape)):<nl><tab> d[a[indices]].append(indices)","out":"Pythonです：numpyの配列の要素にインデックスを付けるには？"}
{"in":"from scipy.signal import argrelmax<nl>f = xf[scipy.signal.argrelmax(yf[0:N\/2])]<nl>Af = np.abs(yf[argrelmax(yf[0:N\/2])])","out":"pythonを使ったFFT係数について"}
{"in":"A.objects.filter(name='abc').prefetch_related('ab_set')","out":"多対多フィールドを持たない多対多テーブルに関連するプリフェッチを使用する。"}
{"in":"date_str = '2014-06-18 13:06:00.349565827'<nl><nl># split off the seconds & microseconds<nl>beginning, sec = date_str.rsplit(':', 1) <nl><nl># Use string formatting to recreate a rounded timestamp<nl>date = dateutil.parser.parse('{}:{:02.6f}'.format(beginning, float(sec)))","out":"PythonでTimestampをNSとTruncateで丸めるようにする"}
{"in":"import csv<nl><nl>f1 = file('C:\\File1.csv', 'rb')<nl>f2 = file('C:File2.csv', 'rb')<nl>f3 = file('C:\\output_file.csv', 'wb')<nl>c1 = csv.reader(f1)<nl>c2 = csv.reader(f2)<nl>c3 = csv.writer(f3)<nl>masterlist = [row[0] for row in c2]<nl><nl>for hosts_row in c1:<nl><tab> if hosts_row[0] not in masterlist:<nl><tab><tab>  print hosts_row<nl><tab><tab>  c3.writerow(hosts_row)","out":"2つのCSVを比較し、欠損値（異なる行）をファイルに書き出す python"}
{"in":"import math<nl>import csv<nl><nl>x = 2.0<nl>with open('out.csv', 'wb') as f:<nl><tab> writer = csv.writer(f, delimiter=',')<nl><tab> while x < 100.0:<nl><tab><tab>  print x, '\\t', math.log(x)\/math.log(2)<nl><tab><tab>  writer.writerow([x, math.log(x)\/math.log(2)])<nl><tab><tab>  x = x + x","out":"表をCSVファイルに書き出す"}
{"in":"from Tkinter import *<nl>import ttk<nl>import time<nl>import threading<nl><nl>def start():<nl><tab> start_stop.config(text=\"QUIT\", command=stop)<nl><tab> thread = threading.Thread(target=progBar, args=())<nl><tab> thread.daemon = True<nl><tab> thread.start()<nl><nl>def progBar():<nl><tab> for i in xrange(5):<nl><tab><tab>  pbar_det.step(19.99)<nl><tab><tab>  master.update()<nl><tab><tab>  # Busy-wait<nl><tab><tab>  time.sleep(1)<nl><tab> master.quit()<nl><nl>def stop():<nl><tab> master.quit()<nl><nl>master = Tk()<nl><nl>start_stop = Button(master, text='START', command=start)<nl>start_stop.grid(row=0, column=1, pady=2, padx=2, sticky=E+W+N+S)<nl><nl>pbar_det = ttk.Progressbar(master, orient=\"horizontal\", length=600, mode=\"determinate\")<nl>pbar_det.grid(row=0, column=0, pady=2, padx=2, sticky=E+W+N+S)<nl><nl>master.mainloop()","out":"ボタンを押してプログラムを終了させる方法は？"}
{"in":"drop=False, inplace=True","out":"複合キーを持つNumpy配列、両方のサブセットを探す"}
{"in":"def generateTuples(N, M):<nl>  done = 0<nl>  counters = {}<nl>  for C in range(3, N + 3):<nl><tab> for B in range(2, C):<nl><tab><tab>for A in range(1, B):<nl><tab><tab>  if (counters.get('A%i' % A, 0) < M and<nl><tab><tab><tab><tab>counters.get('B%i' % B, 0) < M and<nl><tab><tab><tab><tab>counters.get('C%i' % C, 0) < M):<nl><tab><tab><tab> yield (A, B, C)<nl><tab><tab><tab> counters['A%i' % A] = counters.get('A%i' % A, 0) + 1<nl><tab><tab><tab> counters['B%i' % B] = counters.get('B%i' % B, 0) + 1<nl><tab><tab><tab> counters['C%i' % C] = counters.get('C%i' % C, 0) + 1<nl><tab><tab><tab> done += 1<nl><tab><tab><tab> if done >= N:<nl><tab><tab><tab><tab>return<nl><nl>for (A, B, C) in generateTuples(8, 3):<nl>  print (A, B, C)","out":"特定のプロパティを持つユニークなタプルのリストを生成するアルゴリズム"}
{"in":"# a is some list<nl>b2 = [0]*len(a[0])<nl>for x in a:<nl><tab> for y in range(len(x)):<nl><tab><tab><tab>b2[y] += x[y]<nl>print(b2)","out":"pythonでリストの要素の総和を行うにはどうすればよいですか？"}
{"in":"for test in suite:<nl><tab> print test._tests","out":"TestSuiteからTestCaseのリストを抽出するにはどうすればよいですか？"}
{"in":"import sys<nl>from PySide.QtGui import QApplication, QGraphicsScene, QGraphicsView<nl>from PySide.QtWebKit import QGraphicsWebView<nl><nl>if __name__ == '__main__':<nl><tab> app = QApplication(sys.argv)<nl><nl><tab> item = QGraphicsWebView()<nl><tab> item.load('front.svg')<nl><tab> view = QGraphicsView()<nl><tab> scene = QGraphicsScene()<nl><tab> scene.addItem(item)<nl><tab> view.setScene(scene)<nl><tab> view.show()<nl><tab> sys.exit(app.exec_())","out":"PySide - QSvgWidgetが埋め込まれたSVGファイルを正しくレンダリングしない。"}
{"in":"def read_or_write_file(self, file, section, passed_option = None,<nl><tab><tab><tab><tab><tab><tab><tab> value = None, read = True):<nl><nl><tab> config = ConfigParser.RawConfigParser()<nl><tab> with open(file) as configfile:<nl><tab><tab>  config.readfp(configfile)<tab> <nl><nl><tab> if read:<nl><tab><tab>  options = config.options(section)<nl><nl><tab><tab>  for option in options:<nl><tab><tab><tab><tab>file_settings[option] = config.get(section, option)<nl><nl><tab> else:<nl><tab><tab>  config.set(section, passed_option, value)<nl><nl><tab><tab>  with open(file, 'w') as configfile:<nl><tab><tab><tab><tab>config.write(configfile)","out":"PythonでINIファイルの読み書きをする方法"}
{"in":"pattern = '<td.*?bgcolor=\"#ff9900\".*?>(.*?)<\/th>'<nl>re.findall(pattern, html)","out":"Pythonです：属性が一致した場合にhtmlタグ間のデータを取得し、リストに入れる"}
{"in":"with open('test.txt') as input_data:<nl><tab> for line in input_data:<nl><tab><tab> match = re.search(r' is (.*) test ', line)<nl><tab><tab> if match:<nl><tab><tab><tab> print(line)<nl><tab><tab><tab> print(match.group(1))","out":"Pythonが1行から特定のテキストを読み上げる"}
{"in":"res = [word for word in simpleTokenize(string) if word not in stopwords]","out":"別のリストの値に基づいて、リストから値をフィルタリングする最も効率的な方法は？"}
{"in":"run('''python -c \"import os;os.mkdir('some dir')\" ''')","out":"任意のホスト、マルチプラットフォーム、LinuxとWindowsでフォルダ\/ディレクトリを作成するためにfabricを使用する方法？"}
{"in":"import urllib2<nl>def download(url, file):<nl><tab> dataset = urllib2.urlopen(url)<nl><tab> CHUNK = 16 * 1024<nl><tab> with open(file, 'wb') as dl:<nl><tab><tab>  while True:<nl><tab><tab><tab><tab>peice = dataset.read(CHUNK)<nl><tab><tab><tab><tab>if not peice: break<nl><tab><tab><tab><tab>dl.write(peice)<nl><nl>download(r'http:\/\/dds.cr.usgs.gov\/emodis\/Africa\/historical\/TERRA\/2012\/comp_056\/AF_eMTH_NDVI.2012.047-056.QKM.COMPRES.005.2012059143841.zip',r'AF_eMTH_NDVI.2012.047-056.QKM.COMPRES.005.2012059143841.zip')","out":"Pythonでファイルをダウンロードする"}
{"in":"from collections import defaultdict<nl>import re<nl>params = {<nl><tab> 'a': 'b',<nl><tab> 'c': 'd',<nl><tab> 'foo[bar]': 'element1',<nl><tab> 'foo[baz]': 'element2',<nl><tab> 'foo[qis]': 'element3',<nl><tab> 'foo[borfarglan][bofgl]': 'element4',<nl><tab> 'foo[borfarglan][bafgl]': 'element5',<nl>}<nl><nl>def split(string, brackets_on_first_result = False):<nl><tab> matches = re.split(\"[\\[\\]]+\", string)<nl><tab> matches.remove('')<nl><tab> return matches<nl><nl>def mr_parse(params):<nl><tab> results = {}<nl><tab> for key in params:<nl><tab><tab>  if '[' in key:<nl><tab><tab><tab><tab>key_list = split(key)<nl><tab><tab><tab><tab>d = results<nl><tab><tab><tab><tab>for partial_key in key_list[:-1]:<nl><tab><tab><tab><tab><tab> if partial_key not in d:<nl><tab><tab><tab><tab><tab><tab>  d[partial_key] = dict()<nl><tab><tab><tab><tab><tab> d = d[partial_key]<nl><tab><tab><tab><tab>d[key_list[-1]] = params[key]<nl><tab><tab>  else:<nl><tab><tab><tab><tab>results[key] = params[key]<nl><tab> return results<nl>print mr_parse(params)","out":"Pythonで辞書的なURLパラメータをパースする"}
{"in":"if any(test5 in subindex for subindex in index):<nl><tab> print True","out":"リストのリストから項目を検索する方法は？"}
{"in":"d = ws.cell(row = 4, column = 2)<nl>print d.value","out":"Pythonで行、列名からExcelの値を求めるには？"}
{"in":"test = 'tester.rtf'<nl>out_file = open(test,'w')<nl>out_file.write(\"\"\"{\\\\rtf1<nl>This is \\\\b Bold  \\\\b0\\line\\<nl>}\"\"\")<nl>out_file.close() #thanks to the comment below","out":"Pythonから書式付きテキストを書く方法はありますか？"}
{"in":"s.sprintf( <nl>  \"import imp<nl>\" <nl>  \"imp.load_source('%s', r'%s')\", modname, script_path); <nl>PyRun_SimpleString(s.c_str());","out":"C apiを使用して、フルパスでファイルをインポートする方法は？"}
{"in":"def file_len(fname):<nl><tab> with open(fname) as f:<nl><tab><tab>  for line in f:<nl><tab><tab><tab><tab>if line.strip() == \"{A<tab>B}\":<nl><tab><tab><tab><tab><tab> break<nl><tab><tab>  return sum(1 for line in f)","out":"ある行の後の行数をカウントする方法"}
{"in":"new_line = (T1.get(\"1.0\",'end-1c'))","out":"Python で 2 つの引数を取る .get()"}
{"in":"my_var = (#some_variable +<nl><tab><tab><tab>some_other_var)","out":"インラインコメント（バックスラッシュを使用して別の行に続けることなく）を作成するにはどうすればよいですか？"}
{"in":"request.FILES","out":"キーを渡さずにアップロードされたファイルをパースする"}
{"in":"import os<nl>def get_immediate_subdirectories(a_dir):<nl><tab> return [name for name in os.listdir(a_dir)<nl><tab><tab><tab><tab>if os.path.isdir(os.path.join(a_dir, name))]","out":"pythonで直下のサブディレクトリをすべて取得する"}
{"in":"from collections import Counter<nl><nl>def selectUnique(x):<nl><tab> count = Counter((i[1], i[2]) for i in x)<nl><tab> out = [i for i in x if count[(i[1], i[2])] == 1]<nl><tab> return out","out":"あるインデックスの値に基づいてタプルのリストから重複を取り除く"}
{"in":"import networkx as nx<nl><nl>G = nx.DiGraph()<nl>G.add_nodes_from([\"Start\", \"a\", \"b\", \"c\", \"End\"])<nl>G.add_edges_from([(\"Start\", \"a\"), (\"Start\", \"c\"), (\"a\", \"b\"), (\"b\", \"a\"), (\"c\", \"End\")])<nl><nl>total_num_nodes = G.number_of_nodes()<nl><nl>if len(nx.shortest_path(G, source=\"Start\")) < total_num_nodes:<nl><tab> print \"<nl>This FSM has inaccessible states\"<nl>else:<nl><tab> print \"<nl>All nodes reachable from 'Start'\"<nl><nl>H = G.reverse()<nl>if len(nx.shortest_path(H, source=\"End\")) < total_num_nodes:<nl><tab> print \"<nl>This FSM has dead-end states\"<nl>else:<nl><tab> print \"<nl>All nodes have a path to reach the 'End' state\"","out":"FSMの各状態が「開始」状態から「終了」状態まで到達可能であることを検証する。"}
{"in":"browser.profile.path","out":"selenium webdriverのオブジェクトに指定されたフォルダの名前を調べるには？"}
{"in":"def create_table():<nl><tab> curname = None<nl><tab> for amount in xrange(2500):<nl><tab><tab>  name = best(amount)<nl><tab><tab>  if name != curname:<nl><tab><tab><tab><tab>if curname is not None:<nl><tab><tab><tab><tab><tab> print \"%d-%d %s\" % (minamt, amount-1, curname)<nl><tab><tab><tab><tab>curname = name<nl><tab><tab><tab><tab>minamt = amount<nl><tab> print \"%d-%d %s\" % (minamt, amount-1, curname)","out":"関数の戻り値からテーブルを作成する"}
{"in":"response = urllib2.urlopen(url)<nl>CHUNK = 16 * 1024<nl>with open(file, 'wb') as f:<nl><tab>while True:<nl><tab><tab>chunk = response.read(CHUNK)<nl><tab><tab>if not chunk: break<nl><tab><tab>f.write(chunk)","out":"urllib2を使って大きなバイナリファイルをファイルにストリーミングする"}
{"in":"yield context.transaction(lambda: increment_counter(acc.key(), 5))","out":"Datastore Plus（NDB）におけるトランザクションへの引数の提供"}
{"in":"path = 'C:\\Users\\Kenny\\Desktop\\TTUM'<nl>listing = os.listdir(path)<nl><nl>for infile in listing:<nl><tab> dir_item_path = os.path.join(path, infile)<nl><tab> fh = open(dir_item_path,'r')<nl><tab> Fname = infile <nl><tab> Lname = Fname.split('.')[0]<nl><tab> name = Lname + \".csv\"<nl><tab> process_file = open(name,\"wb\")<nl><tab> newfile = csv.writer(process_file)<nl><tab> for line in fh.readlines():<nl><tab><tab><tab>space_remove = re.sub(r\"\\s+\",\",\",line.rstrip())<nl><tab><tab><tab>split_Line = space_remove.split(\" \")<nl><tab><tab><tab>newfile.writerow(split_Line)<nl><tab> process_file.close()","out":"Pythonでディレクトリからファイルを読み込む"}
{"in":"Input.readLines()","out":"ソケット転送時のデータミス"}
{"in":"#updated<nl>L = []<nl>for index, line in enumerate(open('data.txt')):<nl><tab> if index <= 4: #skip first 5 lines<nl><tab><tab>  continue<nl><tab> else:<nl><tab><tab><tab>L.append(line.split()[2]) #split on whitespace and append value from third columns to list.<nl>print(L)<nl>#[6.0, 5.0, 7.0]","out":"テキストファイルの特定の行・列のデータを読み込む"}
{"in":"from datetime import timedelta<nl>from time import sleep<nl><nl>while True:<nl><tab> try:<nl><tab><tab>  hours, minutes, seconds = input('Enter hours, minutes, seconds (with a comma in between): ')<nl><tab> except (ValueError, TypeError):<tab> # other errors<nl><tab><tab>  print(\"Error 1, please ...\")<nl><tab><tab>  continue<nl><tab> except NameError:<nl><tab><tab>  print(\"Error 2\")<nl><tab><tab>  continue<nl><tab> else:<nl><tab><tab>  print(\"All good\")<nl><tab><tab>  break<nl><nl>total = timedelta(hours=hours, minutes=minutes, seconds=seconds)<nl>for passed_seconds in range(int(total.total_seconds())):<nl><tab> print total - timedelta(seconds=passed_seconds)<nl><tab> sleep(1)","out":"Pythonカウントダウンプログラムのトラブルについて"}
{"in":"axes.set_autoscale_on(True)<nl>axes.autoscale_view(True,True,True)<nl>axes.set_ylim(0, 11) # 11 -> max(yvalues) + 1","out":"matplotlib のマージン付きオートスケール"}
{"in":"result = default.copy()<nl>result.update((k, v) for k, v in user.iteritems() if v is not None)","out":"Python dict から None 値を削除する。"}
{"in":"import nose2<nl><nl>test_run = nose2.discover(argv = ['-s', 'path-to-tests'], exit = False)<nl>if test_run.result.wasSuccessful():<nl><tab> do_something()<nl>else:<nl><tab> do_something_else()","out":"nose2でテストランの結果を確認する方法は？"}
{"in":"import foo<nl>foo.arbit = 'new value'","out":"Python モジュール変数を別のモジュールで変更する"}
{"in":"import re<nl><nl>mult = {'h': 60*60, 'mn': 60}<nl>res = sum(int(num) * mult.get(val, 1) for num, val in re.findall('(\\d+)(\\w+)', '1h 34mn 2s'))<nl># 5642","out":"Python で H mn s 形式時間から値を抽出する。"}
{"in":"from os import listdir<nl>from os.path import isfile, join<nl>subString = \"xyz\"<nl>mypath = \"\/tmp\"<nl>onlyGoodfiles = [f for f in listdir(mypath) if isfile(join(mypath, f)) and subString in f]","out":"ディレクトリ内の特定の文字列を名前の一部に持つファイルを探す"}
{"in":"controllers.py","out":"FlaskとAngularのWebアプリケーションルーティング"}
{"in":"context = {'lang': 'fr_FR'}<nl>id_report = printsock.report(dbname, uid, pwd, model, ids, {'model': model, 'report_type':'webkit', 'id':id_of_report, 'webkit_header':[id_of_webkit_header,\"name_of_webkit_header\"], 'report_name':'webkit.account.invoice', 'lang':'fr_FR','tz':'Europe\/Paris'}, context)","out":"Odoo 7 Webkit インボイスのレポート印刷について"}
{"in":"list(set(list1)-set(list2))","out":"pythonで他のリストを元にリストから項目を削除する方法"}
{"in":"nsmap = {'xmlns': 'urn:tva:metadata:2010'}<nl><nl>for info in root.xpath('\/\/xmlns:ProgramInformation', namespaces=nsmap):<nl><tab> print info.get('programId') # retrieve crid<nl><tab> print info.find('.\/\/xmlns:Title', namespaces=nsmap).text # retrieve title<nl><tab> print info.find('.\/\/xmlns:Genre\/xmlns:Name', namespaces=nsmap).text # retrieve genre","out":"特定のXMLの例でXPATHを理解するのに役立ちます。"}
{"in":"ax1[:set_yticks]([0.2,0.4,0.6,0.8,1.0])<nl>ax1[:set_yticklabels]([\"-40dB\",\"-30dB\",\"-20dB\",\"-10dB\",\"0dB\"])","out":"julia PyPlot の極座標プロットで放射状の目盛りを変更するには？"}
{"in":"def object_to_dict(obj, found=None):<nl><tab> if found is None:<nl><tab><tab>  found = set()<nl><tab> mapper = class_mapper(obj.__class__)<nl><tab> columns = [column.key for column in mapper.columns]<nl><tab> get_key_value = lambda c: (c, getattr(obj, c).isoformat()) if isinstance(getattr(obj, c), datetime) else (c, getattr(obj, c))<nl><tab> out = dict(map(get_key_value, columns))<nl><tab> for name, relation in mapper.relationships.items():<nl><tab><tab>  if relation not in found:<nl><tab><tab><tab><tab>found.add(relation)<nl><tab><tab><tab><tab>related_obj = getattr(obj, name)<nl><tab><tab><tab><tab>if related_obj is not None:<nl><tab><tab><tab><tab><tab> if relation.uselist:<nl><tab><tab><tab><tab><tab><tab>  out[name] = [object_to_dict(child, found) for child in related_obj]<nl><tab><tab><tab><tab><tab> else:<nl><tab><tab><tab><tab><tab><tab>  out[name] = object_to_dict(related_obj, found)<nl><tab> return out","out":"SqlAlchemy ormの結果をdictに変換する。"}
{"in":"nan_mask = np.isnan(matrix)<nl>matrix[nan_mask] = np.random.randint(0, 2, size=np.count_nonzero(nan_mask))","out":"numpyの配列で欠損値をランダムで置き換える"}
{"in":"def func(rawData):<nl><tab> sum = 0<nl><tab> for i in rawData[::-1]:<nl><tab><tab>  sum += i<nl><tab><tab>  sum <<= 8<nl><nl><tab> sum >>= 8<nl><tab> return sum","out":"python3で可変長バイト(8以下)をlong long intに高速変換する方法は？"}
{"in":"button = tkinter.Button(row6, text = 'Send', height = 2, width = 20, relief = 'raised', cursor = 'hand1', font = ('times', 14, 'bold'))","out":"Tkinterで要素の正確な高さを設定するにはどうすればよいですか？"}
{"in":"polls_list = Event.objects.filter(inserttime__gt=timezone.now()).order_by('-inserttime')","out":"ビューでモデルからレコードをフィルタリングするには？"}
{"in":"Item.query.join(Item.users).filter(User.name == 'bob')<nl>Item.query.join(Item.users).filter(User.name == 'bob', Item.name == 'shark')","out":"flask sqlalchemyで、ある制約に基づいた多対多のクエリを行うには？"}
{"in":"def sortedfilter(in_fname, filter_fname, out_fname):<nl><tab> with open(in_fname) as inf, open(filter_fname) as fil, open(out_fname, 'w') as outf:<nl><tab><tab>  ins = inf.next()<nl><tab><tab>  try:<nl><tab><tab><tab><tab>for fs in fil:<nl><tab><tab><tab><tab><tab> while ins < fs:<nl><tab><tab><tab><tab><tab><tab>  outf.write(ins)<nl><tab><tab><tab><tab><tab><tab>  ins = inf.next()<nl><tab><tab><tab><tab><tab> while ins == fs:<nl><tab><tab><tab><tab><tab><tab>  ins = inf.next()<nl><tab><tab>  except StopIteration:<nl><tab><tab><tab><tab># reached end of inf before end of fil<nl><tab><tab><tab><tab>pass<nl><tab><tab>  else:<nl><tab><tab><tab><tab># reached end of fil first, pass rest of inf through<nl><tab><tab><tab><tab>file_output.writelines(file_input.readlines())","out":"Pythonによる大規模ファイルの重複削除の最適化"}
{"in":"plot = ggplot.ggplot(new_df, ggplot.aes(x='weekday', y='ENTRIESn_hourly')) +\\<nl>ggplot.geom_bar(stat='identity') +\\<nl>ggplot.ggtitle('NYC Subway ridership by day of week') +\\<nl>ggplot.xlab('Week day (0=Sunday)') +\\<nl>ggplot.ylab('Entries')","out":"pandas DataFrameを操作してggplotヒストグラムをプロットする方法"}
{"in":"import numpy as np<nl>import scipy as sp<nl>from scipy.interpolate import interp1d<nl><nl>x1 = sorted([1., 0.88, 0.67, 0.50, 0.35, 0.27, 0.18, 0.11, 0.08, 0.04, 0.04, 0.02])<nl>y1 = [0., 13.99, 27.99, 41.98, 55.98, 69.97, 83.97, 97.97, 111.96, 125.96, 139.95, 153.95]<nl><nl>new_length = 25<nl>new_x = np.linspace(x.min(), x.max(), new_length)<nl>new_y = sp.interpolate.interp1d(x, y, kind='cubic')(new_x)","out":"Pythonによるスプライン補間"}
{"in":"def data():<nl><tab>name = input(\"Please enter the customer's name.\")<nl><tab>temp_phone = int(input(\"Please enter the customer's Phone Number.\"))<nl><tab>while len.str(temp_phone) != 11:<nl><tab><tab>  temp_phone = int(input(\"Please enter the customer's Phone Number.\"))<nl><tab>phone = temp_phone<nl><tab>temp_groupno = int(input(\"Please enter the number of diners in the group (maximum 20 diners)\"))<nl><tab>while  not (1 <= groupno <=20):<nl><tab><tab>  temp_groupno = int(input(\"Please enter the number of diners in the group (maximum 20)\"))<nl><tab>group = temp_groupno<nl><nl><tab>temp_score = int(input(\"Please enter the rating of the meal (between 1 and 10)\"))<nl><tab>while not (1 <= temp_score <= 3):<nl><tab><tab>  temp_score = int(input(\"Please enter the rating of the meal - between 1 & 10.\"))<nl><tab>score = temp_score<nl><tab>return {'name': name, 'phone': phone, 'group': group, 'score': score}<nl><nl>customers = []<nl>customers.append(data())<nl>customers.append(data())<nl>print(customers)","out":"TypeError: data() に 4 つの必須位置引数がありません：n', 'p', 'gn', および 's' です。"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import sys<nl>import dbus<nl>from PyQt4.QtGui import QApplication<nl>from dbus.mainloop.qt import DBusQtMainLoop<nl><nl>class DBus_Answer():<nl><tab> def __init__(self, text):<nl><tab><tab>  self.answer = text<nl><tab><tab>  bus_loop = DBusQtMainLoop(set_as_default=True)<nl><tab><tab>  self.bus = dbus.SessionBus()<nl><tab><tab>  self.bus.add_signal_receiver(self.my_func,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> dbus_interface=\"im.pidgin.purple.PurpleInterface\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> signal_name=\"ReceivedImMsg\")<nl><nl><tab> def my_func(self, account, sender, message, conversation, flags):<nl><tab><tab>  obj = self.bus.get_object(\"im.pidgin.purple.PurpleService\", \"\/im\/pidgin\/purple\/PurpleObject\")<nl><tab><tab>  purple = dbus.Interface(obj, \"im.pidgin.purple.PurpleInterface\")<nl><tab><tab>  purple.PurpleConvImSend(purple.PurpleConvIm(conversation), self.answer)<nl><nl>app = QApplication(sys.argv)<nl>run = DBus_Answer(\"Slam\")<nl>app.exec_()","out":"pythonプログラムでのDBusの使用"}
{"in":"driver.find_element_by_id(\"txtfld\").get_attribute(\"value\")","out":"python selenium textfileld の値を保存する。"}
{"in":"import re<nl>import locale<nl><nl># Remove anything not a digit, comma or period<nl>no_cruft = re.sub(r'[^\\d,.-]', '', st)<nl><nl># Split the result into parts consisting purely of digits<nl>parts = re.split(r'[,.]', no_cruft)<nl><nl># ...and sew them back together<nl>if len(parts) == 1:<nl><tab> # No delimeters found<nl><tab> float_str = parts[0]<nl>elif len(parts[-1]) != 2:<nl><tab> # >= 1 delimeters found. If the length of last part is not equal to 2, assume it is not a decimal part<nl><tab> float_str = ''.join(parts)<nl>else:<nl><tab> float_str = '%s%s%s' % (''.join(parts[0:-1]),<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> locale.localeconv()['decimal_point'],<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> parts[-1])<nl><nl># Convert to float<nl>my_float = float(float_str)","out":"異なるセパレータを持つ浮動小数点数への文字列のパース"}
{"in":"import asizeof<nl><nl>N = 1000000<nl>print asizeof.asizeof(range(N)) \/ N<nl># -> 20 (python 2.5, WinXP, 32-bit Linux)<nl># -> 33 (64-bit Linux)","out":"Pythonのリスト（タプル）には、1要素あたり何バイトのデータがあるのか？"}
{"in":"for row in reader:<nl><tab> print(\"Time Stamp: %s - Temperature ?C: %.2f - Humidity: %%: %.2f\" % (row[0], float(row[1]), float(row[2])))","out":"Pythonで数値の切り捨てができない"}
{"in":"-lpython24","out":"C++でSWIGを使う"}
{"in":"with open(\"filename\", \"rtU\") as f:<nl><tab> columns = f.readline().strip().split(\" \")<nl><tab> numRows = 0<nl><tab> sums = [0] * len(columns)<nl><nl><tab> for line in f:<nl><tab><tab>  # Skip empty lines<nl><tab><tab>  if not line.strip():<nl><tab><tab><tab><tab>continue<nl><nl><tab><tab>  values = line.split(\" \")<nl><tab><tab>  for i in xrange(len(values)):<nl><tab><tab><tab><tab>sums[i] += int(values[i])<nl><tab><tab>  numRows += 1<nl><nl><tab> for index, summedRowValue in enumerate(sums):<nl><tab><tab>  print columns[index], 1.0 * summedRowValue \/ numRows","out":"pythonを使用してファイル内の複数の列の平均を求める方法"}
{"in":"savetxt(fname='newPicksData.txt', X=new_picks.astype(int), fmt ='%.0f<nl>')","out":"txtファイルに整数だけのnumpyの2次元配列を書き込む方法"}
{"in":"import clr<nl>clr.AddReference('ClassLibrary1')<nl>from ClassLibrary1 import MmsValue<nl>from System import UInt32<tab> <nl><nl>uint32_mmsValue = MmsValue.__new__.Overloads[UInt32](MmsValue, 1)","out":"IronPythonから符号なし整数の引数を持つ.Netのメソッドを呼び出す方法"}
{"in":"import tarfile, io<nl>byte_array = client.read_bytes()<nl>file_like_object = io.BytesIO(byte_array)<nl>tar = tarfile.open(fileobj=file_like_object)<nl># use \"tar\" as a regular TarFile object<nl>for member in tar.getmembers():<nl><tab> f = tar.extractfile(member)<nl><tab> print(f)","out":"Python 3でバイトバッファからTarFileオブジェクトをメモリ上に構築する方法は？"}
{"in":"sys.path.insert(0, '\/usr\/local\/lib')<nl>sys.path.insert(0, os.path.expanduser('~\/lib'))","out":"Pypyにサードパーティモジュールを認識させる"}
{"in":"s = ','.join(info)<nl>f.write(s + '<nl>')","out":"Pythonによるリスト形式でのファイルへの書き込み"}
{"in":"try:<nl><tab> open(filename, 'w').close()<nl><tab> os.unlink(filePath)<nl><tab> print('Filename is valid.')<nl>except OSError:<nl><tab> print('Filename is not valid.')","out":"ファイル名が有効かどうかをチェックする"}
{"in":"#!\/usr\/bin\/python<nl>import os.path<nl>path = '\/dir1\/dir2\/dir3\/file.exe'<nl>name = os.path.basename(path)<nl>print name","out":"文字列を逆から読み、最初の'\/'で終了する。"}
{"in":"def findColor():<nl><tab> pic=takePicture()<nl><tab> for pix in getPixels(pic):<nl><tab><tab>  r = getRed(pix)<nl><tab><tab>  g = getGreen(pix)<nl><tab><tab>  b = getBlue(pix)<nl><tab><tab>  print(r,g,b)","out":"RGB値の検索"}
{"in":"class RecordProcessor(object):<nl><tab> def __init__(self, recs):<nl><tab><tab>  self.recs = recs<nl><tab><tab>  self.processed_rec_count = 0<nl><tab> def __call__(self):<nl><tab><tab>  for r in self.recs:<nl><tab><tab><tab><tab>if r.sender('sender_of_interest'):<nl><tab><tab><tab><tab><tab>self.processed_rec_count += 1<nl><tab><tab><tab><tab><tab># process record r...<nl><tab><tab><tab><tab><tab>yield r  # processed record<nl><nl>def process_all_records(files):<nl><tab> for f in files:<nl><tab><tab>  fd = open(f,'r')<nl><tab><tab>  recs_p = RecordProcessor(read_records(fd))<nl><tab><tab>  write_records(recs_p)<nl><tab><tab>  print 'records processed:', recs_p.processed_rec_count","out":"ジェネレーターで処理した元素の数を追跡する"}
{"in":"x = 0<nl>while x < len(days):<nl><tab> print (\"{0:20} \\t {1:20}\".format(days[x], str(gals[x])))<nl><tab> x += 1","out":"SyntaxError: 初心者のための無効な構文"}
{"in":"import requests<nl>username = \"SomeUser\"<nl>password = \"SomePass\"<nl>r = requests.get(\"https:\/\/a.b.c:7895\/resource\/path?param1=foo\",auth=(username,password),verify=False)","out":"python3でBasicAuth REST query over SSLを作るには？"}
{"in":"your_list = [[int(j) for j in i.split()] for i in ' '.join(data).split('<>')]","out":"pythonでリストをリストに分割する？"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl>import matplotlib.animation as animation<nl><nl>x = np.linspace(0,2*np.pi,100)<nl><nl>fig = plt.figure()  <nl>sub = fig.add_subplot(111, xlim=(x[0], x[-1]), ylim=(-1, 1))<nl>PLOT, = sub.plot([],[])<nl><nl>def animate(i):<nl><tab> PLOT.set_data(x[:i], np.sin(x[:i]))<nl><tab> # print(\"test\")<nl><tab> return PLOT,<nl><nl>ani = animation.FuncAnimation(fig, animate, frames=len(x), interval=10, blit=True)<nl>plt.show()","out":"Python Matplotlib FuncAnimationが1フレームしか描画しない。"}
{"in":"import urllib<nl>import urllib2<nl>import simplejson<nl><nl>url = 'http:\/\/en.wikipedia.org\/w\/api.php'<nl>values = {'action' : 'query',<nl><tab><tab><tab> 'prop' : 'revisions',<nl><tab><tab><tab> 'titles' : 'Jennifer_Aniston',<nl><tab><tab><tab> 'rvprop' : 'content',<nl><tab><tab><tab> 'format' : 'json'}<nl><nl>data = urllib.urlencode(values)<nl>req = urllib2.Request(url, data)<nl>response = urllib2.urlopen(req)<nl>json = response.read()","out":"Wikipediaのデータページを照会する"}
{"in":"MyButton1 = Button(master, text=\"BUTTON1\", width=10, command=callback)<nl>MyButton1.grid(row=0, column=0)<nl><nl>MyButton2 = Button(master, text=\"BUTTON2\", width=10, command=callback)<nl>MyButton2.grid(row=1, column=0)<nl><nl>MyButton3 = Button(master, text=\"BUTTON3\", width=10, command=callback)<nl>MyButton3.grid(row=2, column=0)","out":"Pythonでボタンに位置を設定する？"}
{"in":"import locale<nl>import sys<nl><nl>def my_views(request):<nl><tab> # before <nl><tab> reload(sys)<nl><tab> sys.setdefaultencoding(\"utf-8\")","out":"Djangoです：どのようにsave()でUnicodeEncodeErrorなしでファイルをアップロードするには？"}
{"in":"keyPass = input(\"Create Admin Password > \")<nl><nl>with open(pathName, 'w') as db_file:<nl><tab> db_file.write(json.dumps({\"Admin\": keyPass}))<nl><nl>with open(pathName, 'w') as db_file:<nl><tab> json.dump({\"Admin\": keyPass}, db_file)","out":"PythonでJsonファイルハンドリング：ファイルへの入力の書き込み"}
{"in":"import Skype4Py<nl>import time<nl>from pytify import Spotify<nl><nl># Create Skype object<nl>skype = Skype4Py.Skype()<nl>skype.Attach()<nl><nl># Create Spotify object<nl>spotify = Spotify()<nl>spotifyPlaying = spotify.isPlaying()<nl><nl># Create handler for when Skype call status changes<nl>def on_call_status(call, status):<nl>  if status == Skype4Py.clsInProgress:<nl><tab> # Save current spotify state<nl><tab> global spotifyPlaying<nl><tab> spotifyPlaying = spotify.isPlaying()<nl><nl><tab> if spotify.isPlaying():<nl><tab><tab>print \"Call started, pausing spotify\"<nl><tab><tab># Call started, pause Spotify<nl><tab><tab>spotify.stop()<nl><nl>  elif status == Skype4Py.clsFinished:<nl><tab> # Call finished, resume Spotify if it was playing<nl><tab> if spotifyPlaying and not spotify.isPlaying():<nl><tab><tab>print \"Call finished, resuming spotify\"<nl><tab><tab>spotify.playpause()  <nl><nl>skype.OnCallStatus = on_call_status<nl><nl>while True:<nl>  time.sleep(10)","out":"skypeで電話がかかってきたときにspotifyをプログラム的に一時停止させる方法"}
{"in":"import transaction<nl><nl>def redirect_to_trial(trans, obj=None, parent=None):<nl><tab> if obj.id not in parent:<nl><tab><tab>  request = getattr(obj, 'REQUEST', None)<nl><tab><tab>  if request:<nl><tab><tab><tab><tab>trial_url = obj.__parent__.__parent__.absolute_url()<nl><tab><tab><tab><tab>request.response.redirect(trial_url)<nl><nl>@grok.subscribe(ISite, IObjectRemovedEvent)<nl>def on_site_delete(obj, event):<nl><tab> kwargs = dict(<nl><tab><tab>  obj = obj,<nl><tab><tab>  parent = event.oldParent,<nl><tab> )<nl><tab> transaction.get().addAfterCommitHook(redirect_to_trial, kws=kwargs)","out":"Plone：オブジェクトの削除に反応する"}
{"in":"R = numpy.arctan2(A[...,1],A[...,0])","out":"最終軸のみの割り出しによる動作"}
{"in":"h = int(raw_input(\"Please enter the height of the triangle: \"))<nl>for i in mytri(h):<nl><tab> print \" \" * (h * 2), i<nl><tab> h -= 1","out":"パスカルの三角形の書式設定"}
{"in":"class Hello(object):<nl><tab> def __init__(self):<nl><tab><tab>  self.x = None<nl><tab><tab>  self.y = None<nl><tab><tab>  self.z = None<nl><tab> def is_all_set(self):<nl><tab><tab>  return all(getattr(self, attr) is not None for attr in self.__dict__)","out":"Pythonでインスタンスの値をチェックする方法は？"}
{"in":"import pandas as pd<nl>import matplotlib.pyplot as plt<nl><nl>df = pd.DataFrame({'color': ['blue','blue','yellow','blue','yellow'], 'area': [2,2,3,4,4]})<nl>fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2)<nl>#Hide upper left corner plot and create two new subplots<nl>ax1.axis('off')<nl>ax = fig.add_subplot(2,4,1)<nl>ax0 = fig.add_subplot(2,4,2)<nl>#Plot<nl>ax3.plot([[2,2], [3,6]])<nl>ax4.plot([[3,6], [2,2]])<nl>df.area.hist(by=df.color, ax=(ax,ax0)) #Pass both new subplots","out":"pandasでDataFrame.hist(by=)を使って特定の軸にプロットする方法"}
{"in":"def int_to_rgb(n):<nl><tab> b = (n & 0xff0000) >> 16<nl><tab> g = (n & 0x00ff00) >> 8<nl><tab> r = (n & 0x0000ff)<nl><tab> return (r, g, b)","out":"整数からバイトへの変換"}
{"in":"areas = array([[1, 1, 2, 2],\\<nl><tab><tab>  [0, 1, 0, 1],\\<nl><tab><tab>  [3, 0, 1, 4],\\<nl><tab><tab>  [0, 3, 1, 1]])<nl><nl>def is_in_area(x,y, area_num):<nl><tab> return areas[round(x), round(y)] == area_num","out":"2次元のnumpy配列において、ある点が非矩形領域にあるかどうかを検出する方法は？"}
{"in":"import urllib.request<nl>external_ip = urllib.request.urlopen('http:\/\/ifconfig.me\/ip').read()","out":"Python SocketServer - 自分のIPを取得する。"}
{"in":"word = u'F??NF'","out":"pythonで?"}
{"in":"def tup321(tup):<nl><tab> return (tup[0] + 3, tup[1] * 2, tup[2] \/ 2)","out":"任意の長さのタプルに異なる数式を適用する関数を作るには？"}
{"in":"b =['52.5%', '62.4%', '91.8%', '21.5%']<nl>b.sort(key = lambda a: float(a[:-1]))","out":"百分率で並べる"}
{"in":"import git<nl>repo = git.Repo(\"path\/of\/repo\/\")<nl><nl># the below gives us all commits<nl>repo.commits()<nl><nl># take the first and last commit<nl><nl>a_commit = repo.commits()[0]<nl>b_commit = repo.commits()[1]<nl><nl># now get the diff<nl>repo.diff(a_commit,b_commit)","out":"gitpython を使って現在のコミットと最後のコミットの git diff を行うにはどうすればよいですか？"}
{"in":"output = StringIO.StringIO()<nl>base.save(output, format='PNG')<nl>return [output.getvalue()]","out":"WSGIアプリケーションからインメモリPIL画像を返す方法"}
{"in":"self.prog.setCancelButton(None)","out":"PyQt4プログレスダイアログからキャンセルボタンを削除する"}
{"in":"vsprintf('The first 4 letters of the english alphabet are: %s, %s, %s and %s', ['a', 'b', 'c', 'd']);","out":"javascript における python の文字列の書式設定"}
{"in":"[point_geom.x, point_geom.y]","out":"ポイントジオメトリをリストに変換する"}
{"in":"raise cherrypy.HTTPRedirect(\"http:\/\/www.yahoo.com\")","out":"turbogears\/cherrypyのアプリケーションから外部URLを参照する方法は？"}
{"in":"for kitten in kittens:<nl><tab> then = kitten.date<nl><tab> now = datetime.datetime.now()<nl><tab> tdelta = now - then<nl><nl>if tdelta.total_seconds() > 300:<nl><tab> kitten.delete()","out":"google datastoreのdatetimeとpythonのdatetimeを比較する方法は？"}
{"in":"import subprocess<nl><nl>s = \"\"\"\/usr\/local\/sbin\/kamctl fifo profile_get_size myprofile | awk -F ':: ' '{print $2}'\"\"\"<nl><nl>p = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE)<nl><nl>out, err = p.communicate()<nl><nl>print 'out: %r' % out<nl>print 'err: %r' % err<nl>print 'status: %r' % p.returncode","out":"cmdlineからの出力をPythonスクリプトで処理する。"}
{"in":"[artist for artist in myJson['Artists'] if artist['profile']['age'] == 7]","out":"pythonで以下のjsonのdictを効率よく検索し、リストや別のdictに格納するにはどうすればよいでしょうか？"}
{"in":"import matploltib.pyplot as plt<nl>import seaborn<nl><nl>import mylib<nl><nl>a4_dims = (11.7, 8.27)<nl>df = mylib.load_data()<nl>fig, ax = plt.subplots(figsize=a4_dims)<nl>seaborn.voilinplot(ax=ax, data=df, **violin_options)","out":"seaborn.violin_plotの図形の大きさを変えるにはどうしたらよいですか？"}
{"in":"a.encrypt(m).encode('hex')","out":"暗号文を16進数の文字列として印刷するにはどうすればよいですか？"}
{"in":"import sys<nl>import trace<nl><nl># create a Trace object, telling it what to ignore, and whether to<nl># do tracing or line-counting or both.<nl>tracer = trace.Trace(<nl><tab> ignoredirs=[sys.prefix, sys.exec_prefix],<nl><tab> trace=0,<nl><tab> count=1)<nl><nl># run the new command using the given tracer<nl>tracer.run('main()')<nl><nl># make a report, placing output in \/tmp<nl>r = tracer.results()<nl>r.write_results(show_missing=True, coverdir=\"\/tmp\")","out":"Pythonでメソッドロギング"}
{"in":"0.22321428571428600000;0.44642857142857100000;0.66964285714285700000;0.89285714285714300000;1.11607142857143000000;1.33928571428571000000;1.56250000000000000000;1.78571428571429000000;2.00892857142857000000;2.23214285714286000000;2.45535714285714000000;2.67857142857143000000;2.90178571428571000000;3.12500000000000000000;3.34821428571428000000;3.57142857142857000000;3.79464285714286000000;4.01785714285714000000;4.24107142857143000000;4.46428571428571000000;4.68750000000000000000;4.91071428571428000000;5.13392857142857000000;5.35714285714286000000;5.58035714285714000000;5.80357142857143000000;6.02678571428571000000;6.25000000000000000000;6.47321428571428000000;6.69642857142857000000;6.91964285714285000000;7.14285714285714000000","out":"matplotlib x軸の値のグループ化"}
{"in":"import os<nl>from subprocess import Popen, PIPE<nl><nl>p = Popen(\"some_program.exe\", stdin=PIPE)<nl>p.communicate(os.linesep.join([\"name\", \"age\"]))","out":"pythonによるWindows実行ファイルのコマンドラインGUIとのコミュニケーション"}
{"in":"def put(d, keys, item):<nl><tab> if \".\" in keys:<nl><tab><tab>  key, rest = keys.split(\".\", 1)<nl><tab><tab>  if key not in d:<nl><tab><tab><tab><tab>d[key] = {}<nl><tab><tab>  put(d[key], rest, item)<nl><tab> else:<nl><tab><tab>  d[keys] = item<nl><nl>def get(d, keys):<nl><tab> if \".\" in keys:<nl><tab><tab>  key, rest = keys.split(\".\", 1)<nl><tab><tab>  return get(d[key], rest)<nl><tab> else:<nl><tab><tab>  return d[keys]","out":"ドット記法文字列を使った辞書のチェック"}
{"in":"import csv<nl>import sys<nl><nl>writer = csv.csvwriter(sys.stdout)<nl>writer.writerow(iterable_containing_my_strings)","out":"Pythonで文字列のリストをCSVに変更するにはどうすればよいですか？"}
{"in":"filename = request.GET[ 'yourfilename' ]<nl><nl>from django.core.files.uploadedfile import SimpleUploadedFile<nl>file_contents = SimpleUploadedFile(\"%s\" %(filename), request.raw_post_data)<nl><nl>modelinstance.picture.save(filename, file_contents, True)","out":"ajaxでアップロードされたファイルをDjangoのモデルImageFieldに保存する。"}
{"in":"def main():<nl><tab> # take input from the user<nl><tab> num = float(input(\"Enter a number: \"))<nl><tab> if (num%1 != 0):<nl><tab><tab>  print(\"Bad entry, only integers are accepted.\")<nl><tab><tab>  return <nl><nl><tab> num = int(num)<nl><tab> factorial = 1<nl><tab> if num > 100:<nl><tab><tab>  print(\"Bad entry. It should be an integer less than or equal to 100!\")<nl><tab><tab>  print(\"Please try again: \")<nl><tab> elif num == 0:<nl><tab><tab>  print(\"The factorial of 0 is 1\")<nl><tab> elif num < 0:<nl><tab><tab>  print(\"Bad entry. It should be an integer superior than or equal to 0!\")<nl><tab><tab>  print(\"Please try again: \")  <nl><tab> else:<nl><tab><tab>  for i in range(1,num + 1):<nl><tab><tab><tab><tab>factorial = factorial*i<nl><tab><tab>  print(\"The factorial of\",num,\"is\",factorial)<nl><nl>main()","out":"Pythonプログラムがクラッシュしないようにするにはどうすればよいですか？"}
{"in":"from pylab import *<nl><nl>import time<nl><nl>ion()<nl><nl>tstart = time.time()<tab><tab><tab><tab><tab># for profiling<nl>x = arange(0,2*pi,0.01)<tab><tab><tab><tab># x-array<nl>line, = plot(x,sin(x))<nl><nl>for i in arange(1,200):<nl><tab> line.set_ydata(sin(x+i\/10.0))  # update the data<nl><tab> draw()<tab><tab><tab><tab><tab><tab><tab><tab> # redraw the canvas<nl><nl><nl>print 'FPS:' , 200\/(time.time()-tstart)","out":"pythonでプロットをリアルタイムに更新する。"}
{"in":"args = [id, nya]<nl>Check2('SoapMethodName', *args)","out":"pythonで複数の変数をSUDSデータとして渡すには？"}
{"in":"message = sendgrid.Mail()<nl>message.add_filter('templates', 'enable', '1')<nl>message.add_filter('templates', 'template_id', 'TEMPLATE-ALPHA-NUMERIC-ID')","out":"sendgridのテンプレートをpythonアプリと連携させる方法とは？"}
{"in":"application = tornado.web.Application([<nl><tab> (r'\/blah', BlahHandler),<nl><tab> ], **settings)<nl><nl># Create an HTTP server listening on localhost, port 8080.<nl>http_server = tornado.httpserver.HTTPServer(application)<nl>http_server.listen(8080, address='127.0.0.1')","out":"TornadoのWebサーバーをローカルで動かすにはどうしたらいいのでしょうか？"}
{"in":"import xmltodict<nl>import json<nl><nl>json.dumps(xmltodict.parase(txt))","out":"pythonでtextareaのXmlを解析してjsonを返すにはどうすればよいですか？"}
{"in":"import numpy as np<nl><nl>a = np.array([1,2,3])<nl>b = np.array([None, a, a, a])[1:]<nl><nl>print b.dtype, b[0].dtype, b[1].dtype<nl># object int32 int32","out":"数値配列のNumpyオブジェクト配列"}
{"in":"times = ncfile.createDimension('time', len(timerange))","out":"範囲を指定してディメンジョンを作成する"}
{"in":"import os<nl><nl>with open('file.txt') as f:<nl><tab> for line in f:<nl><tab><tab>  newname, file, checksum = line.split()<nl><tab><tab>  if os.path.exists(file):<nl><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab> os.rename(file, os.sep.join([os.path.dirname(file), newname]))<nl><tab><tab><tab><tab>except OSError:<nl><tab><tab><tab><tab><tab> print \"Got a problem with file {}. Failed to rename it to {}.\".format(file, newname)","out":"テキストファイルからフォルダー内のファイル名を変更する。"}
{"in":"def addWordHistory(words):<nl><tab> current = [wordhistory, 0]<nl><tab> for word in words:<nl><tab><tab>  if current[0] is None:<nl><tab><tab><tab><tab>current[0] = dict()<nl><tab><tab>  children = current[0]<nl><tab><tab>  if word in children:<nl><tab><tab><tab><tab>children[word][1] += 1<nl><tab><tab>  else:<nl><tab><tab><tab><tab>children[word] = [None, 1]<nl><tab><tab>  current = children[word]","out":"Python：関数におけるグローバル変数の参照と非参照"}
{"in":"import os<nl>import time<nl><nl>PING_HOST='10.10.10.10' # some host on the other side of the VPN<nl><nl>while True:<nl><tab> retcode = os.system('ping -c 1 %s' % PING_HOST)<nl><nl><tab> if retcode:  <nl><tab><tab> # perform action for lost connection<nl><tab><tab> logging.warn(\"Lost visibility with %s\" % PING_HOST)<nl><nl><tab> time.sleep(10) # sleep 10 seconds","out":"VPN接続の継続的なチェック - Python"}
{"in":"student_queryset = Students.objects.filter(Teacher__TeacherName__contains = 'Sara')","out":"Python django: 別のテーブルの条件に基づいてテーブルをフィルタリングする。"}
{"in":"Components = ['SAVE_DOCUMENT', 'GET_DOCUMENT', 'DVK_SEND', 'DVK_RECEIVE', 'GET_USER_INFO', 'NOTIFICATIONS', 'ERROR_LOG', 'SUMMARY_STATUS']<nl>missed = [x for x in Components if x + \"_STATUS\" not in locals() or x + \"_DESC\" not in locals()]<nl>if missed:<nl><tab> print \"Missing components: {0:}\".format(missed)<nl><tab> sys.exit(StateUnknown)","out":"変数が存在するかどうかを確認するにはどうすればよいですか？"}
{"in":"class YourProtocol(protocol.Protocol):<nl><nl><tab> def connectionMade(self):<nl><tab><tab>  self._peer = self.transport.getPeer()<nl><nl><tab> def connectionLost(self):<nl><tab><tab>  print 'Lost connection from', self._peer","out":"ツイストで接続が切れた後、クライアントのIPアドレスを取得する方法"}
{"in":"def __parse64(self, path_file):<nl><tab> file_data = open(path_file, 'rb').read(-1) <nl><tab> #This slurps the whole file as binary.<nl><tab> self.encoded_string_file = b64.b64encode(file_data)","out":"readAsDataURL」のpython実装。"}
{"in":"if __name__ == '__main__':<nl><tab> obj = GetOneMachineDataFromDatabase()<nl><nl><tab> make_transient(obj)<nl><tab> obj._oid = None<nl><tab> _session.add(obj)<nl><tab> # this include a flush() and create a new primary key<nl><tab> _session.commit()","out":"SQLAlchemy のマップされたオブジェクトを複製するために make_transient() を使うにはどうしたらいいでしょうか？"}
{"in":"patterns = \"\"\"NP: {<DT|PP\\$>?<JJ>*<NN>}<nl><tab> {<NNP>+}<nl><tab> {<NN>+}<nl>\"\"\"","out":"NLTKを用いたチャンキングによる関係性抽出"}
{"in":"import numpy as np<nl>from matplotlib.patches import Circle<nl>from matplotlib.collections import PatchCollection<nl>import matplotlib.pyplot as plt<nl>from matplotlib import cm<nl>from matplotlib import animation<nl><nl>fig, ax = plt.subplots()<nl><nl>patches = []<nl># create circles with random sizes and locations<nl>N = 10 # number of circles<nl>x = np.random.rand(N)<nl>y = np.random.rand(N)<nl>radii  = 0.1*np.random.rand(N)<nl>for x1,y1,r in zip(x, y, radii):<nl><tab> circle = Circle((x1,y1), r)<nl><tab> patches.append(circle)<nl><nl># add these circles to a collection<nl>p = PatchCollection(patches, cmap=cm.prism, alpha=0.4)<nl>ax.add_collection(p)<nl><nl>def animate(i):<nl><tab> colors = 100*np.random.rand(len(patches)) # random index to color map<nl><tab> p.set_array(np.array(colors)) # set new color colors<nl><tab> return p,<nl><nl>ani = animation.FuncAnimation(fig, animate, frames=50, interval=50)<nl><nl>plt.show()","out":"matplotlibでパッチの円のアニメーションの色を効率よく変更するには？"}
{"in":"from math import sin, cos, pi<nl>import matplotlib.pyplot as plt<nl><nl>x,y = [cos((i*pi)\/500) for i in range(1000)], [sin((i*pi)\/500) for i in range(1000)]<nl>plt.plot(x,y)<nl>plt.show()","out":"サークルを作るには？"}
{"in":"def getMaxSubArrays(x):<nl><tab> y=x-np.mean(x)<nl><tab> z=y\/y.max()<nl><tab> maxSubArrays=[]<nl><tab> subFound=False<nl><tab> begin=0<nl><tab> for i in range(len(z)):<nl><tab><tab>  if z[i]>0.75 and subFound==False:<nl><tab><tab><tab><tab>subFound=True<nl><tab><tab><tab><tab>begin=i<nl><tab><tab>  elif z[i]<=0.75 and subFound==True:<nl><tab><tab><tab><tab>subFound=False<nl><tab><tab><tab><tab>maxSubArrays.append((begin,i))<nl><tab> for subarray in maxSubArrays:<nl><tab><tab>  print \"subarray found: index \",subarray[0],\" to \",subarray[1], x[subarray[0]:subarray[1]]<nl><tab> return maxSubArrays","out":"グラフの最大区間を求めるには？"}
{"in":"if isinstance(payload, list):<nl><tab> for m in payload:<nl><tab><tab>  print str(m).split()<nl><nl>else:<nl><tab> print str(m).split()","out":"電子メールのペイロード（文字列形式）, python"}
{"in":"call([\"command\", \"argument\", raw_input(\"enter file name:  \")])","out":"raw_inputを関数の引数として取り込むには？"}
{"in":"how_many = len(combobox.cget('values'))","out":"ttkのコンボボックスでforループを書く方法"}
{"in":"import json<nl><nl>input_json = \"\"\"<nl>[<nl><tab> {<nl><tab><tab>  \"type\": \"1\",<nl><tab><tab>  \"name\": \"name 1\"<nl><tab> },<nl><tab> {<nl><tab><tab>  \"type\": \"2\",<nl><tab><tab>  \"name\": \"name 2\"<nl><tab> },<nl><tab> {<nl><tab><tab>  \"type\": \"1\",<nl><tab><tab>  \"name\": \"name 3\"<nl><tab> }<nl>]\"\"\"<nl><nl># Transform json input to python objects<nl>input_dict = json.loads(input_json)<nl><nl># Filter python objects with list comprehensions<nl>output_dict = [x for x in input_dict if x['type'] == '1']<nl><nl># Transform python object back into json<nl>output_json = json.dumps(output_dict)<nl><nl># Show json<nl>print output_json","out":"pythonでjson配列をフィルタリングする方法"}
{"in":"from collections import defaultdict<nl>from datetime import datetime, timedelta<nl><nl>week_ago = datetime.now() - timedelta(days=7)<nl><nl>author_recent_ratings = dict(Entry.objects.filter(pub_date__gt=week_ago)<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>.order_by('pub_date')<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>.select_related()<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>.values_list('author', 'rating'))<nl><nl>recent_by_rating = defaultdict(list)<nl>for author, rating in author_recent_ratings.iteritems():<nl><tab> recent_by_rating[rating].append(author)","out":"Django 全ての作者を最新の評価でリストアップする。"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>rows, cols = 480, 640<nl>rgb_img = np.zeros((rows, cols, 3), dtype=np.uint8)<nl><nl>rgb_img[:rows\/\/2, :cols\/\/2] = 255<nl><nl>center_slice = rgb_img[1:-1, 1:-1]<nl>left_slice = rgb_img[1:-1, :-2]<nl>right_slice = rgb_img[1:-1, 2:]<nl>up_slice = rgb_img[:-2, 1:-1]<nl>down_slice = rgb_img[2:, 1:-1]<nl><nl>all_equal = (np.all(center_slice == left_slice, axis=-1) &<nl><tab><tab><tab><tab> np.all(center_slice == right_slice, axis=-1) &<nl><tab><tab><tab><tab> np.all(center_slice == up_slice, axis=-1) &<nl><tab><tab><tab><tab> np.all(center_slice == down_slice, axis=-1))<nl><nl>plt.subplot(211)<nl>plt.imshow(rgb_img, interpolation='nearest')<nl>plt.subplot(212)<nl>plt.imshow(all_equal, interpolation='nearest')<nl>plt.show()","out":"PythonとNumpyを使ってカストン・ネイバウト・カーネルでRGB画像を畳み込みます。"}
{"in":"#!\/usr\/bin\/env python<nl># -*- coding: utf-8 -*-<nl><nl>import odf<nl>from odf.opendocument import OpenDocumentText<nl>from odf.element import Element<nl>from odf.text import P<nl>from odf.math import Math<nl>from namespaces import MATHNS<nl><nl><nl>def main():<nl><tab> doc = OpenDocumentText()<nl><tab> p = P(text=u'text')<nl><tab> df = odf.draw.Frame( zindex=0, anchortype='as-char')<nl><tab> p.addElement(df)<nl><tab> doc.text.addElement(p)<nl><nl><tab> formula =u'c=sqrt(a^2+b^2)'<nl><tab> math = Math()<nl><tab> annot = Element(qname = (MATHNS,u'annotation'))<nl><tab> annot.addText(formula, check_grammar=False)<nl><tab> annot.setAttribute((MATHNS,'encoding'), 'StarMath 5.0', check_grammar=False)<nl><tab> math.addElement(annot)<nl><tab> do = odf.draw.Object()<nl><tab> do.addElement(math)<nl><tab> df.addElement(do)<nl><nl><tab> outputfile = u'result'<nl><tab> doc.save(outputfile, True)<nl><nl>if __name__ == '__main__':<nl><tab> main()","out":"odfpyを使用してodt文書に数式を追加するにはどうすればよいですか？"}
{"in":"request.responseHeaders.setRawHeaders(<nl><tab> 'Content-Disposition', ['attachment; filename=\"foo\"'])","out":"Twisted HTTP Serverでファイルのダウンロードを強制的に行うには？"}
{"in":"soup = BeautifulSoup(content, 'lxml')","out":"Beautiful soupとlxml Parserを組み合わせて、Webサイト内のキーワードを検索するにはどうすればよいですか？"}
{"in":"S = [1,2,3,4,5,6]<nl>result = [ (x,y) for x in S for y in S if y%x==0]","out":"セットリレーションのPython実装"}
{"in":"with open('test.txt', 'w') as f:<nl><tab> f.write('{0:10} {1:10}'.format('one', 'two'))","out":"Pythonで、ファイルに保存するときに文字列を整形する方法"}
{"in":"from pylab import *<nl>from matplotlib.path import Path<nl>import matplotlib.patches as patches<nl><nl>data = np.random.rand(100,4)<nl><nl>verts = [(0.3, 0.7), (0.3, 0.3), (0.7, 0.3), (0.7, 0.7)]<nl><nl>path1 = Path(verts)<nl>index = path1.contains_points(data[:,:2])<nl><nl>print data[index, :2]<nl><nl>plot(data[:,0],data[:,1], 'b.')<nl>patch = patches.PathPatch(path1, facecolor='orange', lw=2)<nl>gca().add_patch(patch)<nl>plot(data[index,0], data[index,1], 'r.')<nl>show()","out":"散布図に関心領域を描画し、matplotlibに含まれる点を印刷する。"}
{"in":"import numpy as np<nl>import qutip as qt<nl><nl>N = 2<nl>M = 2<nl><nl>Jp = qt.tensor(qt.qeye(M), qt.jmat(J, '+'))<tab># J+<nl>Jm = qt.tensor(qt.qeye(M), qt.jmat(J, '-'))<tab># J-<nl><nl># angular momentum<nl>Jx = (Jp + Jm) \/ 2.0<nl><nl># initial state<nl>rho0 = qt.tensor(qt.basis(M,0), qt.basis(N+1,N))<nl><nl>R = (1j*0.5*np.pi*Jx).expm()  # rotation transform<nl>rho = R * rho0","out":"PythonのQuTiPで量子オブジェクトの指数を取る方法"}
{"in":"import wx<nl><nl>class MyApp(wx.App):<nl><nl>  def __init__(self):<nl><tab> wx.App.__init__(self, redirect=False)<nl><nl>  def OnInit(self):<nl><tab> self.rootView = wx.Frame(parent=None, id=-1, title=\"Wire Frame\",<nl><tab><tab>pos=(150, 150), size=(350, 250))<nl><tab> self.rootView.Show()<nl><tab> self.SetTopWindow(self.rootView)<nl><tab> dlg = wx.MessageDialog(self.rootView, \"Hi\", \"title\", wx.OK|wx.ICON_ERROR)<nl><tab> #dlg.ShowModal()<nl><tab> if dlg.ShowModal() != wx.ID_OK:<nl><tab><tab>  dlg.Destroy()<nl><tab> return True<nl><nl>if __name__ == \"__main__\":<nl>  app = MyApp()<nl>  app.MainLoop()","out":"wxPython - クリックしないとwx.MessageDialogが消えてしまう。"}
{"in":"import cgi<nl><nl>data = cgi.FieldStorage()<nl><nl>make = data.getvalue('make')<nl>model = data.getvalue('model')<nl><nl>print ( 'Content-type:text\/html\\r<nl>\\r<nl>' )<nl>print ( '''<!DOCTYPE HTML><html lang = \"en\"><nl><tab><tab>  <head><nl><tab><tab><tab><tab><meta charset=\"UTF-8\"><nl><tab><tab><tab><tab><title>Python Response<\/title><nl><tab><tab>  <\/head><nl><tab><tab>  <body><nl><tab><tab><tab><tab><h1>, ''' + make + ', ' + model + ''',<\/h1><nl><tab><tab><tab><tab><a href = \"get.html\">Back<\/a><nl><tab><tab>  <\/body><nl><tab><tab>  <\/html>''' )","out":"Python CGIにおけるHTTP GETパラメータの問題点"}
{"in":"my_str = \"\".join(reversed(my_str))","out":"ライブラリモジュールやダミー変数を使わずにPythonの文字列\/リストの反転を行う。"}
{"in":"stringToQueryLevel1 = ['why this', 'why this code', 'why this code is complex']<nl>for item in stringToQueryLevel1:<nl><tab> print ' ' in item","out":"re.match()を使って部分文字列を検索する"}
{"in":"[Python]","out":"大量のバイトに対するビット操作"}
{"in":"import time, os<nl>os.environ['TZ'] = \"Asia\/Kolkata\"<tab># timezone you want to display graphs in<nl>time.tzset()","out":"python-rrdtool, UTCタイムゾーンでグラフを作成する方法"}
{"in":"db.User.collection.ensure_index(\"name\", 300)","out":"MongoKitでコレクションにTTLインデックスを設定する方法は？"}
{"in":"im2 = cv2.imread(imgPath)<nl>im = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)<nl>surfDetector = cv2.FeatureDetector_create(\"SURF\")<nl>surfDescriptorExtractor = cv2.DescriptorExtractor_create(\"SURF\")<nl>keypoints = surfDetector.detect(im)<nl>(keypoints, descriptors) = surfDescriptorExtractor.compute(im,keypoints)","out":"OpenCVをpythonで使ってディスクリプタ抽出をした例をご存知の方はいらっしゃいますか？"}
{"in":"class Application(UtilApplication):<nl><nl><tab> def __init__(self):<nl><tab><tab>  self.configFiles = ['\/usr\/local\/etc\/foo\/bar.conf']<nl><tab><tab>  UtilApplication.__init__(self)","out":"アスタリスクインターフェースライブラリ starpyの代替設定ファイル"}
{"in":"whatname = \"\"<nl>list_of_names = []<nl><nl>def regc():<nl><tab> global whatname<nl><tab> whatname = raw_input(\"Please introduce your clients first and last name.\")<nl><tab> list_of_names.append(whatname)<nl><tab> contactsav()","out":"プログラムのデータを保存し、それを再び開いたときに再アクセスして見たり編集したりするにはどうすればよいですか？パイソン"}
{"in":"hist(hmag, 30, range=[6.5, 12.5], facecolor='gray', align='mid')","out":"ヒストグラムのデフォルトの x 範囲を変更する matplotlib"}
{"in":"for t in w:<nl><tab> l.append(t.replace(\".\",\"\"))","out":"リストから文字を削除する際のさまざまな出力 - Python"}
{"in":"import operator<nl>primers_unsorted.sort(key=operator.itemgetter(' Construct Number', ' Part Number'))<nl><nl>for row in primers_unsorted:<nl><tab> print(row)","out":"pythonでサブソーティングを行うには？"}
{"in":"cherrypy.tools.sessions","out":"cherrypyでクライアントからの複数のajaxを同時に処理する方法"}
{"in":"post_data = [('name','Gladys'),]<tab>  # a sequence of two element tuples<nl>result = urllib2.urlopen('http:\/\/example.com', urllib.urlencode(post_data))<nl>content = result.read()","out":"django を使って POST リクエストを送信するには？"}
{"in":"criterion = df['year_week'].map(lambda x: len(x)< 6)<nl>df[criterion].index.values","out":"pandasで複雑な操作でデータをサブセットする"}
{"in":"parser.ParseFile(open('sample.xml', 'rb'))","out":"Python 3でのExpatのパース処理"}
{"in":"from os.path import dirname, join<nl>myfile = open(join(dirname(__file__), \"mydatafile.txt\"))","out":"カスタムモジュールでテキストファイルが開けない"}
{"in":"sys.stdin","out":"常時実行中のPythonアプリケーションに引数を渡す"}
{"in":"class ModelFoo(Base):<nl><tab> __tablename__ = 'foo'<nl><tab> id = Column(\"id\", Integer, primary_key=True, autoincrement=True)<nl><tab> os = Column(String, nullable=False)<nl><tab> platform = Column(String)<nl><tab> search_cols = [\"os\", \"value\"]<nl><nl>for k, v in list(Base._decl_class_registry.items()):<nl><tab> if (hasattr(v, \"search_cols\")):<nl><tab><tab>  cols = [getattr(v, val) for val in v.search_cols]<nl><tab><tab>  query = sess.query(*cols)<nl><tab><tab>  solr.add(query.all())","out":"sqlalchemyテーブルのカラムをマーキングする"}
{"in":"plt.axvspan(x, x2, facecolor='g', alpha=0.5)","out":"matplotlib: 背景色を変えることは可能ですか？"}
{"in":"for tablename in cur.execute('SELECT name FROM sqlite_master WHERE type=\"table\";'):<nl><tab> if tablename[0].startswith('conn_'):<nl><tab><tab>  execute_some_query_using_this_table()","out":"Python SQLite3 特定のテーブルだけを抽出する方法"}
{"in":"k=0<nl>yterms = []<nl>while k<=SEG:<nl><tab> yterm = H + aa*m.cosh(xterms[k]\/aa) -aa*m.cosh(DIS\/aa)<nl><tab> yterms.append(yterm)<nl><tab> k+=1<nl>print yterms","out":"以前に生成されたタプルを使って、新しいタプルを生成する方法"}
{"in":"re.findall('ATA((...)*?)AGA', mydna)","out":"特定の部分文字列のみを選択する方法"}
{"in":"word = \"because\"<nl>print(word[0])  # Prints \"b\"<nl>print(word[1])  # Prints \"e\"<nl>print(word[2])  # Prints \"c\"<nl>print(word[3])  # Prints \"a\"<nl>print(word[4])  # Prints \"u\"<nl>print(word[5])  # Prints \"s\"<nl>print(word[6])  # Prints \"e\"","out":"単語全体を複数文字の変数に変更することは可能ですか？"}
{"in":"import matplotlib.pyplot as plt<nl>import pandas as pd<nl><nl>df = pd.read_csv('t.txt', delim_whitespace=True, header=None, parse_dates={'Dates': [1, 2]})<nl><nl>plt.figure()<nl>l_h = []<nl>for identifier in df[0].unique():<nl><tab> h, = plt.plot(df[df[0]==identifier]['Dates'], df[df[0]==identifier][3], label=identifier)<nl><tab> l_h.append(h)<nl>plt.legend(handles=l_h)<nl>plt.show()","out":"Pythonで折れ線グラフを描くにはどうしたらよいですか？"}
{"in":"import datetime<nl><nl>#parse json to get offset(import json; json.load(resonse); etc.)<nl>#offset is gmtoffset + dstoffset<nl>datetime.datetime.utcnow() + datetime.timedelta(seconds = offset)","out":"gmtoffsetからローカルタイムを計算する方法"}
{"in":"adds = map((lambda (j, f, a):<nl>  j.join([f.format(i) for i in parse.options[a]]) if parse.options[a] else ''),<nl>  ((' ', ' -not -path \"{0}\" ', 'exclude'),<nl>  (' -or ', '-path \"{0}\"', 'include')))","out":"マップの引数リストとしてアイテムを渡すには？"}
{"in":"def authGSSServerInit(service):<nl><tab> \"\"\"<nl><tab> Initializes a context for GSSAPI server-side authentication with the given service principal.<nl><tab> authGSSServerClean must be called after this function returns an OK result to dispose of<nl><tab> the context once all GSSAPI operations are complete.<nl><nl><tab> @param service: a string containing the service principal in the form 'type@fqdn'<nl><tab><tab>  (e.g. 'imap@mail.apple.com').<nl><tab> @return: a tuple of (result, context) where result is the result code (see above) and<nl><tab><tab>  context is an opaque value that will need to be passed to subsequent functions.<nl><tab> \"\"\"","out":"authGSSServerInit が keytab から間違ったエントリを探す。"}
{"in":"from matplotlib import pylab as pl<nl><nl>pl.subplot(211)<nl>pl.plot(date, series1, color='black')<nl>pl.plot(date, series2, color='blue')<nl>pl.subplot(212)<nl>pl.plot(date, series3, color='red')<nl>pl.show()","out":"Pythonを使用しています：Pandasを使用して、各サブプロットに複数の系列をプロットする"}
{"in":"p = re.compile(r':((\\\\:|[^:])+):')<nl>print p.match(\":abc'e12\\:3\\:text:\").group(0)","out":"Python regex match escaped char"}
{"in":"class UserProfileadmin(admin.ModelAdmin):<nl><tab> def formfield_for_foreignkey(self, db_field, request, **kwargs):<nl><tab><tab>  if db_field.name == 'hub':<nl><tab><tab><tab><tab>kwargs['queryset'] = Airports.objects.filter(hub=True)<nl><tab><tab>  return super(UserProfileadmin, self).formfield_for_foreignkey(db_field, request, **kwargs)","out":"ブーリアンに基づく Django 管理画面のドロップダウン"}
{"in":"def func(arg1, arg2):<nl><tab> \"\"\"Summary line.<nl><nl><tab> Extended description of function.<nl><nl><tab> Parameters<nl><tab> ----------<nl><tab> arg1 : int<nl><tab><tab>  Description of arg1<nl><tab> arg2 : str<nl><tab><tab>  Description of arg2<nl><nl><tab> Returns<nl><tab> -------<nl><tab> bool<nl><tab><tab>  Description of return value<nl><nl><tab> \"\"\"<nl><tab> return True","out":"PEP8で書かれたPythonのdocstringからAPIを作る"}
{"in":"test3 =((154L, u'SG'), (15L, u'SG3'), (1564L, u'SG'))<nl><nl>print(numpy.asarray(test3, dtype='<U4'))<nl><nl>[[u'154' u'SG']<nl> [u'15' u'SG3']<nl> [u'1564' u'SG']]","out":"タプルをnumpyの配列に変換するとデータが壊れる"}
{"in":"from collections import Counter<nl>from string import punctuation<nl><nl>counter = Counter()<nl>with open('\/tmp\/content_data') as f:<nl>  for line in f:<nl><tab> counter.update(word.strip(punctuation) for word in line.split())<nl><nl>result = dict(counter)<nl><nl># note: because we have<nl>#<tab>isinstance(counter, dict)<nl># you may as well leave the result as a Counter object<nl><nl>print result","out":"pythonを使ってテキストファイルの単語数を調べる"}
{"in":"query = raw_input(\"enter binary number \")<nl><nl>try:<nl><tab> is_bin = int(query,2)<nl><tab> is_bin = True<nl><tab> print \"correct number\"<nl>except ValueError:<nl><tab> is_bin = False<nl><tab> print \"not a binary number\"","out":"pythonで入力を制限して、0か1しか入力できないようにするにはどうしたらいいですか？"}
{"in":"paraText = soup.find( text = re.compile ('Running Time:') )<nl>print paraText.findNext('dd')","out":"findNextSiblingsの使い方がよくわからない。"}
{"in":"for match in matches:<nl><tab> first_names.append(match[0])<nl><tab> last_names.append(match[1])","out":"regex、findall、groupを使ったPythonのパターンマッチング"}
{"in":"def crawler():<nl><tab> while True:<nl><tab><tab>  x = tasks.get()<nl><tab><tab>  try:<nl><tab><tab><tab><tab>print \"Crawler: \",x<nl><tab><tab>  finally:<nl><tab><tab><tab><tab>tasks.task_done()","out":"geventはredisのソケット要求をブロックします。"}
{"in":"import matplotlib.pyplot as plt<nl>import networkx as nx<nl>import random<nl><nl>G = nx.gnp_random_graph(10,0.3)<nl>for u,v,d in G.edges(data=True):<nl><tab> d['weight'] = random.random()<nl><nl>edges,weights = zip(*nx.get_edge_attributes(G,'weight').items())<nl><nl>pos = nx.spring_layout(G)<nl>nx.draw(G, pos, node_color='b', edgelist=edges, edge_color=weights, width=10.0, edge_cmap=plt.cm.Blues)<nl>plt.savefig('edges.png')","out":"ネットワークxのエッジを重みで色分けする。"}
{"in":"cbaxes = fig.add_axes([1, 0.15, 0.03, 0.7])<nl>plt.colorbar(img, label=r\"Height (cm)\",format='%1.1f', ax=ax1, cax=cbaxes)","out":"カラーバーを第二のY軸で使用する"}
{"in":"def find_difference(list_of_files, block_size=1000):<nl><tab> fs=[open(f,'rb') for f in list_of_files]<nl><tab> while True:<nl><tab><tab>  first=True<nl><tab><tab>  for f in fs:<nl><tab><tab><tab><tab>if first:<nl><tab><tab><tab><tab><tab> first=False<nl><tab><tab><tab><tab><tab> s1=f.read(block_size)<nl><tab><tab><tab><tab><tab> end=(s1==b'')<nl><tab><tab><tab><tab><tab> continue<nl><tab><tab><tab><tab>s2=f.read(block_size)<nl><tab><tab><tab><tab>if s1!=s2:<nl><tab><tab><tab><tab><tab> return True<nl><tab><tab><tab><tab>if end and (s2!=b''):<nl><tab><tab><tab><tab><tab> end=False<nl><tab><tab>  if end:<nl><tab><tab><tab><tab>return False","out":"python3での2つ以上のファイルの比較"}
{"in":"set_hint_string('append', '')","out":"pynotifyで共通のタイトルを持つ通知をマージする方法は？"}
{"in":"# Do everything needed to start the game<nl># For dramatic pacing, any of these might be scheduled to be<nl># called in a second or so, using pyglet.clock.schedule_once<nl>world.add(player)<nl>camera.to_follow(player)<nl>world.add(scoredisplay)<nl><nl># Finally, remove the main menu from the world<nl># This will stop showing it on screen<nl># and it will remove its keyboard event handler<nl>world.remove_item(self)","out":"pygletでシーンを切り替える"}
{"in":"class Server(object):<nl><tab> _cp_config = {<nl><tab><tab>  'tools.sessions.on': True,<nl><tab><tab>  'tools.auth.on': True<nl><tab> }<tab><nl><tab> auth = AuthController()<tab><tab><nl><tab> @cherrypy.expose<nl><tab> @require()<nl><tab> def index(self):<nl><tab><tab>  f = open (\"file.txt\",\"r\")<nl><tab><tab>  link = f.read()<nl><tab><tab>  f.close()<nl><tab><tab>  myText = \"Hello World\" <nl><tab><tab>  html = \"\"\"<nl><tab><tab>  <html><nl><tab><tab><tab><tab><body><nl><tab><tab><tab><tab><tab> <p>%s<\/p><tab><tab><tab> <nl><tab><tab><tab><tab><tab> <a href=\"%s\" ><img src=\"images\/go_online.png\"><\/a><nl><tab><tab><tab><tab><\/body><nl><tab><tab>  <\/html><nl><tab><tab>  \"\"\" %(myText, link)<tab><tab>  <nl><tab><tab>  return html<nl><tab> index.exposed = True","out":"pythonの変数をhtmlの変数に渡すには？"}
{"in":"d1 = datetime.datetime.now() + datetime.timedelta(minutes=15)<nl>d2 = datetime.datetime.now() + datetime.timedelta(hours=1)","out":"Pythonで、今から15分後のdatetimeを作るにはどうしたらいいでしょうか？今から1時間後？"}
{"in":"import curses<nl>import time<nl><nl>scr = curses.initscr()<nl>while True:<nl><tab> try:<nl><tab><tab>  scr.addstr(0, 0, str(time.time()))<nl><tab><tab>  scr.refresh()<nl><tab> except KeyboardInterrupt: break<nl>curses.endwin()","out":"cursesを使ってコマンドラインでステートメントを繰り返し表示するにはどうしたらいいですか？"}
{"in":"import pygame,sys<nl>from pygame import *<nl><nl>WIDTH = 480<nl>HEIGHT = 480<nl>WHITE = (255,255,255) #RGB<nl>BLACK = (0,0,0) #RGB<nl><nl>pygame.init()<nl>screen = display.set_mode((WIDTH,HEIGHT),0,32)<nl>display.set_caption(\"Name of Application\")<nl>screen.fill(WHITE)<nl>timer = pygame.time.Clock()<nl>pos_on_screen, radius = (50, 50), 20<tab> <nl>while True:<nl><tab> for event in pygame.event.get():<nl><tab><tab>  if event.type == QUIT:<nl><tab><tab><tab><tab>pygame.quit()<nl><tab><tab><tab><tab>sys.exit()<nl><tab> timer.tick(60) #60 times per second you can do the math for 17 ms<nl><tab> draw.circle(screen, BLACK, pos_on_screen, radius)<nl><tab> display.update()","out":"Pythonで17msごとに画面上に点を描く？"}
{"in":"lxml.etree.Comment()","out":"lxmlを使用してプログラム的にコメント要素をインスタンス化するにはどうすればよいですか？"}
{"in":"class Category(models.Model):<nl><tab> name = models.CharField('Name', max_length=255)<nl><nl><tab> class Meta:<nl><tab><tab>  db_table = 'tbl_category'<nl><nl>class Entry(models.Model):<nl><tab> category = models.ForeignKey(Category, db_column='id_tbl_category')<nl><tab> contents = models.TextField('Contents')<nl><nl><tab> class Meta:<nl><tab><tab>  db_table = 'tbl_entry'","out":"Django テーブル名と外部キーフィールドをカスタマイズする方法"}
{"in":"class single_return_format(object):<nl><nl><tab> def __init__(self, func):<nl><tab><tab>  self._func = func<nl><nl><tab> def __get__(self, instance, owner):<nl><tab><tab>  return SimpleFormMethod(instance, self._func)<nl><nl><nl>class SimpleFormMethod(object):<nl><nl><tab> def __init__(self, instance, func):<nl><tab><tab>  self._instance = instance<nl><tab><tab>  self._func = func<nl><nl><tab> def __call__(self, *args, **kwargs):<nl><tab><tab>  return self._func(self._instance, *args, **kwargs)<nl><nl><tab> @property<nl><tab> def standard_format(self):<nl><tab><tab>  return lambda *args, **kwargs: (self._func(self._instance, *args, **kwargs), )<nl><nl><nl>class _SomeClass(object):<nl><nl><tab> def __init__(self):<nl><tab><tab>  self._amount_to_add = 1<nl><nl><tab> @single_return_format<nl><tab> def add_one(self, x):<nl><tab><tab>  return x+self._amount_to_add<nl><nl><nl>obj = _SomeClass()<nl>assert obj.add_one(3) == 4<nl>assert obj.add_one.standard_format(3) == (4, )","out":"Pythonのデコレーターを使ってメソッドにメソッドを追加する"}
{"in":"from multiprocessing import Process<nl>import os<nl><nl>def info(title):<nl><tab> print title<nl><tab> print 'module name:', __name__<nl><tab> print 'parent process:', os.getppid()<nl><tab> print 'process id:', os.getpid()<nl><nl>def f(name):<nl><tab> os.setuid(1000)<nl><tab> info('function f')<nl><tab> print 'hello', name<nl><tab> os.system('id')<nl><nl>if __name__ == '__main__':<nl><tab> info('main line')<nl><tab> p = Process(target=f, args=('bob',))<nl><tab> p.start()<nl><tab> p.join()","out":"Pythonで、異なるユーザーでサブプロセスを呼び出すにはどうすればよいですか？"}
{"in":"cx_Oracle.connect(u'hr\/XXXXX@local_xe')","out":"Python上でcx_Oracleを使用してOracleデータベースに接続する。"}
{"in":"return (resp.text, resp.status_code, resp.headers.items())","out":"Flaskからrequests.Responseオブジェクトを返す。"}
{"in":"s.decode('string_escape')","out":"PythonでR' \\x74op'のような16進数アスキー混合文字列を'top'に変換する。"}
{"in":"import urllib2<nl>import BeautifulSoup<nl>import MySQLdb<nl><nl>f = urllib2.urlopen('http:\/\/www.python.org\/')<nl>soup=BeautifulSoup.BeautifulSoup(f.read())<nl>title=soup.find('title')<nl>print(title.string)<nl><nl>connection=MySQLdb.connect(<nl><tab> host='HOST',user='USER',<nl><tab> passwd='PASS',db='MYDB')<nl>cursor=connection.cursor()<nl><nl>sql='''CREATE TABLE IF NOT EXISTS foo (<nl><tab><tab><tab>  fooid int(11) NOT NULL AUTO_INCREMENT,<nl><tab><tab><tab>  title varchar(100) NOT NULL,<nl><tab><tab><tab>  PRIMARY KEY (fooid)<nl><tab><tab> )'''<nl>cursor.execute(sql)<nl><nl>sql='INSERT INTO foo (title) VALUES (%s)'<nl>args=[title.string]<nl>cursor.execute(sql,args)<nl>cursor.close()<nl>connection.close()","out":"Pythonスクリプトでtitleタグの内容を取得する。"}
{"in":"for s in self.level.sprites:<nl>  spritelayer.fill((0), s.rect)","out":"pygameのアルファレイヤーを効率よくクリアするにはどうしたらいいですか？"}
{"in":"from google.appengine.api import users<nl>from google.appengine.api.namespace_manager import set_namespace<nl><nl>class ClientClass(webapp.RequestHandler):<nl>  def get(self):<nl><tab> # For this example let's assume the user_id is your unique id.<nl><tab> # You could just as easily use a parameter you are passed.<nl><tab> user = users.get_current_user()<nl><tab> if user:<nl><tab><tab> # If there is a user, use their queue.  Otherwise the global queue.<nl><tab><tab> set_namespace(user.user_id())<nl><nl><tab> item = QueueItem.pop()<nl><tab> self.response.out.write(str(item))<nl><nl><tab> QueueItem.push('The next task.')","out":"名前空間をサポートするFIFOキューを実装する方法"}
{"in":"def get_queryset(self):<nl><tab> qs = super(SomeObjectDataTableView, self).get_queryset()<nl><tab> return qs.select_related().annotate(items_count=Count('items'))","out":"django-eztablesで集計を行う。"}
{"in":"from scipy import misc<nl>import glob<nl><nl>for image_path in glob.glob(\"\/home\/adam\/*.png\"):<nl><tab> image = misc.imread(image_path)<nl><tab> print image.shape<nl><tab> print image.dtype","out":"PNGファイルをNumpyにインポートする？"}
{"in":"import cv2<nl>img = cv2.imread(\"lenna.png\")<nl>crop_img = img[200:400, 100:300] # Crop from x, y, w, h -> 100, 200, 300, 400<nl># NOTE: its img[y: y + h, x: x + w] and *not* img[x: x + w, y: y + h]<nl>cv2.imshow(\"cropped\", crop_img)<nl>cv2.waitKey(0)","out":"Pythonを使ってOpenCVで画像を切り抜く方法"}
{"in":"def microtime(dt):<nl><tab> time.mktime(dt.timetuple()) + dt.microsecond \/ 1000000.0","out":"Pythonがある日付からマイクロタイムを取得"}
{"in":"__getattribute__()","out":"pythonでアクセスをハッシュにするにはどうすればいいのでしょうか？"}
{"in":"test = raw_input(\"Put in a word\")","out":"Python 2.7.9で入力(raw_input)を変数に保存して後で使うには？"}
{"in":"def get_items(cheapness):<nl><tab> \"\"\" Return a list of (item, (price, count)) tuples that are the given<nl><tab> cheapness. Note that the second element of the tuple is another tuple. \"\"\"<nl><nl><tab> if cheapness == 'CHEAP':<nl><tab><tab>  return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price < 20]<nl><tab> elif cheapness == 'MODERATE':<nl><tab><tab>  return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price > 20 and price < 100]<nl><tab> elif cheapness == 'EXPENSIVE':<nl><tab><tab>  return [(item, (price,count)) for (item, (price,count)) in inventory.items() if price > 100]","out":"これをリストとして返すにはどうしたらよいでしょうか"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import pygtk<nl>pygtk.require('2.0')<nl>import gtk<nl><nl>class ComboBoxExample:<nl><tab> def __init__(self):<nl><tab><tab>  window = gtk.Window()<nl><tab><tab>  window.connect('destroy', lambda w: gtk.main_quit())<nl><tab><tab>  combobox = gtk.combo_box_new_text()<nl><tab><tab>  window.add(combobox)<nl><tab><tab>  combobox.append_text('Select a pie:')<nl><tab><tab>  combobox.append_text('Apple')<nl><tab><tab>  combobox.append_text('Cherry')<nl><tab><tab>  combobox.append_text('Blueberry')<nl><tab><tab>  combobox.append_text('Grape')<nl><tab><tab>  combobox.append_text('Peach')<nl><tab><tab>  combobox.append_text('Raisin')<nl><tab><tab>  combobox.connect('changed', self.changed_cb)<nl><tab><tab>  combobox.set_active(0)<nl><tab><tab>  window.show_all()<nl><tab><tab>  return<nl><nl><tab> def changed_cb(self, combobox):<nl><tab><tab>  model = combobox.get_model()<nl><tab><tab>  index = combobox.get_active()<nl><tab><tab>  if index:<nl><tab><tab><tab><tab>print 'I like', model[index][0], 'pie'<nl><tab><tab>  return<nl><nl>def main():<nl><tab> gtk.main()<nl><tab> return<nl><nl>if __name__ == \"__main__\":<nl><tab> bcb = ComboBoxExample()<nl><tab> main()","out":"Python GTK コンボボックスへの信号の追加"}
{"in":"lines = open('wordprob.txt','r').readlines()<nl>words = open('StdWord.txt','r').readlines()<nl>for i,line in enumerate(lines):<nl><tab><tab>  v = [eval(s) for s in line.split()]<nl><tab><tab>  if v[0] > v[1]:<nl><tab><tab><tab><tab><tab> print words[i].strip()","out":"Pythonで2つのファイルをきれいに並列にループさせる方法"}
{"in":"bikes['dayflag'] = (bikes.ts.dt.hour > 5) & (bikes.ts.dt.hour <18)","out":"Pandasを使って昼夜旗を作る"}
{"in":"i=0<nl><nl>while i < len(text):<nl><tab> print text[i]<nl><tab> i += 1","out":"whileループを利用して、文字列から1文字ずつ印刷する。"}
{"in":"import os<nl>os.sys.path.append(os.path.dirname(os.path.realpath(__file__))+ '\/..\/..\/')","out":"パッケージ内の \"main \"モジュールからパッケージモジュールをインポートする方法"}
{"in":"from subprocess import Popen, PIPE, STDOUT<nl><nl>#do some stuff <nl>data = do_some_computation_from_file<nl><nl>#prepare your executable using subprocess.Popen<nl>exe = Popen(['your_executable'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)<nl><nl>#pass in the computed data to the executable and grap the result<nl>result = exe.communicate(input=data)[0]","out":"Pythonが端末のパラメータとして渡された実行ファイルにデータを送信する。"}
{"in":"for i_t in range(0, np.shape(t)[1]):<nl><tab> ax.clear()<nl><tab> plt.hold(True)<nl><tab> #<tab> plot limits<nl><tab> ax.set_xlim(-(max(q0) + bodies[-1].L), +(max(q0) + bodies[-1].L))<nl><tab> ax.set_ylim(-(max(q0) + bodies[-1].L), +(max(q0) + bodies[-1].L))<nl><tab> for i in range(0, N):<nl><tab><tab>  ax.plot(x_matrix[i_t, i], y_matrix[i_t, i], 's', color=colors[0, i])<nl><nl><tab> plt.pause(0.0001)","out":"matplotlib で二重の for ループを使ったアニメーションプロット"}
{"in":"import csv<nl>foo_in = open('bar.csv', 'rU')<nl>readfoo = csv.reader(foo_in)<nl><nl>for row in readfoo:<nl><tab> spam = row[0]<nl><tab> eggs = row[1]<nl><tab> foobar = row[2]<nl><tab> new_data = dict()<nl><tab> new_data.setdefault(spam, {})<nl><tab> new_data[spam].setdefault(eggs, []).append(foobar)<nl><tab> print new_data","out":"CSVから2つの辞書を作成するか、3つの行から辞書を作成するか。"}
{"in":"from urllib2 import Request, urlopen<nl>from pyPdf import PdfFileWriter, PdfFileReader<nl>from StringIO import StringIO<nl><nl>url = \"http:\/\/www.silicontao.com\/ProgrammingGuide\/other\/beejnet.pdf\"<nl>writer = PdfFileWriter()<nl><nl>remoteFile = urlopen(Request(url)).read()<nl>memoryFile = StringIO(remoteFile)<nl>pdfFile = PdfFileReader(memoryFile)<nl><nl>for pageNum in xrange(pdfFile.getNumPages()):<nl><tab><tab>  currentPage = pdfFile.getPage(pageNum)<nl><tab><tab>  #currentPage.mergePage(watermark.getPage(0))<nl><tab><tab>  writer.addPage(currentPage)<nl><nl><nl>outputStream = open(\"output.pdf\",\"wb\")<nl>writer.write(outputStream)<nl>outputStream.close()","out":"pyPdfでpdfのUrlを開く"}
{"in":"import ipdb; ipdb.set_trace()","out":"Python - Matlab\/Octaveのキーボード関数に相当するもの？"}
{"in":"import contextlib<nl>import selenium.webdriver as webdriver<nl>import lxml.html as LH<nl>import lxml.html.clean as clean<nl><nl>url=\"http:\/\/www.yahoo.com\"<nl>ignore_tags=('script','noscript','style')<nl>with contextlib.closing(webdriver.Firefox()) as browser:<nl><tab> browser.get(url) # Load page<nl><tab> content=browser.page_source<nl><tab> cleaner=clean.Cleaner()<nl><tab> content=cleaner.clean_html(content)<tab> <nl><tab> with open('\/tmp\/source.html','w') as f:<nl><tab><tab> f.write(content.encode('utf-8'))<nl><tab> doc=LH.fromstring(content)<nl><tab> with open('\/tmp\/result.txt','w') as f:<nl><tab><tab>  for elt in doc.iterdescendants():<nl><tab><tab><tab><tab>if elt.tag in ignore_tags: continue<nl><tab><tab><tab><tab>text=elt.text or ''<nl><tab><tab><tab><tab>tail=elt.tail or ''<nl><tab><tab><tab><tab>words=' '.join((text,tail)).strip()<nl><tab><tab><tab><tab>if words:<nl><tab><tab><tab><tab><tab> words=words.encode('utf-8')<nl><tab><tab><tab><tab><tab> f.write(words+'<nl>')","out":"Seleniumを使用して、ウェブページからすべての可視テキストを取得する。"}
{"in":"max_len = 0<nl>max_key = \"\"<nl>for key in d:<nl><tab> cur_len = len(d[key])<nl><tab> if cur_len>max_len:<nl><tab><tab>  max_key = key<nl><tab><tab>  max_len = cur_len<nl>print max_key","out":"辞書のどのキーが最も長い値のリストを持つかを見つけるにはどうすればよいですか？"}
{"in":"def group(self, user):<nl><tab> groups = []<nl><tab> for group in user.groups.all():<nl><tab><tab>  groups.append(group.name)<nl><tab> return ' '.join(groups)<nl>group.short_description = 'Groups'<nl><nl>list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'group')<nl># The last argument will display a column with the result of the \"group\" method defined above","out":"管理画面にユーザーグループを表示する？"}
{"in":"with open(\"input.csv\", \"r\") as input_file:<nl><tab> header = input_file.readline()[:-1] #this is to remove trailing '<nl>'<nl><tab> header += \",Table exists?\"<nl><tab> output_lines = [header]<nl><nl><tab> for line in input_file:<nl><tab><tab><tab>output_lines.append(line[:-1])<nl><tab><tab><tab>if 'table' in line.split(\",\")[3]:<nl><tab><tab><tab><tab> output_lines[-1]+=\",table exists\"<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab> output_lines[-1]+=\",No table found\"<nl><nl>with open(\"output.csv\", \"w\") as output_file:<nl><tab> output_file.write(\"<nl>\".join(output_lines))","out":"要素に関連するif関数の結果をcsvの最終カラムに追加する。"}
{"in":"graphdays = [pivot_table[(m)].astype(float).values for m in range(1, len(Days)+1)]<nl>days_dict = OrderedDict(list(zip(Days, graphdays)))","out":"リストからのOrderedDictの作成"}
{"in":"import pyglet<nl><nl>key = pyglet.window.key<nl><nl>win = pyglet.window.Window()<nl>keyboard = key.KeyStateHandler()<nl>win.push_handlers(keyboard)<nl><nl>print keyboard[key.UP] and keyboard[key.LEFT]","out":"pygletで2つのキーを同時に検出する（python)"}
{"in":"if self._log.GetNumberOfLines() > MAX_LINES:<nl><tab><tab>  if self._log.GetLineText(DELETION_POINT) != DELETION_LINE:<nl><tab><tab><tab><tab>start = self._log.XYToPosition(0, DELETION_POINT)<nl><tab><tab><tab><tab>self._log.SetInsertionPoint(start)<nl><tab><tab><tab><tab>self._log.WriteText(DELETION_LINE)<nl><tab><tab>  while (self._log.GetNumberOfLines() > MAX_LINES):<nl><tab><tab><tab><tab>start = self._log.XYToPosition(0, DELETION_POINT+1)<nl><tab><tab><tab><tab>len = self._log.GetLineLength(DELETION_POINT+1)<nl><tab><tab><tab><tab>self._log.Remove(start, start+len+1)","out":"TextCtrlの途中から行を削除する。"}
{"in":"from time import *<nl><nl># make a time string<nl>t = strftime('%H%M%S', localtime())<nl><nl># convert time string to unix time (seconds since epoch)<nl>mktime(localtime()[:3] + strptime(t, '%H%M%S')[3:])","out":"python 時刻からPosix時刻を生成する。"}
{"in":"import win32com.client <nl>import os<nl>import re<nl>rootdir ='C:\\Users\\IdaLim\\Desktop\\docs'<tab>  <nl>try:<nl><tab> app = win32com.client.Dispatch('Word.Application')<nl><tab> app.Visible = True<nl><tab> for subdir, dirs, files in os.walk(rootdir):<nl><tab><tab>  for file in files:<nl><tab><tab><tab><tab>fullpath = os.path.join(*[subdir, file])<nl><tab><tab><tab><tab>if file.endswith(\".doc\"):<nl><tab><tab><tab><tab><tab> out_name = file.replace(\"doc\", r\"txt\")<nl><tab><tab><tab><tab><tab> in_file = os.path.abspath(rootdir + \"\\\\\" + file)<nl><tab><tab><tab><tab><tab> out_file = os.path.abspath(rootdir + \"\\\\\" + out_name)<nl><tab><tab><tab><tab><tab> doc = app.Documents.Open(in_file)<nl><tab><tab><tab><tab><tab> content = doc.Content.Text<nl><tab><tab><tab><tab><tab> print 'Exporting', out_file<nl><tab><tab><tab><tab><tab> doc.SaveAs(out_file, FileFormat=7)<nl><tab><tab><tab><tab><tab> doc.Close()<nl>except Exception, e:<nl><tab> print e<nl>finally:<nl><tab> app.Quit()","out":"Pythonを使って.docファイルからプレーンテキストを取得する方法は？"}
{"in":"savefig()","out":"numpyで3Dを2Dにプロットする？"}
{"in":"letters = raw_input(\"Please enter forbidden letters\")<nl>words = set(open(\"p.txt\", \"r\").read().split())<nl>for word in words:<nl>  if all(letter not in word for letter in letters):<nl><tab> print word","out":"文字列のない単語を探すには？"}
{"in":"import Polygon, numpy<nl><nl># Here I extracted and combined some contours and created a convex hull from it.<nl># Now I wanna check whether a contour acquired differently intersects with this hull or not.<nl><nl>for contour in contours:  # The result of cv2.findContours is a list of contours<nl><tab> contour1 = contour.flatten()<nl><tab> contour1 = numpy.reshape(contour1, (int(contour1.shape[0]\/2),-1))<nl><tab> poly1 = Polygon.Polygon(contour1)<nl><nl><tab> hull = hull.flatten()  # This is the hull is previously constructued<nl><tab> hull = numpy.reshape(hull, (int(hull.shape[0]\/2),-1))<nl><tab> poly2 = Polygon.Polygon(hull)<nl><nl><tab> if (poly1 & poly2).area()<= some_max_val:<nl><tab><tab>  some_operations","out":"2次元のnumpy ndarraysの交点。"}
{"in":"# x = range(6)<nl>x = [\"this\", \"is\", \"an\", \"example\", \"list\"]<nl><nl>for prv, nxt in zip(x, x[1:]):<nl><tab> print prv, nxt","out":"リストから連続した要素を選択する方法は？"}
{"in":"PairRDDFunctions.join()","out":"Sparkでデータセットを結合する"}
{"in":"def my_function(*args):<nl><tab>if len(args) == 0:<nl><tab><tab> return x[y[args[0]]]<nl><tab>return [x[y[a]] for a in args]","out":"dictとlistから引数を解凍する"}
{"in":"result=[dictionary[k] for k in keys if k in dictionary]","out":"キーがリストになっている辞書の値を取得する方法"}
{"in":"from traits.api import Instance, Str, HasTraits<nl><nl>class Person(HasTraits):<nl><tab> name = Str(\"hooked\")<nl><nl>class Chair(HasTraits):<nl><tab> sitting = Instance(Person, kw = {})<nl><nl>t = Chair()<nl>print t.sitting.name","out":"Enthought特性のデフォルトインスタンスのインスタンス化"}
{"in":"s = 'caaat caat cat kittycaat, rack, smaaack'<nl>x = 0<nl>for i in s.split():<nl><tab> if i.count('a') > x:<nl><tab><tab>  x = i.count('a')<nl><tab><tab>  word = i<nl>print word","out":"aが多いリストにある単語を検索する"}
{"in":"for k in wlist:<nl><tab> if k != i:<nl><tab><tab>  k.send(data)","out":"Pythonソケットのデータ送信"}
{"in":"def change_window(browser):<nl><tab> \"\"\"<nl><tab> Simple window switcher without the need of playing with ids.<nl><tab> @param browser: Current browser instance<nl><tab> \"\"\"<nl><tab> curr = browser.current_window_handle<nl><tab> all_handles = browser.window_handles<nl><tab> for handle in list(set([curr]) - set(all_handles)):<nl><tab><tab>  return browser.switch_to_window(handle)","out":"Selenium IDE の構文を Python Webdriver に変換する。"}
{"in":"firstList = [1,2,3]<nl>secondList=[]<nl><nl>counter = len(firstList)-1<nl><nl>while counter >= 0:<nl><tab> secondList.append(firstList[counter])<nl><tab> counter -= 1","out":"whileループを使ってリストを逆引きする方法は？"}
{"in":"five_image = (display_image,)","out":"タプルに値を割り当てる"}
{"in":"from collections import Counter<nl>import sys<nl>from random import randint<nl><nl># Python 2\/3 compatibility<nl>if sys.hexversion >= 0x3000000:<nl><tab> inp = input<nl><tab> rng = range<nl>else:<nl><tab> inp = raw_input<nl><tab> rng = xrange<nl><nl>def get_int(prompt):<nl><tab> while True:<nl><tab><tab>  try:<nl><tab><tab><tab><tab>return int(inp(prompt))<nl><tab><tab>  except ValueError:<nl><tab><tab><tab><tab>pass<nl><nl>def main():<nl><tab> sides = get_int(\"How many sides does your die have? \")<nl><tab> times = get_int(\"How many times do you want to roll? \")<nl><tab> results = Counter(randint(1, sides) for roll in rng(times))<nl><nl>if __name__==\"__main__\":<nl><tab> main()","out":"シミュレーターでサイコロを振る面は無制限"}
{"in":"for line in file:<nl><tab> if username == line.strip():<nl><tab><tab> validusername = True<nl><tab><tab> break","out":"readlinesを使用せずにテキストファイルの行数を取得する。"}
{"in":"\" Play a WAVE file. \"<nl><nl>import pyaudio<nl>import wave<nl>import sys<nl><nl>chunk = 1024<nl><nl>if len(sys.argv) < 2:<nl><tab> print \"Plays a wave file.<nl><nl>\" +\\<nl><tab><tab><tab> \"Usage: %s filename.wav\" % sys.argv[0]<nl><tab> sys.exit(-1)<nl><nl>wf = wave.open(sys.argv[1], 'rb')<nl><nl>p = pyaudio.PyAudio()<nl><nl># open stream<nl>stream = p.open(format =<nl><tab><tab><tab><tab><tab> p.get_format_from_width(wf.getsampwidth()),<nl><tab><tab><tab><tab><tab> channels = wf.getnchannels(),<nl><tab><tab><tab><tab><tab> rate = wf.getframerate(),<nl><tab><tab><tab><tab><tab> output = True)<nl><nl># read data<nl>data = wf.readframes(chunk)<nl><nl># play stream<nl>while data != '':<nl><tab> stream.write(data)<nl><tab> data = wf.readframes(chunk)<nl><nl>stream.close()<nl>p.terminate()","out":"pythonでWindows（XP～Windows7）のオーディオ再生？"}
{"in":"class MyMixIn(object):<nl><tab> def op_custom(self):<nl><tab><tab>  print(\"foo\")<nl><nl>class MyOperation(models.Model, MyMixIn):<nl><tab> def op_normal(self):<nl><tab><tab>  print(\"bar\")","out":"他のモジュールから Django クラスに新しいメソッドを追加する方法は？"}
{"in":"def myrepl(match):<nl><tab> num = int(match.group(1))<nl><tab> # Do something here<nl><tab> return str(num) # this will replace the $url[2]<nl><nl>mystr = \"this is $url[2] a string\"<nl><nl>print re.sub(r'\\$url\\[([0-9])\\]', myrepl, mystr, flags=re.IGNORECASE)","out":"PythonのRegEx置換"}
{"in":"def _accumulate_stress(betweenness,S,P,sigma,s):<nl><tab> delta = dict.fromkeys(S,0)<nl><tab> while S:<nl><tab><tab>  w = S.pop()<nl><tab><tab>  for v in P[w]:<nl><tab><tab><tab><tab>delta[v] += (1.0+delta[w])<nl><tab><tab>  if w != s:<nl><tab><tab><tab><tab>betweenness[w] += sigma[w]*delta[w]<nl><tab> return betweenness","out":"Networkxを用いた頂点の属する最短経路の数の計算の高速化"}
{"in":"import numpy as np<nl>import pylab as pl<nl>from matplotlib.colors import hsv_to_rgb<nl><nl>V, H = np.mgrid[0:1:100j, 0:1:300j]<nl>S = np.ones_like(V)<nl>HSV = np.dstack((H,S,V))<nl>RGB = hsv_to_rgb(HSV)<nl>pl.imshow(RGB, origin=\"lower\", extent=[0, 360, 0, 1], aspect=150)<nl>pl.xlabel(\"H\")<nl>pl.ylabel(\"V\")<nl>pl.title(\"$S_{HSV}=1$\")<nl>pl.show()","out":"matplotlib における 2 次元 hsv 色空間"}
{"in":"x = struct.pack(4*'B' + 'HB'[ALPHA<256] + 4*'B', *data)","out":"pythonで整数のリストを2進数の \"文字列 \"に変換する。"}
{"in":"\"<nl>This is a Google style docs.<nl>...<nl>...<nl>Raises:<nl><tab> TypeError: 1. foo() missing 1 required positional argument.<nl><tab><tab><tab><tab><tab>2. key must be a numeric value.<nl><tab><tab><tab><tab><tab>3. ...<nl><tab> KeyError:  1. bar key is missing.<nl><tab><tab><tab><tab><tab>2. ...<nl>\"","out":"似たような例外を、どのようにdocstringにまとめればよいですか？"}
{"in":"def strtr(strng, replace):<nl><tab> buffer = []<nl><tab> i, n = 0, len(strng)<nl><tab> while i < n:<nl><tab><tab>  match = False<nl><tab><tab>  for s, r in replace.items():<nl><tab><tab><tab><tab>if strng[i:len(s)+i] == s:<nl><tab><tab><tab><tab><tab> buffer.append(r)<nl><tab><tab><tab><tab><tab> i = i + len(s)<nl><tab><tab><tab><tab><tab> match = True<nl><tab><tab><tab><tab><tab> break<nl><tab><tab>  if not match:<nl><tab><tab><tab><tab>buffer.append(strng[i])<nl><tab><tab><tab><tab>i = i + 1<nl><tab> return ''.join(buffer)","out":"phpのstrtrをpythonで使う"}
{"in":"import argparse<nl>parser = argparse.ArgumentParser(add_help=False)<nl>parser.add_argument('-t', '--test', action=\"store_true\")<nl>parser.add_argument('params', nargs='+')<nl>args = parser.parse_args()<nl>if args.test is True:<nl><tab> intro = None<nl>elif args.params:<nl><tab> pass  # process the params here<nl>else:<nl><tab> pass  # no params whatsoever","out":"argparseで引数が足りない場合の処理方法は？"}
{"in":"class ValidationForm(forms.Form):<nl><tab> email = forms.EmailField(label = 'Email', error_messages = {'invalid': 'Your Email Confirmation Not Equal With Your Email'})<nl><tab> email_confirmation = forms.EmailField(label = 'Email Confirmation')<nl><nl><tab> def clean_email(self):<nl><tab><tab> if email != email_confirmation:<nl><tab><tab><tab> raise ValidationError(self.fields['email'].error_messages['invalid'])<nl><tab><tab> return email","out":"Django - フォームでカスタムエラーメッセージを追加する方法は？"}
{"in":"try:<nl><tab> WindowsError<nl>except NameError:<nl><tab> WindowsError = None","out":"ShutilはWindows上でWindowsErrorをインポートできません。"}
{"in":"def resizeConsoleEvent(self, resizeObject):<nl><tab> if not self.keyPressDown and not self.blockResizing:<nl><tab><tab>  # calculate maximum columns and lines based on a '|' character<nl><tab><tab>  font = self.ui.console.currentFont()<nl><tab><tab>  fmetric = QtGui.QFontMetrics(font)<nl><tab><tab>  fontPixelWidth = fmetric.width(\"|\")<nl><tab><tab>  fontPixelHeight = fmetric.height()<nl><tab><tab>  availableWidthPixels = int(self.ui.console.geometry().width())<nl><tab><tab>  availableHeightPixels = int(self.ui.console.geometry().height())<nl><tab><tab>  # Calculate columns and lines w\/ adjustments for rounding<nl><tab><tab>  self.consoleColumns = int(availableWidthPixels \/ fontPixelWidth) + 1<nl><tab><tab>  self.consoleLines = int(availableHeightPixels \/ fontPixelHeight) - 3<nl><nl><tab><tab>  # resize the pyte screen I'm using with the calculated information<nl><tab><tab>  self.shell.resizeConsole(self.consoleLines, self.consoleColumns)<nl><nl><tab><tab>  # block double resize event<nl><tab><tab>  self.keyPressDown = False<nl><tab><tab>  return False<nl><tab> else:<nl><nl><tab><tab>  return True","out":"pythonライブラリpyteで使用するために、幅と高さ（ピクセル）を列に変換するにはどうすればよいですか？"}
{"in":"import re<nl>infilename = 'file2.txt'<nl>outfilename = 'file.txt'<nl><nl>with open(infilename, 'r') as infile, open(outfilename, 'w') as outfile:<nl><tab> for line in infile:<nl><tab><tab>  line = line.rstrip('<nl>').split('\\t')<nl><tab><tab>  line = [val if val else '-9' for val in line]<nl><tab><tab>  outfile.write('\\t'.join(line) + '<nl>')","out":"pythonで欠損データを数値に置き換える"}
{"in":"from requests_oauthlib import OAuth1<tab> <nl><nl>client_key = ''<nl>client_secret = ''<nl>resource_owner_key = ''<nl>resource_owner_secret = ''<nl><nl>def query(queryurl):<nl><tab><tab>  headeroauth = OAuth1(client_key, client_secret, resource_owner_key,<nl><tab><tab>  resource_owner_secret, signature_type = 'auth_header')<nl><nl><tab><tab>  return requests.get(queryurl, auth = headeroauth)<nl><nl>query('http:\/\/website.com')","out":"Python 3で動作するOAuthライブラリはありますか？"}
{"in":"result = commands.getoutput('zcat ' + fullpath + ' |wc -l')","out":"pythonにシェルコマンドを挿入することについて"}
{"in":"announcements = Announcement.objects.all().filter(date_start__gte = datetime.now())","out":"datetimeフィールドでオブジェクトをフィルタリングする方法は？"}
{"in":"ep =  1412673904406<nl><nl>from datetime import datetime<nl><nl>print datetime.fromtimestamp(ep\/1000).strftime(\"%A\")<nl>Tuesday<nl><nl><nl>def ep_to_day(ep):<nl><tab> return datetime.fromtimestamp(ep\/1000).strftime(\"%A\")","out":"Pythonによるエポックタイムから曜日への変換"}
{"in":"import urllib2<nl>import StringIO<nl>from zipfile import ZipFile<nl>import csv<nl><nl>baseUrl = \"http:\/\/api.worldbank.org\/v2\/en\/indicator\/ny.gdp.pcap.cd?downloadformat=csv\"<nl>remoteCSV = urllib2.urlopen(baseUrl)<nl><nl>sio = StringIO.StringIO()<nl>sio.write(remoteCSV.read())<nl><tab> # We create a StringIO object so that we can work on the results of the request (a string) as though it is a file.<nl><nl>z = ZipFile(sio, 'r')<nl><tab> # We now create a ZipFile object pointed to by 'z' and we can do a few things here:<nl><nl>print z.namelist()<nl><tab> # A list with the names of all the files in the zip you just downloaded<nl><tab> # We can use z.namelist()[1] to refer to 'ny.gdp.pcap.cd_Indicator_en_csv_v2.csv'<nl><nl>with z.open(z.namelist()[1]) as f:<nl># Opens the 2nd file in the zip<nl><tab> csvr = csv.reader(f)<nl><tab> for row in csvr:<nl><tab><tab>  print row","out":"世界銀行のデータセットからCSVファイルをダウンロードする方法"}
{"in":"import sys<nl>import sqlite3<nl><nl>print 'python version:', sys.version<nl>print 'PySQLite version:', sqlite3.version<nl>print 'sqlite3 version:', sqlite3.sqlite_version<nl>print<nl><nl>conn = sqlite3.connect('shane.sqlite')<nl>conn.isolation_level = None  # CHANGED<nl><nl>with conn:<nl><tab> conn.execute(\"create table example (A, B);\")<nl><nl>with conn:<nl><tab> conn.execute(\"insert into example values (?, ?);\", (0,200))<nl><nl><tab> conn.execute(\"savepoint spTest;\")<nl><tab> conn.execute(\"insert into example values (?, ?);\", (1,201))<nl><tab> conn.execute(\"insert into example values (?, ?);\", (2,202))<nl><tab> conn.execute(\"rollback to savepoint spTest;\")  # CHANGED<nl><nl><tab> conn.execute(\"insert into example values (?, ?);\", (5,205))","out":"pythonのsqlite3でセーブポイントを使う"}
{"in":"import re<nl>with open(\"filename\") as f:<nl><tab> for line in f:<nl><tab><tab>  if re.match(r\"^\\d+.*$\",line):<nl><tab><tab><tab><tab>print line","out":"数字から始まる行を読む"}
{"in":"import random<nl><nl>words = [line.strip() for line in open('\/etc\/dictionaries-common\/words')]<nl>print(random.choice(words))","out":"単語リストからランダムな単語を返す（pythonにて"}
{"in":"class C(object):<nl><nl><tab> def __init__(self, Type='generic', X=None, Y=None):<nl><tab><tab>  X = X or 5<nl><tab><tab>  Y = Y or 500<nl><tab><tab>  self.X, self.Y = {<nl><tab><tab><tab><tab>\"generic\": (X, Y),<nl><tab><tab><tab><tab>\"short\": (1, Y),<nl><tab><tab><tab><tab>\"long\": (10, Y),<nl><tab><tab><tab><tab>\"large\": (X, 2000),<nl><tab><tab><tab><tab>\"small\": (X, 100),<nl><tab><tab>  }[Type]<nl><nl><tab> def __str__(self):<nl><tab><tab>  return \"X={0} Y={1}\".format(self.X, self.Y)<nl><nl><nl>print(C())<nl>print(C('short'))<nl>print(C('long'))<nl>print(C('large'))<nl>print(C('small'))<nl>print(C('small', 10))<nl>print(C('small', 20, 20))","out":"メソッドpythonのデフォルト"}
{"in":"(q,qq,qqq)=mystring.split()","out":"スペースを検出し、変数に適用する"}
{"in":"n = 100<nl>numbers = range(2,100)<nl>results = []<nl>while len(numbers) > 0:<nl><tab> results.append(numbers[0])<nl><tab> numbers = [number for number in numbers if number % results[-1] != 0]<nl>print len(results)","out":"エラトステネスのふるいを使って、2からnまでのすべての素数を求める。"}
{"in":"from itertools import groupby<nl><nl>money = money_tx.objects.order_by('-tx_date')<nl>plans = investment_plan.objects.select_related()<nl>result = []<nl><nl>for date, group in groupby(money, lambda x: x.tx_date):<nl><tab> plans_for_date = set(x.investment_plan_id for x in group)<nl><tab> for plan in plans:<nl><tab><tab>  data = {'ORG': plan.organization.organization_name,<nl><tab><tab><tab><tab><tab> 'INV_PLAN': plan.plan_code,<nl><tab><tab><tab><tab><tab> 'DATE': date,<nl><tab><tab><tab><tab><tab> 'PRESENT': (plan.id in plans_for_date)}<nl><tab><tab>  result.append(data)<nl><nl>print result","out":"pythonを使ってdjangoモデルのフィールドの \"unique item \"をピックアップする。"}
{"in":"faulthandler.dump_traceback_later(3, repeat=True)","out":"10秒後にPython pdbのブレークポイントが発生する。"}
{"in":"ranges = (<nl><tab> (8700, 12600),<nl><tab> (15700, 17600),<nl><tab> (18750, 22350),<nl><tab> (23700, 27250),<nl><tab> (106950, 115300),<nl>)<nl><nl>newSndIdx = 0<nl><nl>for start, end in ranges:<nl><tab> for i in range(start, end + 1):<nl><tab><tab>  sampleValue = getSampleValueAt(sound, i)<nl><tab><tab>  setSampleValueAt(newSnd, newSndIdx, sampleValue)<nl><tab><tab>  newSndIdx += 1<nl><tab> newSndIdx += 500","out":"if文と1つのforループでこれを実行させるにはどうしたらいいでしょうか？"}
{"in":"try:<nl><tab> result = simulate(open(\"myfile\"))<nl>except SimulationException as sim_exc:<nl><tab> print \"error parsing stream\", sim_exc<nl>else:<nl><tab> if result:<nl><tab><tab>  print \"result pass\"<nl><tab> else:<nl><tab><tab>  print \"result fail\"<nl><nl># execution continues from here, regardless of exception or not","out":"Pythonでは、変数がNone、True、Falseのいずれであるかをどのようにテストすればよいのでしょうか。"}
{"in":"file_local = open( folder_path + file_id + '.pdf', 'wb' )","out":"PythonでダウンロードしたPDFファイルがacrobatで開けない。"}
{"in":"file.seek(0)","out":"python すべてのファイルにAnalyticsのコードを挿入する。"}
{"in":"os.system('php -f file.php')","out":"PythonからPHPを呼び出す"}
{"in":"from lockfile.pidlockfile import PIDLockFile<nl>from lockfile import AlreadyLocked<nl><nl>pidfile = PIDLockFile(\"\/var\/run\/mydaemon.pid\", timeout=-1)<nl>try:<nl><tab> pidfile.acquire()<nl>except AlreadyLocked:<nl><tab> try:<nl><tab><tab>  os.kill(pidfile.read_pid(), 0)<nl><tab><tab>  print 'Process already running!'<nl><tab><tab>  exit(1)<nl><tab> except OSError:  #No process with locked PID<nl><tab><tab>  pidfile.break_lock()<nl><nl>#pidfile can now be used to create DaemonContext","out":"古いPIDファイルが存在する場合、python-daemonコンテキストの起動に失敗する。"}
{"in":"import sys <nl><nl>fileTemps = 'temps'<nl><nl>with open(fileTemps, 'rw') as fd:<nl><tab> temps = fd.readlines()<nl><nl>if temps.__len__() >= 15:<nl><tab> temps.pop(0)<nl><nl>temps.append(' '.join(sys.argv[1:]) + '<nl>')<nl><nl>with open(fileTemps, 'w') as fd:<nl><tab> for l in temps:<nl><tab><tab>  fd.write(l)","out":"Pythonで最後の15個の値をファイルに保存する。"}
{"in":"def print_divide(x,y):<nl><tab> try:<nl><tab><tab>  print x\/y<nl><tab> except ZeroDivisionError:<nl><tab><tab>  pass","out":"条件が満たされた後のIF文は避ける"}
{"in":"def tail_pg():<nl><tab> log = sudo('ls -t \/var\/lib\/pgsql\/9.3\/data\/pg_log\/| head -n 1')<nl><nl><tab> print type(log), log<nl><tab> sudo('tail -n 25 -f %s' % log, pty=True)","out":"Python Fabric 出力を変数に保存する"}
{"in":"map_by_state = collections.defaultdict(list)<nl><nl>for state, address in zip (statefloatingselfips, selfips):<nl><tab> map_by_state[state].append(address)","out":"ZIPで作成した辞書を2つのリストを組み合わせて"}
{"in":"def closest_common_ancestor(ds1, ds2):<nl><nl><tab><tab>  while ds1 != None:<nl><tab><tab><tab><tab><tab> dd = ds2<nl><tab><tab><tab><tab><tab> while dd != None:<nl><tab><tab><tab><tab><tab><tab><tab><tab>if ds1 == dd:<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  return dd<nl><tab><tab><tab><tab><tab><tab><tab><tab>dd = dd.parent<nl><tab><tab><tab><tab><tab> ds1 = ds1.parent<nl><tab><tab>  return None","out":"Pythonでカスタマイズされた方法でツリートラバーサルを行う？"}
{"in":"import urllib<nl>content = urllib.urlopen('http:\/\/www.google.com\/').read()","out":"Pythonでファイルを読む（外部サーバーから）"}
{"in":"OrderedDict((k, v) for k, v in zip(list_1, list_2) if v is not None)","out":"2つのリストの条件付きZIP"}
{"in":"import rarfile<nl>import os.path<nl><nl>extracted_dir_name = \"samples\/sample\"<tab> # Directory with extracted files<nl>file = rarfile.RarFile(\"samples\/sample.rar\", \"r\")<nl><nl># list file information<nl>for info in file.infolist():<nl><tab>  print info.filename, info.date_time, info.file_size<nl><nl><tab>  # Compare with extracted file here<nl><tab>  extracted_file = os.path.join(extracted_dir_name, info.filename)<nl><tab>  if info.file_size != os.path.getsize(extracted_file):<nl><tab><tab><tab>print \"Different size!\"","out":"Windows 7でarchiwum.rarの内容とフォルダ内の.rarから抽出したデータを比較する。"}
{"in":"class Shows(models.Model) :<nl><tab> title = models.TextField(primary_key=True)<nl><tab> description = models.TextField()  <nl><tab> image = models.TextField()<nl><tab> class Meta:<nl><tab><tab>  db_table = 'shows'<nl><tab> def __str__(self):<nl><tab><tab>  return self.title  <nl><nl><nl>class Episode(models.Model) :<nl><tab> show = models.ForeignKey(Show, related_name=\"episodes\")<nl><tab> title = models.TextField(primary_key=True)<nl><tab> link = models.TextField()  <nl><tab> show_title = models.ForeignKey(Shows)<nl><nl><tab> class Meta: <nl><tab><tab>  db_table = 'episodes'<nl><tab> def __str__(self):<nl><tab><tab>  return self.title","out":"Djangoのモデル、バックリファレンスによる1対多の関係【ハウツー"}
{"in":"df_new = df.groupby('video_id').agg({\"ios_id\": {\"count\": \"count\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"distinct\": \"unique\"},<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"feed_position\": np.average,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"time_watched\": np.sum,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"video_length\": np.sum})","out":"1つのgroupbyカラムに対して集約オプションを実行し、2つのカラムを出力させる方法"}
{"in":"# How to load a text file as a corpus.<nl>import nltk<nl>from nltk.corpus import PlaintextCorpusReader<nl>from nltk.corpus.util import LazyCorpusLoader<nl>afrikaans = LazyCorpusLoader('afrikaans', PlaintextCorpusReader, r'(?!\\.).*\\.txt')<nl>afrikaans.sents()[1]<nl>af = nltk.Text(afrikaans.words())<nl>af.concordance(\"mense\")","out":"アフリカーンス語の単語を含むテキストファイルをnltkコーパスとしてアクセスする方法"}
{"in":"for i in range(4):<nl><tab> ax.plot([VecStart_x[i], VecEnd_x[i]], [VecStart_y[i],VecEnd_y[i]],zs=[VecStart_z[i],VecEnd_z[i]])","out":"Matplotlibで簡単な3Dラインを作るにはどうしたらいいですか？"}
{"in":"request = urllib2.Request('http:\/\/localhost:8080\/manager\/deploy?path=\/war_file', data=war_file_contents)","out":"Pythonを使用したtomcatへのWarのデプロイメント"}
{"in":"grt.root.wb.doc.physicalModels[0].catalog.schemata[0].tables[1].columns[7].flags.append('UNSIGNED')","out":"MySQL Workbenchのスクリプトシェルでカラムフラグを変更する。"}
{"in":"import maya.OpenMaya as OpenMaya<nl><nl>def projectPoint(worldPnt, camPnt, depth):<nl><tab> '''<nl><tab> @param worldPnt - MPoint of point to project. (WorldSpace)<nl><tab> @param camPnt - MPoint of camera position. (WorldSpace)<nl><tab> @param depth - Float value of distance.<nl><tab> Returns list of 3 floats.<nl><tab> '''<nl><tab> #Get vector from camera to point and normalize it.<nl><tab> mVec_pointVec = worldPnt - camPnt<nl><tab> mVec_pointVec.normalize()<nl><nl><tab> #Multiply it by the depth and the camera offset to it.<nl><tab> mVec_pointVec *= depth<nl><tab> mVec_pointVec += OpenMaya.MVector(camPnt.x, camPnt.y, camPnt.z)<nl><nl><tab> return [mVec_pointVec.x, mVec_pointVec.y, mVec_pointVec.z]","out":"深度値を使って2D Pointを3Dに投影する。Maya Python API"}
{"in":"l1 = [['a','b'],['b','c'],[]]<nl>l2 = [0,1,3]<nl>l3 = [l1[i] + [x] for i, x in enumerate(l2)]","out":"リストのリストと2番目のリストを組み合わせて、1つのリストのリストにする方法は？"}
{"in":"from matplotlib.pyplot import imshow, colorbar<nl><nl>data = [[0.0,0.2],[0.5,1.0]]<nl>imshow(data)<nl><nl>cb = colorbar()<nl>cb.ax.plot([0,1],[cb.norm(0.3),cb.norm(0.3)],'r')<nl>cb.ax.plot([0,1],[cb.norm(0.8),cb.norm(0.8)],'r')","out":"カラーバーにプロットする方法 python"}
{"in":"response = render(request, template, context)<nl>response.set_cookie('my_cookie', 'my_cookie_value')<nl>return response","out":"Djangoです：クラスベースのビューで、一時的なセッションに加えて、(恒久的な)クッキーを設定する方法 は？"}
{"in":"def get_resolution(filename):<nl><tab> with open(filename, \"rb\") as f:<nl><tab><tab>  data = f.read()<nl><tab> if data[0:2] != b\"\\xff\\xd8\":<nl><tab><tab>  raise ValueError(\"Not JPEG.\")<nl><tab> if data[2:4] != b\"\\xff\\xe0\":<nl><tab><tab>  return None<nl><tab> else:<nl><tab><tab>  if data[13] == b\"\\x00\":<nl><tab><tab><tab><tab>unit = \"no unit\"<nl><tab><tab>  elif data[13] == b\"\\x01\":<nl><tab><tab><tab><tab>unit = \"dpi\"<nl><tab><tab>  elif data[13] == b\"\\x02\":<nl><tab><tab><tab><tab>unit = \"dpcm\"<nl><tab><tab>  else:<nl><tab><tab><tab><tab>raise ValueError(\"Bad JFIF\")<nl><tab><tab>  x = 256 * ord(data[14]) + ord(data[15])<nl><tab><tab>  y = 256 * ord(data[16]) + ord(data[17])<nl><tab> return {\"unit\":unit, \"resolution\":(x, y)}","out":"Python（Windows）で画像ファイルの詳細を抽出する方法は？"}
{"in":"class MyForm(forms.Form):<nl><tab> email = forms.EmailField(required=False)<nl><tab> cell = forms.CharField(required=False, max_length=20)<nl><nl><tab> def clean(self):<nl><tab><tab>  cleaned_data = super(MyForm, self).clean()<nl><tab><tab>  if cleaned_data.get('email') and cleaned_data.get('cell'):<nl><tab><tab><tab><tab>raise forms.ValidationError(\"Please select either E-mail address or cell number, but not both\")<nl><tab><tab>  return cleaned_data","out":"DjangoでJavascriptのバリデーション後にPythonのビューに投稿する。"}
{"in":"import urllib2<nl>import json<nl>response = urllib.request.urlopen('https:\/\/api.ripple.com\/v1\/accounts\/rssc7gemsZBsseHxyb5NmjfYpJD6aUJirq\/balances')<nl>html = response.read()<nl>json_data = json.loads(html)","out":"APIで情報を加工して返す方法（JSONからPythonへの往復）とは？"}
{"in":"w = root.winfo_reqwidth()<nl>h = root.winfo_reqheight()<nl>ws = root.winfo_screenwidth()<nl>hs = root.winfo_screenheight()<nl>x = (ws\/2) - (w\/2)<nl>y = (hs\/2) - (h\/2)<nl>root.geometry('+%d+%d' % (x, y)) ## this part allows you to only change the location","out":"ウィンドウの中央揃え python tkinter"}
{"in":"import numpy as np<nl><nl>def F(c,D,x):<nl><tab> \"\"\"Assume c and x are numpy arrays of equal size and D is a scalar\"\"\"<nl><tab> # differencing of the concentration field<nl><tab> deltac = np.diff(c)<nl><tab> deltax = np.diff(x)<nl><nl><tab> return -D * deltac \/ deltax","out":"細胞膜を介した水の移動のシミュレーションでFickの拡散の第一法則の実装を試みる"}
{"in":"import asyncmongo<nl>import tornado.web<nl><nl>class Handler(tornado.web.RequestHandler):<nl><nl><tab> @tornado.web.asynchronous<nl><tab> def get(self, id):<nl><tab><tab>  self.id = id<nl><tab><tab>  self.db = asyncmongo.Client(pool_id='mypool', host='localhost', <nl><tab><tab><tab><tab>port=27107, dbname='mydb')<nl><nl><tab><tab>  self.db.users.find_one({'username': self.current_user}, <nl><tab><tab><tab><tab>callback=self.on_user)<nl><nl><tab> def on_user(self, response, error):<nl><tab><tab>  if error:<nl><tab><tab><tab><tab>raise tornado.web.HTTPError(500)<nl><tab><tab>  self.user = response<nl><tab><tab>  self.db.documents.find_one({'id': self.id, 'user': self.user}, <nl><tab><tab><tab><tab>callback=self.on_document)<nl><nl><tab> def on_document(self, response, error):<nl><tab><tab>  if error:<nl><tab><tab><tab><tab>raise tornado.web.HTTPError(500)<nl><tab><tab>  self.render('template', first_name=self.user['first_name'],<nl><tab><tab><tab><tab>document=response)","out":"Tornadoで非同期リクエストで複数のDatabaseを呼び出す。"}
{"in":"import datetime<nl>from System import DateTime<nl>datetime.datetime(DateTime.Now)","out":".NET DateTimeからIronPythonのdatetimeに変換するにはどうすればよいですか？"}
{"in":"step1 = Popen(['ip','addr','show','br0'],stdout=PIPE)<nl>step2 = Popen(['grep','inet6'],stdout=PIPE,stdin=step1.stdout)<nl>step3 = Popen(['sed','-e','\/fe80\/d','-e','s\/ *inet6 *\/\/g','-e','s\/\\\/64.*$\/\/g'],stdout=PIPE,stdin=step2.stdout)<nl>step4 = Popen(['tail','-n1'],stdout=PIPE,stdin=step3.stdout)<nl>step4.communicate()[0]","out":"LinuxでインターフェイスのIPv6アドレスを取得する方法"}
{"in":"str(inventor1.encode(\"UTF-8\") if inventor1 else inventor1)","out":"AttributeError: 'NoneType' オブジェクトには lxml-python の属性 'encode' がない。"}
{"in":"def walk_on_the_beach(sig, t, interval=1000):<nl><tab> \"\"\"<nl><tab> :param sig: signal.<nl><tab> :param t: threshold.<nl><tab> :param interval: interval between next value check (ms).<nl><tab> \"\"\"<nl><tab> last_value = 0<nl><tab> interval_flag = True<nl><tab> interval_iterator = 0<nl><tab> markers = np.zeros(np.size(sig))<nl><tab> for i in np.arange(np.size(sig)):<nl><tab><tab>  absolute = np.abs(last_value - sig[i])<nl><tab><tab>  last_value = sig[i]<nl><tab><tab>  if interval_flag:<nl><tab><tab><tab><tab>if absolute > t:<nl><tab><tab><tab><tab><tab> markers[i] = np.max(sig)<nl><tab><tab><tab><tab><tab> interval_flag = False<nl><tab><tab>  else:<nl><tab><tab><tab><tab>if interval_iterator == interval:<nl><tab><tab><tab><tab><tab> interval_flag = True<nl><tab><tab><tab><tab><tab> interval_iterator = 0<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> interval_iterator += 1<nl><nl><tab> return markers<nl><nl>py.plot(time_scale[:100000], walk_on_the_beach(filtered, 0.02))","out":"信号のマーキング"}
{"in":"[[row[i] for row in data] for i in range(len(data[0]))]","out":"numpyやzip（または他のインポート）を使わずに行列を転置する方法"}
{"in":"output = open('\/home\/user\/test\/wsservice\/data.pkl', 'wb')","out":"pickleにデータを保存する際のIOエラーについて"}
{"in":"class HttpResponseSeeOther(HttpResponseRedirect):<nl><tab> status_code = 303<nl><nl>return HttpResponseSeeOther('\/other-url\/')","out":"Djangoで303のHttpレスポンスを生成する方法は？"}
{"in":"distance = [self.dx - self.x - offsetx, self.dy - self.y - offsety]","out":"pygameの弾丸の物理演算がスクロールで乱れる。"}
{"in":"json.loads(request.body.decode('utf-8'))","out":"バイナリJSONでjson.loadsが動作しない posted by AngularJS in Python"}
{"in":"import cx_Oracle<nl>conn_to = cx_Oracle.connect('user', '...', 'dbserver:1521\/ENGR') <nl><nl>cur_to = conn_to.cursor()<nl><nl>insert_sql = 'insert into tc values (:val, xmltype(:xmlval))' # need to wrap with xmltype() !<nl><nl>cur_to.setinputsizes(val=cx_Oracle.CLOB, xmlval=cx_Oracle.CLOB) # need to set to cx_Oracle.CLOB!<nl>s =  ('<xml>' + '<inner\/>' * 550 + '<\/xml>')<nl>cur_to.execute(insert_sql, val = s, xmlval = s)<nl><nl>conn_to.commit()","out":"cx_Oracle挿入の大きなXMLType値"}
{"in":"title = text.encode('utf8')","out":"MySQLdbでutf以外のシンボルでUtf8エンコードする。"}
{"in":"telconn.sendline(password + '<nl>')","out":"python スクリプトを使用して、Linux PC から Windows PC に telnet する。"}
{"in":"items = Item.all().order('name').fetch(10)<nl>headers = ['Name', 'Price', 'Quantity']<nl>viewitems = [[getattr(x, h) for h in headers] for x in items]<nl><nl>template_values = {'items': viewitems,<nl><tab><tab><tab><tab><tab><tab> 'headers': headers}<nl>render('Views\/table.html', self, template_values)","out":"Django: 変数を配列のインデックスとして使う？"}
{"in":"parse.y","out":"SQLコマンドを含む文字列の解析\/トークン化"}
{"in":"def printList(l, dict1):<nl><tab> for l1 in l:<nl><tab><tab>  if dict1.has_key(l1):<nl><tab><tab><tab><tab>print \"withinrange\"<nl><tab><tab>  else:<nl><tab><tab><tab><tab>print \"outsiderange\"<nl><nl>file = open(\"test1.txt\")<nl>textfile = file.readlines()<nl>dict={'sca4': [['BM1', 17], ['BM2', 33]], 'sca6': [['GM2', 46], ['GM2', 67], ['BM',17]]}<nl>dict1 = {}<nl>l =[]<nl>key = ''<nl>for line in textfile:<nl><tab> if not line.strip():<nl><tab><tab>  continue<nl><tab> col1, col2, col3 = line.strip().split(\" \")<nl><tab> if not (key == col1):<nl><tab><tab>  printList(l, dict1)<nl><tab><tab>  l =[]<nl><tab><tab>  key = col1<nl><tab><tab>  dict1 = {}<nl><tab> for value_list in dict.get(col1, []):<nl><tab><tab>  #print value_list[1]<nl><tab><tab>  if not (value_list[1] in l):<nl><tab><tab><tab><tab>l.append(value_list[1])<nl><tab><tab>  if ((int(col2) <= value_list[1]) and (value_list[1] <= int(col3))):<nl><tab><tab><tab><tab>dict1[value_list[1]] = 'correct'<nl>printList(l, dict1)","out":"dictの複合値が特定の条件に合致するかどうかをチェックする。"}
{"in":"self.response.out.write(today.strftime(\"\"\"<html><body><p style='color:#3E3535'>%A, %d %B<\/p>\"\"\"))","out":"if 文の無効な構文"}
{"in":"matrix = [[0 for i in range(7)] for j in range(7)]<nl>with open('t.dat.txt', 'r') as source:<nl><tab> for line in source:<nl><tab><tab>  i, j, value = line.split()<nl><tab><tab>  i, j = int(i), int(j)<nl><tab><tab>  matrix[i - 1][j - 1] = float(value)","out":"txtファイルからマトリックス\/アレイを作成する方法を教えてください。"}
{"in":"import xmlrpclib, httplib<nl><nl>class TimeoutTransport(xmlrpclib.Transport):<nl><tab> timeout = 10.0<nl><tab> def set_timeout(self, timeout):<nl><tab><tab>  self.timeout = timeout<nl><tab> def make_connection(self, host):<nl><tab><tab>  h = httplib.HTTPConnection(host, timeout=self.timeout)<nl><tab><tab>  return h<nl><nl>t = TimeoutTransport()<nl>t.set_timeout(20.0)<nl>server = xmlrpclib.Server('http:\/\/time.xmlrpc.com\/RPC2', transport=t)","out":"xmlrpclibクライアントリクエストのタイムアウト。"}
{"in":"__init__.py","out":"Python - ディレクトリからモジュールを読み込む"}
{"in":"for FundingOppSynopsis in root.findall('FundingOppSynopsis'): <nl><tab> IDs = [int(category.text) for category in FundingOppSynopsis.findall('EligibilityCategory')]<nl><tab> if 99 not in IDs:<nl><tab><tab>  root.remove(FundingOppSynopsis)","out":"ElementTreeを使ったPython XMLの解析：同じ名前の要素の値を見つけるには？"}
{"in":"def rem(a):<nl><tab> copy = a[:]<nl><tab> for value in set(copy):<nl><tab><tab>  copy.remove(value)<nl><tab> return copy","out":"Pythonで重複した値をすべて含むリストを返す？"}
{"in":"class VForm(forms.ModelForm):<nl><nl><tab> def __init__(self, *args, **kwargs):<nl><tab><tab>  super(VForm, self).__init__(*args, **kwargs)<nl><nl><tab><tab>  if self.instance.field == 'Y':<nl><tab><tab><tab><tab>self.fields['field2'] = forms.ChoiceField(<nl><tab><tab><tab><tab><tab> choices=[(self.instance.field,<nl><tab><tab><tab><tab><tab><tab><tab><tab>  self.instance.field),], required=True)","out":"Djangoのフォームでレコードを読み取り専用にする方法は？"}
{"in":"f = open('file.txt', 'rb')<nl><nl>stream = f.readlines()","out":"pythonでXMODEMを使ってファイルを送る"}
{"in":"print(\"Content-Type: text\/html<nl><nl>\")<nl>print(\"\"\"<html><nl> <head><\/head><nl> <body><nl> <form name='success' action='nav.py' method='post'><nl><tab>  <input type='hidden' name='linkB' value='Add Assets' \/><nl> <\/form><nl> <script type='text\/javascript'><nl><tab>  document.success.submit()<nl> <\/script><nl> <\/body>\"\"\")","out":"現在のcgi-scriptから別のpython cgi-scriptに投稿する。"}
{"in":"import wx.lib.agw.speedmeter","out":"wxpythonアプリケーションでtkinterウィジェットをパネルとしてインポートする。"}
{"in":"FileC = FileA.append(FileB ,ignore_index = True)","out":"同じ Feature 数を持つ 2 つの csv ファイルを結合する Python"}
{"in":"import sys<tab><tab><tab># top-level<nl><nl>3 + 4<tab><tab><tab><tab>  # top-level<nl><nl>x = 0<tab><tab><tab><tab>  # top-level<nl><nl>def f():<tab><tab><tab>  # top-level<nl><tab> import os<tab><tab># not top-level!<nl><tab> return 3<tab><tab> # not top-level<nl><nl>if x:<tab><tab><tab><tab>  # top-level<nl><tab> print 3<tab><tab>  # not top-level<nl>else:<nl><tab> print 4<tab><tab>  # not top-level, but executes as part of an if statement<nl><tab><tab><tab><tab><tab><tab> # that is top-level<nl><nl>class TopLevel(object): # top-level<nl><tab> x = 3<tab><tab><tab> # not top-level, but executes as part of the class statement<nl><tab> def foo(self): # not top-level, but executes as part of the class statement<nl><tab><tab>  print 5<tab> # not top-level","out":"Pythonのトップレベルステートメントとは何ですか？"}
{"in":"import os<nl>import sys<nl>import django<nl>sys.path.append('\/path\/to\/django_project')<nl>from django_project import *<nl>os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')<nl>django.setup()","out":"スタンドアロンDjango ORM - デフォルト設定が認識されない"}
{"in":"from music21 import *<nl>s = converter.parse(filepath)<nl># assuming key changes are the same in all parts, just get the first part<nl>p = s.parts[0]<nl>pFlat = p.flat<nl>keySigs = pFlat.getElementsByClass('KeySignature')<nl>for k in keySigs:<nl><tab> print k.measureNumber","out":"MusicXMLでキーチェンジの小節番号を抽出する。"}
{"in":"from itertools import islice<nl>for x in islice(L, 1, None): # start=1, stop=None<nl><tab> print(x)","out":"ある地点からイテレータを作成する"}
{"in":"print x.rjust(40) + x.ljust(40)","out":"pythonのスペーシングの問題"}
{"in":"data.append(dict(zip(('name', 'surname', 'phone', 'address', 'email', 'etc'),<nl><tab><tab><tab><tab><tab><tab><tab>line.split(\";\", 6))))","out":"この例をpythonスタイルで書くには？"}
{"in":"class TalkAdmin(admin.ModelAdmin):<nl><nl><tab> list_display = ['title', 'get_speakers', 'date']<nl><nl><tab> def get_speakers(self, obj):<nl><tab><tab>  speakers = obj.speakers.all().order_by('name').values_list('name', flat=True)<nl><tab><tab>  return ', '.join(speakers)","out":"多対多の関係で、値をアルファベット順に並べ、最初の項目をlist_displayする。"}
{"in":"request.session.pop('message')","out":"DjangoでリクエストQueryDictからキーを削除する方法は？"}
{"in":"import os<nl>dir = os.path.dirname(__file__)<nl>path = raw_input()<nl>if os.path.isabs(path):<nl><tab> print \"input path is absolute\"<nl>else:<nl><tab> path = os.path.join(dir, path)<nl><tab> print \"absolute path is %s\" % path","out":"pythonで相対パスを解決する方法は？"}
{"in":"Type.objects.filter(type=typeImInterestedIn)","out":"データベース（Django）からモデルからの値"}
{"in":"n = gdb.nodes.create(**nodeDict)","out":"neo4jrestclientを使って、pythonの辞書からプロパティを持つノードを作るにはどうしたらいいでしょうか？"}
{"in":"templates\/AndroidManifest.xml.tmpl","out":"kivyのスクリーンサポートは、通常画面と大型画面に設定されています。"}
{"in":"base = b'\\x80abc'.decode(FSENCODING, \"replace\")","out":"Python 2のUnicodeをPython 3に移植する。"}
{"in":"if __name__=='__main__':<nl><tab> from timeit import Timer<nl><tab> t = Timer(lambda: superMegaIntenseFunction(10))<nl><tab> print t.timeit(number=1)","out":"関数に変数を渡すときにpython timeitを使うには？"}
{"in":"hash-timestamp","out":"有効期限付きのEtagを作成する方法"}
{"in":"Teams = ['Boston Americans','World Series Not Played in 1904','New York Giants',<nl><tab><tab><tab>'Chicago White Sox','Chicago Cubs','Chicago Cubs','Pittsburgh Pirates',<nl><tab><tab><tab>'Philadelphia Athletics']<nl>Year = [1903,1904,1905,1906,1907,1908,1909,1910]<nl><nl>l = zip(Teams, Year)<nl>d = {}<nl>for e in l:<nl><tab> if e[0] not in d:<nl><tab><tab>  d[e[0]] = [e[1]]<nl><tab> else:<nl><tab><tab>  d[e[0]].append(e[1])<nl><nl>#Max Item<nl>s = sorted(d.items(), key=lambda x: len(x[1]))[-1]<nl>print(\"%s - %s\" % (s[0], len(s[1])))<nl><nl># Entire list<nl>for k, v in sorted(d.items(), key=lambda x: -len(x[1])):<nl><tab> print(\"%s - %s\" % (k, len(v)))","out":"ディクショナリー辞書の最大項目から最小項目までのリスト全体を印刷する。"}
{"in":"df = df[~df['addzip'].str.contains(\"[a-zA-Z]\").fillna(False)]","out":"パンダのパイソン：ASCII文字があるDFの行を削除する"}
{"in":"catalog = getToolByName(context, 'portal_catalog')<nl>for brain in catalog(portal_type='MyType'):<nl><tab> obj = brain.getObject()<nl><tab> if obj._ordering == 'unordered':<nl><tab><tab>  obj.setOrdering(u'')<nl><tab> order = obj.getOrdering()<nl><tab> for id in obj._tree:<nl><tab><tab>  if id not in order._order():<nl><tab><tab><tab><tab>order.notifyAdded(id)","out":"Ploneでunorderedフォルダをorderedに移行するには？"}
{"in":"sys.stdout = codecs.getwriter('utf8')(sys.stdout.buffer, 'strict')<nl>sys.stderr = codecs.getwriter('utf8')(sys.stderr.buffer, 'strict')","out":"Twitterのデータ抽出時にUnicodeEncodeErrorが発生しています。"}
{"in":"import time<nl>import threading<nl>import win32ui, win32gui, win32com, pythoncom, win32con<nl>from win32com.client import Dispatch<nl><nl>class IeThread(threading.Thread):<nl><tab> def run(self):<nl><tab><tab>  pythoncom.CoInitialize()<nl><tab><tab>  ie = Dispatch(\"InternetExplorer.Application\")<nl><tab><tab>  ie.Visible = 0<nl><tab><tab>  ie.Navigate('http:\/\/website\/file.xml')<nl><nl>def PushButton(handle, label):<nl><tab> if win32gui.GetWindowText(handle) == label:<nl><tab><tab>  win32gui.SendMessage(handle, win32con.BM_CLICK, None, None)<nl><tab><tab>  return True<nl><nl>IeThread().start()<nl>time.sleep(3)  # wait until IE is started<nl>wnd = win32ui.GetForegroundWindow()<nl>if wnd.GetWindowText() == \"File Download - Security Warning\":<nl><tab> win32gui.EnumChildWindows(wnd.GetSafeHwnd(), PushButton, \"&Save\");<nl><tab> time.sleep(1)<nl><tab> wnd = win32ui.GetForegroundWindow()<nl>if wnd.GetWindowText() == \"Save As\":<nl><tab> win32gui.EnumChildWindows(wnd.GetSafeHwnd(), PushButton, \"&Save\");","out":"pythonからIEを使ってファイルをダウンロードする"}
{"in":"import time<nl>import serial<nl><nl># configure the serial connections (the parameters differs on the device you are connecting to)<nl>ser = serial.Serial(<nl><tab> port='COM2',<nl><tab> baudrate=9600,<nl><tab> timeout=1,<nl><tab> parity=serial.PARITY_ODD,<nl><tab> stopbits=serial.STOPBITS_TWO,<nl><tab> bytesize=serial.SEVENBITS<nl>)<nl>ser.isOpen()<nl># Reading the data from the serial port. This will be running in an infinite loop.<nl><nl>while 1 :<nl><tab><tab>  # get keyboard input<nl><tab><tab>  bytesToRead = ser.inWaiting()<nl><tab><tab>  data = ser.read(bytesToRead)<nl><tab><tab>  time.sleep(1)<nl><tab><tab>  print(data)","out":"pythonを使ったRS232ポートからの読み込み"}
{"in":"db = server['test']<nl>for doc in db:<nl><tab> print doc<nl><tab> for key in db[doc].keys():<nl><tab><tab>  print key","out":"couchdb-python を使って couchdb のドキュメントをフィールドのセットでイントロスペクトする方法"}
{"in":"parent.children_set.all()","out":"django リレーションシップを逆から辿るには？"}
{"in":"import wx<nl><nl>class main(wx.Frame):<nl><tab> def __init__(self):<nl><tab><tab>  wx.Frame.__init__(self, None, -1, \"Testing an app\")<nl><tab><tab>  self.Maximize()<nl><tab><tab>  panel = wx.Panel(self, -1)<nl><tab><tab>  textList = wx.StaticText(panel, -1, \"Text1\")<nl><tab><tab>  self.listBox = wx.ListBox(panel, -1, choices=[\"Some large text\", \"another large text\"], size=(400, 400))<nl><tab><tab>  text = wx.StaticText(panel, -1, \"Content\")<nl><tab><tab>  self.text = wx.TextCtrl(panel, -1, \"\", style=wx.TE_READONLY|wx.TE_MULTILINE, size=(500, 500))<nl><nl><tab><tab>  listbox = wx.BoxSizer(wx.HORIZONTAL)<nl><tab><tab>  listbox.Add(textList)<nl><tab><tab>  listbox.Add(self.listBox)<nl><nl><tab><tab>  textbox = wx.BoxSizer(wx.HORIZONTAL)<nl><tab><tab>  textbox.Add(text)<nl><tab><tab>  textbox.Add(self.text)<nl><nl><tab><tab>  sizer = wx.BoxSizer(wx.HORIZONTAL)<nl><tab><tab>  sizer.Add(listbox)<nl><tab><tab>  sizer.Add(textbox)<nl><tab><tab>  panel.SetSizer(sizer)<nl>  # Some stuff here...<nl>if __name__ == \"__main__\":<nl><tab> app = wx.App()<nl><tab> frame = main().Show()<nl><tab> app.MainLoop()","out":"WxPythonウィジェットをスクリーンに表示する"}
{"in":"start=re.sub(r'(\\+.*)|(\\-.*)$', '', startTime)","out":"datetimeのフォーマット時にタイムゾーンが検出されない"}
{"in":"class GameForm(forms.ModelForm): <nl><tab><tab>  name = forms.CharField(max_length=15, label='Name') <nl><tab><tab>  url = forms.URLField(label='URL', initial='http:\/\/') <nl><tab><tab>  cats = forms.ModelMultipleChoiceField(widget=forms.CheckboxSelectMultiple(),required=True)<nl><tab><tab>  class Meta: <nl><tab><tab><tab><tab><tab> model = Game <nl><tab><tab><tab><tab><tab> fields = ('name','url','cats')","out":"ManyToManyFieldをチェックボックスとしてレンダリングするにはどうすればよいですか？"}
{"in":"for x, y in itertools.izip(l, l[1:]): print x, y","out":"スライディングウィンドウのペアをリスト化し、Pythonicで反復処理？"}
{"in":"datetime.date","out":"タイムゾーンを意識したdatetime.dateオブジェクトは可能ですか？"}
{"in":"dict(zip([\"key1\",\"key2\",\"key3\"], [\"val1\",\"val2\",\"val3\"]))","out":"Pythonで2つのリスト（キーとなるリストと値となるリスト）をdictにマージする。"}
{"in":"def grouper(iterable, n, fillvalue=None):<nl><tab> \"Collect data into fixed-length chunks or blocks\"<nl><tab> # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx<nl><tab> args = [iter(iterable)] * n<nl><tab> return izip_longest(fillvalue=fillvalue, *args)<nl><nl>from itertools import izip_longest # required by grouper<nl>i = [0, 0, 0, 0, 15, 28, 28, 28, 27, 27, 35, 44, 43, 43, 42, 39]<nl>lowest = None<nl>highest = None<nl>for z,q in grouper(i, 2):<nl><tab> v = z-q<nl><tab> if v < lowest:<nl><tab><tab>  lowest = v<nl><tab> if v > highest:<nl><tab><tab>  highest = v<nl>print(lowest)<nl>print(highest)","out":"配列リストを反復処理し、連続する値の差を計算する（Python）。"}
{"in":"f = open('\/tmp\/output', 'wb')","out":"Python ファイルにバイトを書き込む"}
{"in":"from twisted.internet import protocol, reactor<nl>from twisted.protocols.basic import LineReceiver<nl><nl>class Echo(LineReceiver):<nl><tab> def dataReceived(self, data):<nl><tab><tab>  self.transport.write(data)<nl><nl><tab> def connectionLost(self, reason):<nl><tab><tab>  print 'Client connection lost. Reason:<nl>{r}<nl>'.format(r=reason)<nl><tab><tab>  LineReceiver.connectionLost(self, reason)<nl><tab><tab>  reactor.stop()<nl><nl>class EchoFactory(protocol.Factory):<nl><tab> def buildProtocol(self, addr):<nl><tab><tab>  return Echo()<nl><nl>reactor.listenTCP(8000, EchoFactory())<nl>reactor.run()","out":"while trueステートメントを解除する方法"}
{"in":"User.phone_number << contacts","out":"peeweeでINオペレーターをする方法"}
{"in":"list = [\"simon\", \"tom\", \"sarah\", \"peter\", \"jane\"]<nl>word = input()<nl>if word.lower() in list:<nl><tab> print('Ok')<nl><tab> #continue with rest of program<nl>else:<nl><tab>  print('No, sorry')","out":"Python ユーザー入力で特定の単語だけを受け付ける方法"}
{"in":"import matplotlib.pyplot as plt<nl>import matplotlib.ticker as ticker<nl>import numpy as np<nl><nl>fig = plt.figure()<nl>ax = fig.add_subplot(1,1,1)<nl><nl>mu, sigma=100, 15<nl>x=mu + sigma*np.random.randn(1000000)<nl>n, bins, patches=ax.hist(x, 50, facecolor='green', alpha=0.75)<nl><nl>ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda y, pos: ('%.2f')%(y*1e-3)))<nl>ax.set_ylabel('Frequency (000s)')<nl><nl>plt.show()","out":"Matplotlibのヒストグラム，頻度を千単位で表示．"}
{"in":"import os<nl>import shutil<nl>import glob<nl><nl>src = 'source_folder'<nl>name = 'D_folder_name'<nl><nl>#In your case this would be something like C:\\\\A<nl>top = 'root_folder for destination'<nl><nl>for root, dirs, files in os.walk(top):<nl><tab> if name in dirs:<nl><tab><tab>  for filename in glob.glob(os.path.join(src, '*.*')):<nl><tab><tab><tab><tab>shutil.copy(filename, os.path.join(root,name))","out":"Windowsのコマンドプロンプトで、1つのファイル（または複数のファイル）を、ユーザー指定の名前を持つ複数のディレクトリにコピーする"}
{"in":"xrange(len(strval))","out":"enumerateを使わずに同じ結果を得るにはどうすればよいですか？"}
{"in":"from matplotlib.patches import Rectangle<nl>import numpy as np<nl>import pylab as P<nl><nl>xs = np.arange(0,10,0.1)<nl>line1 = P.plot(xs,np.sin(xs),\"r-\", label=\"lower limit\")[0]<nl>line2 = P.plot(xs,np.sin(xs-1)+3,\"b-\", label=\"upper limit\")[0]<nl>P.fill_between(xs,np.sin(xs), np.sin(xs-1)+3,color='green', alpha=0.5, label=\"test\")<nl>rect = Rectangle((0, 0), 1, 1, fc=\"g\", alpha=0.5)<nl>P.legend([line1, line2, rect], [\"lower limit\", \"upper limit\", \"green area\"])<nl>P.show()","out":"グラフの下の色のついた部分にラベルを貼る"}
{"in":"while(self.d(resourceId=\"android:id\/text1\").text!='Hawaii'):<nl><tab><tab>  self.d.press('down');<nl>self.d.press('enter')","out":"アンドロイドのネイティブアプリケーションで、ボタンをクリックすることはできるが、次のページが読み込まれない。"}
{"in":"#!\/usr\/bin\/python<nl>import sys<nl>import zlib<nl>f = open(sys.argv[1], \"rb\")<nl>g = open(sys.argv[2], \"wb\")<nl>z = zlib.decompressobj()<nl>while True:<nl><tab> buf = z.unconsumed_tail<nl><tab> if buf == \"\":<nl><tab><tab>  buf = f.read(8192)<nl><tab><tab>  if buf == \"\":<nl><tab><tab><tab><tab>break<nl><tab> got = z.decompress(buf)<nl><tab> if got == \"\":<nl><tab><tab>  break<nl><tab> g.write(got)","out":"部分的なzlibファイルを膨らませる方法"}
{"in":"class Scores(base):<nl><tab> __tablename__ = 'center_master'<nl><tab> id = Column(Integer(), primary_key=True)<nl><tab> email = Column(String(255), index=True)","out":"EC2 MicroインスタンスでのMySQLのパフォーマンス低下"}
{"in":"import os<nl>dir_path = '%s\\\\Example\\\\' %  os.environ['APPDATA'] <nl>if not os.path.exists(dir_path):<nl><tab> os.makedirs(dir_path)<nl><nl>file_path = '%sexample.db' % dir_path<nl>sqlite3.connect(file_path)","out":"AppDataRoaming」ディレクトリにフォルダを作成する［Python］。"}
{"in":"app.add_url_rule","out":"Flask用のurls.pyファイルをDjangoのように作る"}
{"in":"class A(object):<nl><nl><tab> def __init__(self):<nl><tab><tab>  self.a = 1<nl><tab><tab>  self.b = 1<nl><nl><tab> @property<nl><tab> def a_plus_b(self):<nl><tab><tab>  return self.a + self.b<nl><nl>foo = A()<nl>print foo.a_plus_b # prints \"2\"<nl>foo.a = 3<nl>print foo.a_plus_b # prints \"4\"<nl>foo.b = 4<nl>print foo.a_plus_b # prints \"7\"","out":"Python - クラスのプロパティを同じクラス内の他のプロパティの値に依存するように設定する"}
{"in":"import matplotlib as mpl<nl>mpl.use('macOsX')","out":"Matplotlib - データを使ったヒストグラムの頻度エラー"}
{"in":"clipboard = '&'.join(args)","out":"文字列操作 - 引数のリストの間に'&'の文字列を張る。"}
{"in":"db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))","out":"PythonでSQLite3へNullを挿入する。"}
{"in":"def selectDown(self):<nl><tab><tab>  global topTxt, midTxt, backTxt, midTxtTab, list_<nl><tab><tab>  print \"down pressed\"<nl><tab><tab>  global blkNum <nl><tab><tab>  cursor = midTxtTab.textCursor()<nl><tab><tab>  cursor.movePosition(QtGui.QTextCursor.Start)<nl><tab><tab>  # cursor.movePosition(QtGui.QTextCursor.Down)<nl><nl><tab><tab>  tmp = cursor.blockFormat()<nl><tab><tab>  tmp.setBackground(QtGui.QBrush(QtCore.Qt.yellow))<nl><tab><tab>  cursor.setBlockFormat(tmp)","out":"QTextEdit PYQTでボタン押下時にハイライトして行選択を変更する方法"}
{"in":"serial_f = serial.Serial(port=dev, baudrate=BAUDRATE, timeout=2)<nl><nl>def write_serial():<nl><tab> status = serial_f.read(1)<nl><tab> serial_f.write(buffer)<nl><nl>loop = asyncio.get_event_loop()<nl>loop.add_reader(serial_f.fileno(), write_serial)","out":"asyncioを使ってシリアルポートの出力を読み取る"}
{"in":"from google.appengine.api import rdbms<nl>conn = rdbms.connect(instance='instance_name', database='database', user='user', password='password')","out":"Google App Engineを使ったMYSQLへの画像アップロード（Python）。"}
{"in":"setattr(Person, 'first_name', 'John')","out":"Django で擬似モデルを動的に作成し、Form を起動する際に、フィールドを除外する。"}
{"in":"for count in range(1,numGames+1):<nl><tab> print()<nl><tab> while True:<nl><tab><tab>  try:<nl><tab><tab><tab><tab>print(\"Game\",str(count))<nl><tab><tab><tab><tab>atBats=input(\"How many at bats did the player have? \")<nl><tab><tab><tab><tab>atBats=int(atBats)<nl><tab><tab><tab><tab>hits=input(\"How many hits did the player have? \")<nl><tab><tab><tab><tab>hits=int(hits)<nl><tab><tab><tab><tab>battingAverage=hits\/atBats<nl><tab><tab>  except Exception as err:<nl><tab><tab><tab><tab>print(\"Please enter a number\")<nl><tab><tab><tab><tab>print(err)<nl><tab><tab><tab><tab>continue<nl><tab><tab>  break","out":"forループでカウントをリセットさせる方法"}
{"in":"# Merge source and watermark pages<nl>page0 = source.getPage(0)<nl>over0 = overlay.getPage(0)<nl>if rotaion_angle:<nl><tab> page0.mergeRotatedAroundPointPage(<nl><tab><tab>  over0,<nl><tab><tab>  rotaion_angle,<nl><tab><tab>  over0.mediaBox.getWidth() \/ 2,<nl><tab><tab>  over0.mediaBox.getWidth() \/ 2)<nl><nl><tab> #page0.mergeRotatedPage(overlay.getPage(0), rotaion_angle, True)<nl>else:<nl><tab> page0.mergePage(over0)","out":"Python PyPDF2 回転したページをマージする。"}
{"in":"def print_books(d):<nl><tab> if isinstance(d['shelf'], dict):<nl><tab><tab>  print d['shelf']['book']['title']<nl><tab> else:<nl><tab><tab>  for book in d['shelf']:<nl><tab><tab><tab><tab>print book['book']['title']","out":"Python: 辞書でキーに関連するすべての値を取得する（値はリストまたは単一の項目である）。"}
{"in":"import mechanize<nl><nl>br = mechanize.Browser()<nl>br.open(URL)<nl>br.select_form(nr=0)<nl>br.form['self'] = [\"88\"]<nl>r = br.submit()<nl><nl>print r.read()","out":"Pythonでチェックボックスとドロップダウンサブミットを機械化する"}
{"in":"j,k=input().split(\" \")<nl>j=int(j)<nl>k=int(k)","out":"1行から複数の値を入力する方法を教えてください。"}
{"in":"trgmst_info = request.DATA['trgmst_info'][0]<nl>request_accts = ['request-dev', 'request-qa', 'request-uat', 'request-prod']<nl>for rep in request_accts:<nl><tab> request.DATA['trgmst_info'] = [rd.replace(rep, settings.REQUEST_ACCT) for rd in request.DATA['trgmst_info']]","out":"Unicodeへの強制：文字列またはバッファが必要、リストは見つかる"}
{"in":"#!\/usr\/bin\/env python<nl>import sys<nl>n = int(sys.argv[1])<nl>data = sys.stdin.read()<nl>print(data[::n])","out":"stdinのnバイト目までを出力する。"}
{"in":"list.extend(['a3', 'a4'])","out":"リストへの追記"}
{"in":"os = getattr(__builtins__, \"\".join(chr(ord(x) - 1) for x in  \"``jnqpsu``\"))(\"os\")","out":"pythonのインポート、何通りもあるのでしょうか？"}
{"in":"import matplotlib.cm as cm<nl><nl>ab = np.array(abundance)<nl>gs = np.array(grain_size)<nl>ab_norm = ab\/ab.max()*100<nl>plt.matshow([ab_norm], cmap=cm.gist_rainbow_r) <nl>plt.xticks(range(7), gs)<nl>plt.yticks(range(1), [\"abundance\"])<nl>plt.colorbar()<nl>plt.show()","out":"matplot libを使った2Dヒートマップ"}
{"in":"from sgmllib import SGMLParser<nl>import urllib2<nl>import urllib<nl><nl># Define the class that will parse the suggestion XML<nl>class PullSuggestions(SGMLParser):<nl><nl><tab>def reset(self):<nl><tab><tab>SGMLParser.reset(self)<nl><tab><tab>self.suggestions = []<nl><tab><tab>self.queries = []<nl><nl><tab>def start_suggestion(self, attrs):<nl><tab><tab>for a in attrs:<nl><tab><tab><tab>if a[0] == 'data': self.suggestions.append(a[1])<nl><nl><tab>def start_num_queries(self, attrs):<nl><tab><tab>for a in attrs:<nl><tab><tab><tab>if a[0] == 'int': self.queries.append(a[1])<nl><nl># ENTER THE BASE QUERY HERE<nl><nl>base_query = \"\"  #This is the base query<nl><nl>base_query += \"%s\"<nl>alphabet = \"abcdefghijklmnopqrstuvwxyz\"<nl>for letter in alphabet:<nl><tab>q = base_query % letter;<nl><tab>query = urllib.urlencode({'q' : q})<nl><tab>url = \"http:\/\/google.com\/complete\/search?output=toolbar&%s\" % query<nl><nl><tab>res = urllib2.urlopen(url)<nl><tab>parser = PullSuggestions()<nl><tab>parser.feed(res.read())<nl><tab>parser.close()<nl><nl><tab>for i in range(0,len(parser.suggestions)):<nl><tab><tab>print \"%s\\t%s\" % (parser.suggestions[i], parser.queries[i])","out":"Google Insights APIはあるのでしょうか？"}
{"in":"from django import forms<nl>from django.db import models<nl>from django.contrib import admin<nl><nl>class Foo(models.Model):<nl><tab> pass<nl><nl>class Bar(models.Model):<nl><tab> foo = models.ForeignKey(Foo)<nl><nl>class FooForm(forms.ModelForm):<nl><tab> class Meta:<nl><tab><tab>  model = Foo<nl><nl><tab> bars = forms.ModelMultipleChoiceField(queryset=Bar.objects.all())<nl><nl><tab> def __init__(self, *args, **kwargs):<nl><tab><tab>  super(FooForm, self).__init__(*args, **kwargs)<nl><tab><tab>  if self.instance:<nl><tab><tab><tab><tab>self.fields['bars'].initial = self.instance.bar_set.all()<nl><nl><tab> def save(self, *args, **kwargs):<nl><tab><tab>  # FIXME: 'commit' argument is not handled<nl><tab><tab>  # TODO: Wrap reassignments into transaction<nl><tab><tab>  # NOTE: Previously assigned Foos are silently reset<nl><tab><tab>  instance = super(FooForm, self).save(commit=False)<nl><tab><tab>  self.fields['bars'].initial.update(foo=None)<nl><tab><tab>  self.cleaned_data['bars'].update(foo=instance)<nl><tab><tab>  return instance<nl><nl>class FooAdmin(admin.ModelAdmin):<nl><tab> form = FooForm","out":"django admin で一対多のインライン選択。"}
{"in":"textfile = open('a.txt')<nl>replace_dict_list = []<nl><nl>replace_symbol =  raw_input(\" Which symbol would you like to replace \")<nl>replace_letter = raw_input(\" Which letter would you like to replace it with \")<nl><nl>dict = {replace_symbol:replace_letter}<nl><nl>already_exists = False<nl>for item in replace_dict_list:<nl><tab> if replace_symbol in item:<nl><tab><tab>  already_exists = True<nl><tab> else:<nl><tab><tab>  replace_dict_list.append(dict)<nl><nl>if not already_exists:<nl><tab> print \"running\"<nl><tab> words = words.replace(replace_symbol, replace_letter)","out":"シンボルが一致したかどうかを確認する方法は？"}
{"in":"import json<nl><nl>newDictionary=json.loads(str(soup))","out":"python beautiful soup how to json decode to dict"}
{"in":"g = Gnuplot.Gnuplot(debug=1)<nl>#xpos is always the same<nl>xpos=0.0<nl>for plotnr,datafile in enumerate(glob.glob('*.dat')):<nl><tab> #ypos as a function of the plot-number, e.g.<nl><tab> ypos=plotnr*2.0<nl><tab> g(\"set key at \"+str(xpos)+\",\"+str(ypos))<nl><tab> d = Gnuplot.File(datafile, using='1:2', with_='l', title=datafile)<nl><tab> g.plot(d)","out":"pythonGnuplot - 'set key'の変数パラメータ (例)"}
{"in":"numpy.random.shuffle(a[1:])","out":"リスト\/配列の最初の要素を固定し、残りの要素をシャッフルする。"}
{"in":"proc = subprocess.Popen('testing.sh', stdout=subprocess.PIPE, stderr=subprocess.PIPE)<nl>(stdout, stderr) = proc.communicate()<nl>if stderr:<nl><tab>print \"Shell script gave some error\"<nl>else:<nl><tab>print \"end\" # Shell script ran fine.","out":"Pythonのsubprocessモジュールを使って、シェルスクリプトの状態を確認する方法は？"}
{"in":"import requests<nl>from requests_ntlm import HttpNtlmAuth<nl><nl>requests.get(\"http:\/\/sharepoint-site.com\", auth=HttpNtlmAuth('DOMAIN\\\\USERNAME','PASSWORD'))","out":"PythonでREST API経由でシェアポイントサイトにアクセスする方法は？"}
{"in":"for i in clients:<nl><tab><tab><tab> if i is not s:<nl><tab><tab><tab><tab>i.send(data)","out":"python tcp サーバーが複数のクライアントにデータを送信する。"}
{"in":"ttest_ind(df[df['Treatment'] == 'a']['Performance'], df[df['Treatment'] == 'b']['Performance'])","out":"statsmodels t-testのためのDataframeの変形"}
{"in":"emp_no = no_define_object_no and no_define_object_no[0].current_no or False<nl>return {'value': {'emp_no':  emp_no}}","out":"OpenERP 7 ヌルチェックする方法は？"}
{"in":"model.filled_date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')<nl>model.save()","out":"DjangoでDateTimeFieldをOracleで使う。"}
{"in":"articles.map_reduce(map, reduce, {\"replace\": \"articleTrending\"}, query=queryFilter)","out":"Pymongoのmap reduceでrename例外を解消する方法"}
{"in":"cur_hour = None<nl>for line in lines:<nl><tab> dt = dateutil.parser.parse(line[0])<nl><tab> hour = dt.hour<nl><tab> if hour != cur_hour:<nl><tab><tab>  outFile = open(\"%d.00.00.txt\" % hour, \"w\")<nl><tab><tab>  cur_hour = hour<nl><tab> print >> outFile, ', '.join(line)","out":"各時間のデータを別々のtxtファイルに保存する？"}
{"in":"name = forms.CharField(error_messages={<nl><tab> 'min_length': _('Enter a longer name'),<nl>})<nl><nl>warehouse = forms.CharField(error_messages={<nl><tab> 'invalid': _('Enter a unique combination'),<nl>})","out":"django のフォームバリデーションをカスタマイズする方法"}
{"in":"def create_ini(db_file_paths):<nl><nl><tab> #array of file tmpfs ini filehandles<nl><tab> file_handles = []<nl><nl><tab> for path in db_file_paths:<nl><tab><tab>  #make a tempfs file handle<nl><tab><tab>  f_handle = tempfile.NamedTemporaryFile(delete=False)<nl><tab><tab>  #match and replace db dummy file path<nl><tab><tab>  f_handle = replace( f_handle.name, source_ini, pattern, path )<nl><tab><tab>  file_handles.append(f_handle)<nl><tab> return file_handles # <-- change of indentation here","out":"pythonでテンポラリファイルの配列を作成する"}
{"in":"unquote()","out":"urlエンコードされた文字列をデコードする、またはparamsに'\/'があるためapacheがurlを拒否する"}
{"in":"with open(\"filename\", 'w') as outFile:<nl>  for frame in frames:<nl><tab> outFile.write(frame)","out":"音声データをStringとしてファイルに記録・書き込み、暗号化する。"}
{"in":"from google.appengine.api import urlfetch<nl><nl>url = \"https:\/\/www.googleapis.com\/language\/translate\/v2\/detect\"<nl><nl>payload = {\"key\":translate_api_key, \"q\":str(sentence)}<nl><nl>result = urlfetch.fetch(url=url, payload=payload)<nl>if result.status_code == 200:<nl>  api_response = result.content","out":"Google App Engineでrequests python libraryを使ってHTTPSリクエストを送信する。"}
{"in":"from PyQt4 import QtGui, QtCore<nl><nl>class Window(QtGui.QWidget):<nl><tab> def __init__(self):<nl><tab><tab>  QtGui.QWidget.__init__(self)<nl><tab><tab>  self.label = QtGui.QLabel(self)<nl><tab><tab>  self.label.setText('Hello World')<nl><tab><tab>  self.label.setAlignment(QtCore.Qt.AlignCenter)<nl><tab><tab>  self.label.setFrameStyle(QtGui.QFrame.Box | QtGui.QFrame.Plain)<nl><tab><tab>  self.label.setMouseTracking(True)<nl><tab><tab>  self.label.installEventFilter(self)<nl><tab><tab>  layout = QtGui.QVBoxLayout(self)<nl><tab><tab>  layout.addWidget(self.label)<nl><nl><tab> def eventFilter(self, source, event):<nl><tab><tab>  if (event.type() == QtCore.QEvent.MouseMove and<nl><tab><tab><tab><tab>source is self.label):<nl><tab><tab><tab><tab>pos = event.pos()<nl><tab><tab><tab><tab>print('mouse move: (%d, %d)' % (pos.x(), pos.y()))<nl><tab><tab>  return QtGui.QWidget.eventFilter(self, source, event)<nl><nl>if __name__ == '__main__':<nl><nl><tab> import sys<nl><tab> app = QtGui.QApplication(sys.argv)<nl><tab> window = Window()<nl><tab> window.show()<nl><tab> window.resize(200, 100)<nl><tab> sys.exit(app.exec_())","out":"PyQt: 継承せずにイベントを処理する方法"}
{"in":"import multiprocessing as mp<nl><nl>def f(x):<nl><tab> f.q.put('Doing: ' + str(x))<nl><tab> return x*x<nl><nl>def f_init(q):<nl><tab> f.q = q<nl><nl>def main():<nl><tab> jobs = range(1,6)<nl><nl><tab> q = mp.Queue()<nl><tab> p = mp.Pool(None, f_init, [q])<nl><tab> results = p.imap(f, jobs)<nl><tab> p.close()<nl><nl><tab> for i in range(len(jobs)):<nl><tab><tab>  print q.get()<nl><tab><tab>  print results.next()<nl><nl>if __name__ == '__main__':<nl><tab> main()","out":"Pool.imapで呼び出される関数で、マルチプロセッシングQueueを使用することは可能ですか？"}
{"in":"SESSION_SAVE_EVERY_REQUEST=True","out":"djangoのセッションテーブルを使ったリクエスト"}
{"in":"ListA = [2,1,0]<nl>ListB = [4,5,6]<nl><nl># make a copy -- I'm assuming you don't want to modify ListA in the process.<nl>new_list = ListA[:]<nl># insert ListB at a particular location.  I've arbitrarily chosen `1`<nl># basically this says to take the empty section of the list<nl># starting just before index 1 and ending just before index 1 and replace it<nl># with the contents of ListB<nl>new_list[1:1] = ListB<nl># Check the output to make sure it worked.<nl>print(new_list)  # [2, 4, 5, 6, 1, 0]","out":"特定の要素の後にリストをマージする"}
{"in":"myWidget.setStyleSheet(\"background-color: black;\");","out":"Pyside: QVBoxLayoutウィジェットで行の背景を設定する"}
{"in":"def input_scores():<nl><tab> scores = []<nl><tab> y = 1<nl><tab> for num in range(5):<nl><tab><tab>  score = int(input('Please enter your score for test %d: ' %y))<nl><tab><tab>  while score < 0 or score > 100:<nl><tab><tab><tab><tab>print ('Error --- all test scores must be between 0 and 100 points')<nl><tab><tab><tab><tab>score = int(input('Please try again: '))<nl><tab><tab>  scores.append(score)<nl><tab><tab>  y += 1<nl><tab> return scores","out":"5つの範囲を指定しても、Forループは1回しか実行されません。"}
{"in":"import warnings<nl>warnings.simplefilter('error', RuntimeWarning)","out":"numpyのコード内の場所を探す RuntimeWarning"}
{"in":"import subprocess<nl>import fcntl<nl>import os<nl>import select<nl><nl><nl>proc = subprocess.Popen(['gnuplot'],<nl><tab><tab><tab><tab><tab><tab>  stderr=subprocess.PIPE,<nl><tab><tab><tab><tab><tab><tab>  close_fds=True,<nl><tab><tab><tab><tab><tab><tab>  universal_newlines=True)<nl>fcntl.fcntl(<nl><tab> proc.stderr.fileno(),<nl><tab> fcntl.F_SETFL,<nl><tab> fcntl.fcntl(proc.stderr.fileno(), fcntl.F_GETFL) | os.O_NONBLOCK)<nl><nl>status = select.select([proc.stderr.fileno()], [], [])[0]<nl>if status:<nl><tab> out = proc.stderr.read()<nl>print(out)<nl>proc.kill()","out":"Pythonでアプリケーションから初期画面を読み込む"}
{"in":"class BaseProxy(object):<nl><tab>  # ...<nl><tab>  def _incref(self):<nl><tab><tab><tab># ...<nl><tab><tab><tab>util.debug('INCREF %r', self._token.id)<nl><tab>  # ...<nl><tab>  def _after_fork(self):<nl><tab><tab><tab># ...<nl><tab><tab><tab>self._incref()<nl><tab><tab><tab># ...","out":"複数のマルチプロセッシングManagerの起動が極端に遅くなる"}
{"in":"import sys<nl><nl>lists = {<nl><tab> \"list1\": [\"A\", \"B\", \"C\"],<nl><tab> \"list2\": [1, 2, 3],<nl>}<nl><nl>myarg = sys.argv[1]<nl>print len(lists[myarg])","out":"Python - 変数をリスト名として使用する"}
{"in":"import gtk","out":"PyGObjectのインストール後、gtkをインポートできない。"}
{"in":"template_dir = os.path.abspath(<nl><tab><tab><tab><tab><tab>os.path.join(os.path.dirname(__file__),<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> '..\/Frontend\/templates'))","out":"pythonで他のディレクトリにリンクするにはどうすればよいですか？"}
{"in":"title = item.find('title').text<nl>title = title.encode('iso-8859-1')","out":"PythonでXMLを解析する際に「？」が「？」に変換される。"}
{"in":"from apiclient.http import BatchHttpRequest<nl><nl>def insert_event(request_id, response, exception):<nl>  if exception is not None:<nl><tab> # Do something with the exception<nl><tab>  pass<nl>  else:<nl><tab> # Do something with the response<nl><tab> pass<nl><nl>service = build('calendar', 'v3')<nl><nl>batch = BatchHttpRequest(callback=insert_event)<nl><nl>batch.add(service.events().quickAdd(calendarId=\"you@domain.com\",<nl>  text=\"Lunch with Jim on Friday\"))<nl>batch.add(service.events().quickAdd(calendarId=\"you@domain.com\",<nl>  text=\"Dinner with Amy on Saturday\"))<nl>batch.add(service.events().quickAdd(calendarId=\"you@domain.com\",<nl>  text=\"Breakfast with John on Sunday\"))<nl>batch.execute(http=http)","out":"Google Calendar API v3 一括更新（python版"}
{"in":"import time<nl><nl>word=['s','t','a','r','t','i','n','g']<nl><nl>for i in range(0,len(word)):<nl><tab> lower=word[i-1].lower()<nl><tab> word[i-1]=lower<nl><nl><tab> caps=word[i].upper()<tab> <nl><tab> word[i]=caps<nl><nl><tab> wordstr=''.join(word) #hacky way of converting lists to strings<nl><tab> print(wordstr)<nl><tab> time.sleep(1)","out":"PythonでMetasploitの大文字のアニメーションを実装するにはどうすればよいですか？"}
{"in":"def splitNoEscapes(string, char):<nl><tab> sections = string.split(char)<nl><tab> sections = [i + (char if i[-1] == \"\\\\\" else \"\") for i in sections]<nl><tab> result = [\"\" for i in sections]<nl><tab> j = 0<nl><tab> for s in sections:<nl><tab><tab>  result[j] += s<nl><tab><tab>  j += (1 if s[-1] != char else 0)<nl><tab> return [i for i in result if i != \"\"]","out":"エスケープ文字を分割せずに文字列を分割するPython"}
{"in":"def isPrime(n):<nl><tab> def isSpsp(n, a):<nl><tab><tab>  d, s = n - 1, 0<nl><tab><tab>  while d % 2 == 0: d, s = d \/ 2, s + 1<nl><tab><tab>  t = pow(a, d, n)<nl><tab><tab>  if t == 1: return True<nl><tab><tab>  while s > 0:<nl><tab><tab><tab><tab>if t == n - 1: return True<nl><tab><tab><tab><tab>t, s = (t * t) % n, s - 1<nl><tab><tab>  return False<nl><tab> ps = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,<nl><tab><tab><tab>43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]<nl><tab> if n in ps: return True<nl><tab> for p in ps:<nl><tab><tab>  if not isSpsp(n, p): return False<nl><tab> return True","out":"コンパイルでプログラムを高速化する"}
{"in":"list2 = list1 + [''] * (5 - len(list1))","out":"Pythonの固定長リストを可変文字数で拡張する方法は？"}
{"in":"r = r'abc' '\\\\'","out":"生文字列の末尾にスラッシュを付ける"}
{"in":"import glob<nl>for filename in glob.glob(r\"C:\\script\\test\\*.dat\"):<nl><tab> with open(filename, 'rb') as inputfile:<nl><tab><tab>  data = inputfile.read()<nl><tab> with open(filename, 'wb') as outputfile:<nl><tab><tab>  outputfile.write(data.replace(\"^\", \"|\"))","out":"WindowsでPython"}
{"in":"reviews = [{'content': c, 'author': a} for c, a in zip(contentList, authorList)]","out":"Pythonで2つのリストを1つのDictionaryに入れるには？"}
{"in":"doc_id = db.test.insert({\"foo\": 1})<nl>db.test.remove(doc_id)","out":"PyMongoでオブジェクトを永続化した後、そのIDを取得するにはどうすればよいですか？"}
{"in":"for i in range(0,3):<nl><tab> driver.find_element_by_link_text('Download Search Results').click()<nl><tab> for j in range(0,101):<nl><tab><tab>  f_exists = os.path.isfile('\/Users\/jeff\/downloaded.csv')<nl><tab><tab>  if not f_exists:<nl><tab><tab><tab><tab>print(j, 'file DOES NOT exist')<nl><tab><tab><tab><tab>time.sleep(.05)<nl><tab><tab>  else:<nl><tab><tab><tab><tab>print(i, 'file exists')<nl><tab><tab><tab><tab>return","out":"ファイルをダウンロードし、ダウンロードを検証し、ダウンロードされない場合は再試行する。"}
{"in":"'\/web#id=%s&view_type=form&model=mrp.bom&menu_id=448&action=565'","out":"OpenERPでページのurlを取得する方法は？"}
{"in":"from sqlalchemy.sql import select, and_, or_, not_<nl># ...<nl>query = select(# what to select (tables or columns)<nl><tab><tab><tab><tab><tab>[table.c.column1, table.c.column2],<nl><tab><tab><tab><tab><tab># filters (use any expression using and_, or_, not_...<nl><tab><tab><tab><tab><tab>and_(table.c.column1.like(\"j%\")),<nl><tab><tab><tab><tab><tab>)<nl>result = query.execute()","out":"ジェネレイティブセレクトで特定の列を選択する"}
{"in":"host = connectionDetails.get('host','someDefault')","out":"python辞書とデフォルト値"}
{"in":"result.cal = CALORIES[name]","out":"配列から辞書の値を読み取る"}
{"in":"from castro import Castro<nl>c = Castro()<nl>c.start()<nl># Do something awesome!<nl>c.stop()","out":"WindowsとLinuxでpythonを使ってスクリーンショットをキャプチャする。"}
{"in":"import os<nl>import zipfile<nl><nl>with zipfile.ZipFile('archive.zip') as z:<nl><tab> for filename in z.namelist():<nl><tab><tab>  if not os.path.isdir(filename):<nl><tab><tab><tab><tab># read the file<nl><tab><tab><tab><tab>with z.open(filename) as f:<nl><tab><tab><tab><tab><tab> for line in f:<nl><tab><tab><tab><tab><tab><tab>  print line","out":"Pythonでzipフォルダ内のテキストファイルを読み込む方法"}
{"in":"def Showquestions2(self):<nl><tab> self.group.setExclusive(False)<nl><tab> self.Questionum.setText(\"Question 2\")<nl><tab> self.Correctanswer.setChecked(False)<nl><tab> self.Incorrectans1.setChecked(False)<nl><tab> self.Incorrectans2.setChecked(False)<nl><tab> self.Incorrectans3.setChecked(False)<nl><tab> self.ismultichoiceButton.clicked.connect(self.Showquestions3)<nl><tab> self.group.setExclusive(True)","out":"pyqt4でチェックされたラジオボタンのチェックをはずす方法"}
{"in":"import csv<nl>from itertools import groupby<nl><nl>with open(yourfile) as fin:<nl><tab> tabin = csv.reader(fin, delimiter='\\t')<nl><tab> sentences = [[el[1] for el in g] for k, g in groupby(tabin, bool) if k]","out":"Pythonが巨大なファイルを解析する"}
{"in":"df.groupby(df.ID.str[:1])['Value'].sum()","out":"Pandasによる文字列のgroupbyスライス"}
{"in":"viewport().setCursor();","out":"QPlainTextEditのカーソル形状を変更する方法 (Pyqt, PySide)"}
{"in":"np.rollaxis(array_name,0,3).shape","out":"numpyの画像をリシェイプする方法は？"}
{"in":"#!\/usr\/bin\/python2.5<nl>from email.utils import parsedate<nl>import mailbox<nl><nl>def extract_date(email):<nl><tab> date = email.get('Date')<nl><tab> return parsedate(date)<nl><nl>the_mailbox = mailbox.mbox('\/path\/to\/mbox')<nl>sorted_mails = sorted(the_mailbox, key=extract_date)<nl>the_mailbox.update(enumerate(sorted_mails))<nl>the_mailbox.flush()","out":"mboxファイルを時系列に並べ替えたいのですが、どうすればよいですか？"}
{"in":"i = arr.index(var3)<nl>left = arr[:i]<nl>right = arr[i+1:]","out":"指定したインデックスでリストを区切る"}
{"in":"C = [[x + y for x,y in zip(w,v)] for w,v in zip(A,B)]","out":"2つの行列を入力として受け取るにはどうすればよいですか？"}
{"in":"tree.export_graphviz(clf, out_file=dot_data, feature_names=vec.get_feature_names())","out":"scikit learnで決定木の出力に特徴名を追加する方法"}
{"in":"item_ids = db.my_categories(slug=request.args[0]).items_<nl>items = db(db.my_items.id.belongs(item_ids)).select()","out":"特定のlist:referenceフィールドによって参照されるすべてのアイテムを選択するにはどうすればよいですか？"}
{"in":"python-tk","out":"sudoなしでpython-tkパッケージをインストールする方法は？"}
{"in":"# -*- coding: utf-8 -*- # <nbformat>3.0<\/nbformat><nl><nl>import paramiko<nl>import os<nl><nl><nl>savefile = 'dump.sql'<nl>mykey = paramiko.RSAKey.from_private_key_file(\"\/users\/me\/my-host.pem\")<nl><nl>client = paramiko.SSHClient()<nl>client.load_system_host_keys()<nl>client.connect('hungry.turtles.com', username = \"turtles\", pkey = mykey)<nl><nl><nl>def ssh(cmd):<nl><tab> out = []<nl><tab> msg = [stdin, stdout, stderr] = client.exec_command(cmd)<nl><tab> for item in msg:<nl><tab><tab>  try:<nl><tab><tab><tab><tab>for line in item:<nl><tab><tab><tab><tab><tab> out.append(line.strip('<nl>'))<nl><tab><tab>  except: pass<nl><nl><tab> return(list(out))<nl><nl>dump = ssh('mysqldump -u root -ppassword turtleturds')<nl><nl>file = open(savefile, 'w')<nl>file.write(str(dump))<nl>file.close()<nl>print 'The dump had '+ str(len(dump))+ ' lines and was saved to '+ str(os.path.realpath('dump.sql'))","out":"SSH経由でリモートmysqldumpをpythonで実行する。"}
{"in":"vis.display()","out":"iPythonノートブックでVincentを使ったワールドマップのプロットができない。"}
{"in":"[y for x in range(3) for y in [x, x]]","out":"リスト内包の繰り返し要素"}
{"in":"# this will be the namespace of the user when the code loads or nothing<nl># and it will never change as long as the instance is up<nl>namespace_manager.set_namespace(user.namespace)  <nl><nl>class YourHandler(webapp2.RequestHandler):<nl><tab> def get(self):<nl><tab><tab> # get the user....<nl><tab><tab> namespace_manager.set_namespace(user.namespace)<nl><tab><tab> # setting the namespace here will change it for each request.","out":"設定GAEネームスペース"}
{"in":"cursor.execute('SELECT ...')<nl>columns = []<nl>for column in cursor.description:<nl><tab> columns.append(column[0].lower())<nl>failed_sites = {}<nl>for row in cursor:<nl><tab> for i in range(len(row)):<nl><tab><tab>  failed_sites[columns[i]] = row[i]<nl><tab><tab>  if isinstance(row[i], basestring):<nl><tab><tab><tab><tab> failed_sites[columns[i]] = row[i].strip()","out":"PostgreSQLからDictionaryとしてデータを取得する。"}
{"in":"#!\/sw\/bin\/python2.5<nl><nl>import warnings, sys<nl><nl>def customwarn(message, category, filename, lineno, file=None, line=None):<nl><tab> sys.stdout.write(warnings.formatwarning(message, category, filename, lineno))<nl><nl>warnings.showwarning = customwarn<nl>warnings.warn(\"test warning\")","out":"pythonの警告をカスタムストリームにリダイレクトする方法は？"}
{"in":"engine = create_engine('mysql:\/\/root:******@localhost?charset=utf8')","out":"Python、SQLAlchemyとMySQL、奇数文字"}
{"in":"def activate():<nl><tab> global x1, y1<nl><tab> if(ultrasonic.get_sample() < 10):<nl><tab><tab>  both.turn(power=-70, tacho_units=400, brake=False)<nl><tab> bx, by = get_ballxy()<nl><tab> rx, ry, a = get_robotxya()<nl><nl><tab> if sqrt((x1-bx)*(x1-bx)+(y1-by)*(y1-by)) <= 4: #This is the distance parameter, change at will<nl><tab><tab>  turn_to(brick, bx, by, rx, ry, a)<nl><tab><tab>  move_to(brick, bx, by, rx, ry)<nl><tab><tab>  kickBall(brick, by, ry)<nl><nl><tab> x1, y1 = bx, by<nl><nl>Thread(target=update_coordinates).start()<nl>connect()<nl>x1, y1 = 0, 0<nl>update_coordinates()<nl>while True:<nl><tab> activate()","out":"どうすれば正しい値を返すことができますか？"}
{"in":"struct.pack","out":"ZIPファイルに埋め込まれたiee-beのバイナリファイルを取り出すにはどうすればよいですか？"}
{"in":"if __name__ == '__main__' :<nl>  app = web.application(urls, globals())<nl>  app.run()","out":"localhostでpythonアプリを実行する"}
{"in":"lines = [(\"LC\" if i < 3 else \"LB\")+line for i,line in enumerate(lines)]","out":"テキストファイルの特定の行を書き込む"}
{"in":"#!\/usr\/bin\/python<nl>#-*- coding:utf-8 -*-<nl><nl>import xlwt<nl><nl>base = xlwt.Workbook()<nl><nl>b = ['company1','company2']<nl>a = ['a', 'b', 'c']<nl><nl>for name in b:<nl><tab> n = 0<nl><tab> s = base.add_sheet(name);<nl><tab> for v in a:<nl><tab><tab>  s.write(n, 0, v)<nl><tab><tab>  n += 1<nl><nl>base.save('C:\\\\test.xls')","out":"反復的にデータをエクセルに書き込む"}
{"in":"import time, socket<nl><nl>class ControllableSocket:<nl><tab> def __init__(self, latency, bandwidth):<nl><tab><tab>  self._latency = latency<nl><tab><tab>  self._bandwidth = bandwidth<nl><tab><tab>  self._bytesSent = 0<nl><tab><tab>  self._timeCreated = time.time()<nl><tab><tab>  self._socket = socket.socket()<nl><nl><tab> def send(self, bytes):<nl><tab><tab>  now = time.time()<nl><tab><tab>  connectionDuration = now - self._timeCreated<nl><tab><tab>  self._bytesSent += len(bytes)<nl><tab><tab>  # How long should it have taken to send how many bytes we've sent with our<nl><tab><tab>  # given bandwidth limitation?<nl><tab><tab>  requiredDuration = self._bytesSent \/ self._bandwidth<nl><tab><tab>  time.sleep(max(requiredDuration - connectionDuration, self._latency))<nl><tab><tab>  return self._socket.send(bytes)","out":"pythonで低速ネットワークをシミュレートする簡単な方法"}
{"in":"d = {'tom':'stats', 'keys':[{'tim': 'doc', 'year': 1999},{'mum':'veg', 'nba':'qweqwe'}] }<nl><nl>def print_all_values(input):<nl><tab> if isinstance(input, dict):<nl><tab><tab>  for key, value in input.items():<nl><tab><tab><tab><tab>print_all_values(value)<nl><tab> elif isinstance(input, list):<nl><tab><tab>  for value in input:<nl><tab><tab><tab><tab>print_all_values(value)<nl><tab> else:<nl><tab><tab>  print(input)<nl><nl>print_all_values(d)","out":"Python: 複雑なデータ構造のすべての値を出力する（ハッシュキーを除く）。"}
{"in":"from selenium import webdriver<nl>from selenium.webdriver.common.keys import Keys<nl><nl>driver = webdriver.Chrome()<nl>driver.get(\"http:\/\/www.python.org\")<nl>assert \"Python\" in driver.title<nl>elem = driver.find_element_by_name(\"q\")<nl>elem.send_keys(\"selenium\")<nl>elem.send_keys(Keys.RETURN)<nl>assert \"Google\" in driver.title<nl>driver.close()","out":"pythonとmechanizeでAJAX呼び出し(XHR)をシミュレートする方法"}
{"in":"def create_app(name):<nl><tab> app = Flask(name)<nl><tab> for url in urls:<nl><tab><tab>  app.add_url_rule(url[0], methods=url[1], view_func=url[2])<nl><tab> return app<nl><nl>app = create_app(__name__)","out":"大規模アプリケーションのためのDjangoスタイルのFlask URLパターン"}
{"in":"import os<nl>for root, dirs, files in os.walk(path):<nl><tab> for filename in files:<nl><tab><tab>  filename = os.path.join(root, filename)<nl><tab><tab>  print(filename)","out":"指定したディレクトリの下にあるリーフファイルの絶対パスをすべて取得するユーティリティは存在するのでしょうか？"}
{"in":"os.environ.copy()","out":"環境を変更したPythonのサブプロセス\/Popen"}
{"in":"from itty import get, run_itty<nl>import glob, gzip, json, os, functools<nl><nl>def jsonify(origfunc):<nl><tab> @functools.wraps(origfunc)<nl><tab> def wrapper(*args, **kwds):<nl><tab><tab>  result = origfunc(*args, **kwds)<nl><tab><tab>  return json.dumps(result, indent=4)<nl><tab> return wrapper<nl><nl>@get('\/logs')<nl>@jsonify<nl>def list_logfiles(request):<nl><tab> return glob.glob('\/var\/log\/myserver\/*.gz')<nl><nl>@get('\/logs\/(?P<name>\\w+)')<nl>def show_logfile(request, name):<nl><tab> fullname = os.path.join('\/var\/log\/myserver', name)<nl><tab> with gzip.open(fullname, 'rb') as f:<nl><tab><tab>  return f.read()<nl><nl>run_itty(host='localhost', port=8080)","out":"Python httpサーバを介したロギングモニタ"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import sys<nl><nl>def generate_log_report(logfile):<nl><tab><tab>  for line in logfile:<nl><tab><tab><tab><tab><tab> line_split = line.split()<nl><tab><tab><tab><tab><tab> list = [line_split[0], line_split[1], line_split[2], line_split[4]]<nl><tab><tab><tab><tab><tab> if \"exim\" in list[3]:<nl><tab><tab><tab><tab><tab><tab><tab><tab>l = [line_split[0], line_split[1], line_split[2], line_split[4]]<nl><tab><tab><tab><tab><tab> else:<nl><tab><tab><tab><tab><tab><tab><tab><tab>li = [line_split[0], line_split[1], line_split[2], line_split[4]]<nl><tab><tab>  return l<nl><nl><nl>if __name__ == \"__main__\":<nl><tab><tab>  if not len(sys.argv) > 1:<nl><tab><tab><tab><tab><tab> print __doc__<nl><tab><tab><tab><tab><tab> sys.exit(1)<nl><tab><tab>  infile_name = sys.argv[1]<nl><tab><tab>  try:<nl><tab><tab><tab><tab><tab> infile = open(infile_name, \"r\")<nl><tab><tab>  except IOError:<nl><tab><tab><tab><tab><tab> print \"you must specify a valid file\"<nl><tab><tab><tab><tab><tab> print __doc__<nl><tab><tab><tab><tab><tab> sys.exit(1)<nl><tab><tab>  log_report = generate_log_report(infile)<nl><tab><tab>  print log_report<nl><tab><tab>  infile.close()","out":"python logparse 特定のテキストを検索する"}
{"in":"if a not in some_list:<nl><tab> some_list.append(a)","out":"pythonでリストを検索して、存在しないかもしれないものを探すにはどうしたらよいでしょうか？"}
{"in":"def prepositions():<nl><tab> items = []<nl><tab> with open('test.txt') as input:<nl><tab><tab>  for line in input:<nl><tab><tab><tab><tab>items.extend(line.strip().split(','))<nl><tab> return items<nl><nl>print(prepositions())","out":"pythonでtextfileをlistに変換する。"}
{"in":"mylist = [1,2,3,1,4,4,5,6]<nl>dic = {}<nl><nl>for i in range(0,len(mylist)):<nl><tab> if mylist[i] in dic:<nl><tab><tab>  dic[mylist[i]].append(i)<nl><tab> else:<nl><tab><tab>  dic[mylist[i]] = [i]<nl>print dic.values()<nl># prints [[0, 3], [1], [2], [4, 5], [6], [7]]","out":"Pythonでリストの中から同じものを2つ見つける方法"}
{"in":"if resource.rstrip('0123456789') in resources:<nl><tab> if resource != resource.rstrip('0123456789'):<nl><tab><tab>  print 'ok'<nl><tab> else:<nl><tab><tab>  print 'banned'<nl>else:<nl><tab> raise NotImplementedError()  # replace with own code","out":"Python - 任意のランダムな整数を文字列に含める方法"}
{"in":"from Tkinter import *<nl>import math<nl><nl>master = Tk()<nl>w = Canvas(master, width=200, height=200)<nl>w.pack()<nl>x1=0<nl>y1=0<nl>x2=100<nl>y2=100<nl>delta=10<nl>i=w.create_line(x1, y1, x2, y2)<nl><nl>def click(event):<nl># event.x is the x coordinate and event.y is the y coordinate of the mouse<nl><tab> D = math.fabs((event.y-event.x))\/math.sqrt(2)<tab> <nl><tab> if D < delta and x1 - delta < event.x < x2 + delta:<nl><tab><tab><tab><tab>w.delete(i)<tab> <nl>w.bind(\"<Button-1>\", click)<nl><nl>mainloop()","out":"Pythonでマウスクリックで前に引いた線を削除するには？"}
{"in":"import operator<nl>inverted = dict((v,k) for k,v in sorted(d.iteritems(), key=operator.itemgetter(1)))","out":"Pythonで辞書を反転させる"}
{"in":"logger = logging.getLogger(\"mylog\")<nl>formatter = logging.Formatter('%(asctime)s | %(name)s |  %(levelname)s: %(message)s')<nl>logger.setLevel(logging.DEBUG)<nl><nl>stream_handler = logging.StreamHandler()<nl>stream_handler.setLevel(logging.INFO)<nl>stream_handler.setFormatter(formatter)<nl><nl>logFilePath = \"my.log\"<nl>file_handler = logging.handlers.TimedRotatingFileHandler(filename = logFilePath, when = 'midnight', backupCount = 30)<nl>file_handler.setFormatter(formatter)<nl>file_handler.setLevel(logging.DEBUG)<nl><nl>logger.addHandler(file_handler)<nl>logger.addHandler(stream_handler)<nl><nl>logger.info(\"Started\");<nl>try:<nl><tab> x = 14<nl><tab> y = 0<nl><tab> z = x \/ y<nl>except Exception as ex:<nl><tab> logger.error(\"Operation failed.\")<nl><tab> logger.debug(\"Encountered {0} when trying to perform calculation.\".format(ex))<nl><nl>logger.info(\"Ended\");","out":"pythonのログハンドラごとに異なるレベルを設定する方法"}
{"in":"new = [[x, y, val] for (x, y), val in zip(points, vals)]","out":"pythonのタプルにエントリーを追加する。"}
{"in":"from django.db.models import Q<nl>import operator<nl><nl><nl>def dynamic_search(queryset):<nl><tab> search_fields = [\"search_field1\", \"search_field2\", \"search_field3\"]<nl><tab> search_text = \"dummy_text\"<nl><tab> queryset.filter(reduce(operator.or_, [Q(**{'{0}__contains'.format(search_field): search_text}) for search_field in search_fields]))","out":"django orm による動的検索"}
{"in":"a=b=c=d=e=f=g=h=\"\"","out":"多くの文字列変数を初期化する"}
{"in":"from glob import glob<nl>from process import process_one_file<nl><nl>for i in range(100):<nl><tab> process_one_file(glob('prefix_foo_{}_*'.format(i)))","out":"pythonでファイル名をループ処理する。"}
{"in":"from bs4 import BeautifulSoup<nl>import requests<nl><nl>url = 'http:\/\/alerts.weather.gov\/cap\/us.php?x=1'<nl><nl>r = requests.get(url)<nl>soup = BeautifulSoup(r.text, 'xml')<nl>entries = soup.find_all('entry')<nl><nl>geocode = {}<nl>k = None<nl>for tag in entries[0].geocode.children:<nl><tab> if tag.name == 'valueName':<nl><tab><tab>  k = tag.string<nl><tab> elif tag.name == 'value':<nl><tab><tab>  geocode[k] = tag.string<nl><nl>print 'title: ', entries[0].title.string<nl>print 'cap_geocode: ', str(geocode)<nl>print 'cap_event: ', entries[0].event.string","out":"Python\/XML RSS Feedparser - ブランクフィールド"}
{"in":"import numpy as np<nl><nl>a = np.arange(12)<nl>b = np.array([5, 9, 2, 4])<nl>b = np.append(b, b[0])<nl><nl>for i in range(0, len(b)-1):<nl><tab> print np.roll(a, len(a)-b[i])[:b[i+1]-b[i]+1]","out":"Python\/Numpy - スライスを配列の末尾に回り込ませる"}
{"in":"import scipy.spatial.distance as ssd<nl>distVec = ssd.squareform(SimMatrix)<nl>linkage = hcluster.linkage(1 - distVec)<nl>dendro  = hcluster.dendrogram(linkage)<nl>show()","out":"類似性行列を与えられたscipyによるデンドログラム"}
{"in":"class my_lil_matrix(sparse.lil_matrix):<nl><tab> def __init__(self, *args, **kwargs):<nl><tab><tab>  if len(args) >= 2 and isinstance(args[1], list):<nl><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab> data, rows = args<nl><tab><tab><tab><tab>except:<nl><tab><tab><tab><tab><tab> raise TypeError(\"Invalid input format\")<nl><nl><tab><tab><tab><tab>if kwargs.get('shape') is None:<nl><tab><tab><tab><tab><tab> # Column count will just be the largest value in rows<nl><tab><tab><tab><tab><tab> M, N = (len(rows), max(np.array(rows).max()) + 1)<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> M, N = shape<nl><nl><tab><tab><tab><tab>super(my_lil_matrix, self).__init__((M, N), **kwargs)<nl><nl><tab><tab><tab><tab>self.data = np.array(data, copy=kwargs.get('copy'),<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>dtype=kwargs.get('dtype'))<nl><tab><tab><tab><tab>self.rows = np.array(rows, copy=kwargs.get('copy'),<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>dtype=kwargs.get('dtype'))<nl><tab><tab>  else:<nl><tab><tab><tab><tab>super(my_lil_matrix, self).__init__(*args, **kwargs)","out":"データと座標を指定して lil_matrix を初期化する。"}
{"in":"myvector.T","out":"行列 - ベクトル乗算 in python (numpy)"}
{"in":"lines.sort(key=lambda a_line: a_line.split()[0])","out":"Pythonでファイル\/行を最初の単語でソートする"}
{"in":"min((idx for idx in indexes if not visited[idx]), key=lambda idx: dist[idx])","out":"pythonで、制約条件下での最小値を求める？"}
{"in":"def distance(self, tile1, tile2):<nl><tab> self.xDist = abs(tile1.col * TILE_SIZE - tile2.col * TILE_SIZE)<nl><tab> self.yDist = abs(tile1.row * TILE_SIZE - tile2.row * TILE_SIZE)<nl><tab> self.totalDist = self.diagCost * math.sqrt(self.xDist*self.xDist + self.yDist*self.yDist)<nl><tab><tab><tab><tab><tab><tab><tab># or it might be self.straightCost, depending on their values.<nl><tab><tab><tab><tab><tab><tab><tab># self.diagCost is probably right, though.<nl><tab> return self.totalDist","out":"Python A* アルゴリズムが適切に検索されない"}
{"in":"import numpy as np<nl>a = np.array([(1.0, 2,1),(3.0, 4,2),(9, 3,6)], dtype=[('x', float), ('y', float), ('z', float)])<nl>print(a)<nl><nl>print(a[['x', 'z']])","out":"numpy.arrayから複数のフィールドにアクセスする方法は？"}
{"in":"DATA = {\"records\": [{\"key1\": \"AAA\", \"key2\": \"BBB\", \"key3\": \"CCC\", \"key4\": \"AAA\"}]}<nl><nl>for name, datalist in DATA.iteritems():  # Or items() in Python 3.x<nl><tab> for datadict in datalist:<nl><tab><tab>  for key, value in datadict.items():<nl><tab><tab><tab><tab>if value == \"AAA\":<nl><tab><tab><tab><tab><tab> datadict[key] = \"XXX\"<nl><nl>print (DATA)<nl># Prints {'records': [{'key3': 'CCC', 'key2': 'BBB', 'key1': 'XXX', 'key4': 'XXX'}]}","out":"Pythonのリスト\/辞書の値を置き換える？"}
{"in":"query(extract('hour', timeStamp).label('h')).group_by('h')","out":"SQLAlchemyで時間ごとにグループ分け？"}
{"in":"import urllib<nl><nl>x = \"http:\/\/query.yahooapis.com\/v1\/public\/yql?q=select%20owner%2Curls%20from%20flickr.photos.info%20where%20photo_id%3D'%s'&format=json\"<nl>tmp = urllib.unquote(x)<nl>tmp2 = tmp % (foo, bar)<nl>x = urllib.quote(tmp2)","out":"urlencodeされた文字列の置換を行う方法"}
{"in":"file_stream.close()","out":"pythonでファイルを開く方法の違い"}
{"in":"cat_pub = Publicacion.objects.all().values('id_categoria').annotate(max_update_time=Max('update_time')).order_by('-max_update_time')","out":"djangoでGroup byを作り、max(...)で並べるには？"}
{"in":"class B(A):<nl><tab> __tablename__ = 'b'<nl><nl><tab> id = Column(Integer, ForeignKey('a.id'), primary_key=True)<nl><nl><tab> __mapper_args__ = {<nl><tab><tab>  'polymorphic_identity': 'b',<nl><tab><tab>  'inherit_condition': id == A.id<nl><nl><tab> }<nl><nl><tab> a_id = Column(Integer, ForeignKey('a.id'))<nl><tab> a = relationship(<nl><tab><tab>  'A',<nl><tab><tab>  backref='b', primaryjoin=A.id == a_id, remote_side=A.id)","out":"sqlalchemyのポリモーフィックな自己参照型外部キー。"}
{"in":"setattr(foo, mystring, False)<tab># this is just here to let me submit","out":"Pythonです：既存の文字列を名前とするオブジェクトに属性を追加する"}
{"in":"re.sub('(\\d+)(?=\\.html)', r'.\\1', s)","out":"python ファイル名に文字を追加する"}
{"in":"from pylons import config<nl><nl>def my_cache(*args, **kwargs):<nl><tab> if config[\"debug\"]:<nl><tab><tab>  decorate = lambda f: f<nl><tab> else: <nl><tab><tab>  decorate = beaker_cache(*args, **kwargs)<nl><nl><tab> return decorate","out":"開発モードのPylonsアプリでキャッシュを無効にする"}
{"in":"def ind(the_string, the_char):<nl><tab>i = 0<nl><tab>for a_char in the_string:<nl><tab><tab> if a_char == the_char: return i<nl><tab><tab> i += 1<nl><tab>return -1","out":"Pythonです：文字列のインデックスを取得する方法"}
{"in":"import subprocess<nl>import sys<nl><nl>perl_script = subprocess.Popen([\"script.pl\", params], stdout=sys.stdout)<nl>perl_script.communicate()","out":"PythonスクリプトからPerlスクリプトを実行し、出力を出力して終了を待つ"}
{"in":"threading.Timer(1.0,self.add_csv).start()","out":"pythonでプログラムを中断せずに関数を実行する方法は？"}
{"in":"mod.__dict__[\"__builtins__\"] = {}","out":"モジュール変数 __builtins__ を変更するには？"}
{"in":"sorted_list = sorted(d.keys(), key=lambda i: d[i]['priority'], reverse=True)","out":"pythonをvalue dictのvalueでソートする。"}
{"in":"from uwsgidecorators import *<nl>from gevent.queue import Queue<nl><nl>channels = []<nl><nl>@filemon('\/tmp',target='workers')<nl>def trigger_event(signum):<nl><tab> for channel in channels:<nl><tab><tab>  try:<nl><tab><tab><tab><tab>channel.put_nowait(True)<nl><tab><tab>  except:<nl><tab><tab><tab><tab>pass<nl><nl>def application(e, sr):<nl><tab> sr('200 OK', [('Content-Type','text\/html')])<nl><tab> yield \"Hello and wait...\"<nl><tab> q = Queue()<nl><tab> channels.append(q)<nl><tab> q.get()<nl><tab> yield \"event received, goodbye\"<nl><tab> channels.remove(q)","out":"Flaskで外部イベントからWebSocketを起動する。"}
{"in":"def bytestomb(b):<nl><tab> mb = float(b) \/ (1024*1024)<nl><tab> return mb<nl><nl><nl>def bytessubidatransferidos():<nl><tab> interface= 'ppp0'<nl><tab> for line in open('\/proc\/net\/dev', 'r'):<nl><tab><tab>  if interface in line:<nl><tab><tab><tab><tab>data = line.split('%s:' % interface)[1].split()<nl><tab><tab><tab><tab>tx_bytes =  (data[8])<nl><tab> return bytestomb(tx_bytes)<nl><nl><nl>def bytesbajadatransferidos():<nl><tab> interface= 'ppp0'<nl><tab> for line in open('\/proc\/net\/dev', 'r'):<nl><tab><tab>  if interface in line:<nl><tab><tab><tab><tab>data = line.split('%s:' % interface)[1].split()<nl><tab><tab><tab><tab>rx_bytes = (data[0])<nl><tab> return bytestomb(rx_bytes)<nl><nl><nl>print bytessubidatransferidos()<nl>print bytesbajadatransferidos()","out":"Pythonでネットワークインターフェースから情報を取得するためのモジュールまたは関数"}
{"in":"import time, datetime<nl><nl>d = datetime.datetime.now()<nl>print time.mktime(d.timetuple())","out":"datetimeをPOSIX timeに変換する。"}
{"in":"values = struct.unpack('!7h', data)","out":"バイナリデータのバイト順を入れ替える方法"}
{"in":"def data(self, index, role):<nl><tab> if not index.isValid(): return false<nl><tab> row=index.row()<nl><tab> if row>len(self.items): return false<nl><nl><tab> if role == Qt.DisplayRole or role == Qt.EditRole:<nl><tab><tab>  return self.items[row]","out":"QTableViewのアイテムがダブルクリックでクリアされないようにする方法"}
{"in":"from IPython.display import HTML<nl><nl>HTML('''<script><nl>code_show=true; <nl>function code_toggle() {<nl> if (code_show){<nl> $('div.input').hide();<nl> } else {<nl> $('div.input').show();<nl> }<nl> code_show = !code_show<nl>} <nl>$( document ).ready(code_toggle);<nl><\/script><nl><form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on\/off the raw code.\"><\/form>''')","out":"nbviewerで可視化したipythonノートブックのセルからコードを非表示にする方法は？"}
{"in":"import csv<nl><nl>f = open(\"iter.csv\", \"r\")<nl>g = open(\"out.csv\", \"w\", newline=\"\")<nl>transpose_columns = ['date1', 'date2', 'date3']<nl>target_columns = ['date', 'value']<nl>reader = csv.DictReader(f)<nl>writer = csv.DictWriter(g, fieldnames=[a for a in reader.fieldnames<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>if a not in transpose_columns] + target_columns,<nl><tab><tab><tab><tab><tab><tab><tab><tab>extrasaction='ignore')<nl>writer.writeheader()<nl>for row in reader:<nl><tab> for col in transpose_columns:<nl><tab><tab>  row[target_columns[0]] = col<nl><tab><tab>  row[target_columns[1]] = row[col]<nl><tab><tab>  writer.writerow(row)<nl>f.close()<nl>g.close()","out":"itertools（python）を使ってcsvのデータを操作する。"}
{"in":"def grayScale(picture):<nl><tab><tab>xstop=getWidth(picture)\/2<nl><tab><tab>ystop=getHeight(picture)\/2<nl><tab><tab>for x in range(0,xstop):<nl><tab><tab><tab> for y in range(0,ystop):<nl><tab><tab><tab><tab>oldpixel= getPixel(picture,x,y)<nl><tab><tab><tab><tab>colour=getColor(oldpixel)<nl><tab><tab><tab><tab>newColor = (getRed(oldpixel)+getGreen(oldpixel)+getBlue(oldpixel))\/3<nl><tab><tab><tab><tab>setColor(oldpixel,makeColor(newColor,newColor,newColor))<nl><tab><tab>repaint(picture)","out":"JESで画像の一部をグレースケールにする方法は？"}
{"in":"item = self.list.GetItem(row, column)<nl>print item.GetText()","out":"CheckListCtrlの各行の全データを書き込む"}
{"in":"class Data(db.Model):<nl>  property = db.StringProperty()<nl><nl>data = Data(property = 'value')<nl>data.put()<nl><nl>query = db.GqlQuery(\"SELECT * FROM Data\")<nl><nl>myvar = 'property'<nl><nl>for line in query:<nl>  getattr(line, myvar)","out":"変数を使用してプロパティ値を取得する"}
{"in":"p = None #This initializes the variables globally.<nl><nl>def message_handler(connect_object, message_node):<nl><tab> R = (message_node.getBody())<nl><tab> if R== \"video\" :<nl><tab><tab>  movie_path= '\/home\/pi\/Desktop\/media\/video.mp4'<nl><tab><tab>  p = subprocess.Popen(['omxplayer', movie_path],stdin=subprocess.PIPE)<nl><tab> elif R== \"pause\":<nl><tab><tab>  p.stdin.write('\\x20') #Much cleaner alternative to named pipes...<nl><tab> else:<nl><tab><tab>  pass","out":"Python、受信したメッセージに基づいてサブプロセスを一時停止する。"}
{"in":"if not args.input or not args.output:<nl><tab><tab>  print 'Incorrect number of params'<nl><tab><tab>  exit()<nl>else:<nl><tab><tab>  print \"Correct number of params\"","out":"Pythonのargparseによる引数解析の理解"}
{"in":"def __unicode__(self):<nl><tab> return u\"{0} ({1}, {2})\".format(self.icon, self.attrib1, self.attrib2)","out":"DjangoでSelfを複数の属性として定義する。"}
{"in":"str1 = 'foo1({0}).foo2({1})'<nl>para = [1,2]<nl>eval(str1.format(*para)) # equivalent to eval(str1.format(1,2))","out":"パレメーターを関数名の文字列に埋め込んで呼び出すにはどうすればよいですか？"}
{"in":"'\/\/[^\/]+\/[^\/]+\/[^\/]+\/(\\d+(?=_)|[^\/]+)'","out":"名前付きグループを条件付きで抽出するためのRegex"}
{"in":"#!\/usr\/bin\/env python<nl><nl>__all__ = [\"monotonic_time\"]<nl><nl>import ctypes, os<nl><nl>CLOCK_MONOTONIC_RAW = 4 # see <linux\/time.h><nl><nl>class timespec(ctypes.Structure):<nl><tab> _fields_ = [<nl><tab><tab>  ('tv_sec', ctypes.c_long),<nl><tab><tab>  ('tv_nsec', ctypes.c_long)<nl><tab> ]<nl><nl>librt = ctypes.CDLL('librt.so.1', use_errno=True)<nl>clock_gettime = librt.clock_gettime<nl>clock_gettime.argtypes = [ctypes.c_int, ctypes.POINTER(timespec)]<nl><nl>def monotonic_time():<nl><tab> t = timespec()<nl><tab> if clock_gettime(CLOCK_MONOTONIC_RAW , ctypes.pointer(t)) != 0:<nl><tab><tab>  errno_ = ctypes.get_errno()<nl><tab><tab>  raise OSError(errno_, os.strerror(errno_))<nl><tab> return t.tv_sec + t.tv_nsec * 1e-9<nl><nl>if __name__ == \"__main__\":<nl><tab> print monotonic_time()","out":"pythonで単調な時間経過を得るにはどうすればよいですか？"}
{"in":"verifications = Verification.objects.filter(asset_code__range=(10, 100))<nl>verifications.update(product_details=form.cleaned['product_details'])","out":"Django のフォームや ModelForm を使って、データベーステーブルのレコードのサブセット の中の一つのカラムを更新するにはどうしたらいいですか？"}
{"in":"OrderNotes.objects.filter(item=item).values_list('shared_note', flat=True).distinct()","out":"djangoのDISTINCT ON"}
{"in":"from pandas import *<nl><nl>P1Channels = data.filter(regex=\"P1\")<nl>P1Sum = P1Channels.sum(axis=1)","out":"Python Pandasを使ったワイルドカードによる名前検索で全列を合計する。"}
{"in":"# start with an empty output dictionary<nl>out = {}<nl><nl># iterate through the keys in the dictionary<nl>for key in p:<nl><tab># iterate through the values in the sublist<nl><tab>for val in p[key]:<nl><tab><tab># check to see if we've seen this one before<nl><tab><tab>if not out.has_key(val):<nl><tab><tab><tab># if not, start it out at 0<nl><tab><tab><tab>out[val] = 0<nl><nl><tab><tab># increment by one because we've seen it once more<nl><tab><tab>out[val] += 1<nl><nl>print out","out":"辞書に登録されている値の出現率のヒストグラムを作成するにはどうすればよいですか？"}
{"in":"Article.objects.filter(category__in=self.object.categories.all())","out":"DjangoのDetailViewを使った「関連コンテンツ」リスト"}
{"in":"a = np.arange(10)<nl>class Case():<nl><tab> def __init__(self, gcv_pointer):<nl><tab><tab>  self.gcv = gcv_pointer<nl><nl><tab> def gcv(self):<nl><tab><tab>  return(self.gcv)<nl><nl><tab> def gcv_set(self, value):<nl><tab><tab>  self.gcv[:] = value<nl>pass<nl>#===============================================================================<nl># NumPy<nl>#===============================================================================<nl>caseList = []<nl>for i in range(1, 10):<nl><tab> case = Case(a[i-1:i])<nl><tab> caseList.append(case)<nl>gcvs = [case.GetGCV() for case in caseList]<nl>caseList[1].SetGCV(5)<nl>caseList[1].SetGCV(13)<nl>caseList[1].gcv[:] = 6<nl><nl>setattr(caseList[1], 'dpd', a[5:6])<nl><nl>caseList[1].dpd<nl>caseList[1].dpd[:] = 888","out":"Python ORMからNumPyの配列へ。"}
{"in":"import sys<nl>import subprocess<nl>def dorun(args):<nl><tab>subprocess.Popen([sys.executable, args])<nl>dorun(sys.argv[1])","out":"Pythonプログラムを引数として他のPythonプログラムを実行する？"}
{"in":"mycanvas.showPage()","out":"Reportlab Canvasオブジェクトに改ページを追加する。"}
{"in":"for i, d in enumerate(DICE):<nl><tab> print choice(d),<tab># comma prevents newline<nl><tab> if not (i+1) % 4:  # i+1 modulus 4 will evaluate to [1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0]<nl><tab><tab>  print ''<tab><tab> # empty string forces new line, when above was 0","out":"Boggleゲーム - 16個の配列からランダムに選んだ文字を4x4グリッドに配置する（Python）"}
{"in":"def histogram(data, num_bins):<nl>  span = max(data) - min(data)<nl>  bin_size = float(span) \/ num_bins<nl>  thresholds = [0] * num_bins<nl><nl>  for i in range(num_bins):<nl><tab> #I change thresholds calc<nl><tab> thresholds[i] = min(data) + bin_size * (i+1)<nl><nl>  counts = [0] * num_bins<nl>  for datum in data:<nl><tab> for bin_index, threshold in enumerate(thresholds):<nl><tab><tab>if datum <= threshold:<nl><tab><tab>  counts[bin_index] += 1<nl><tab><tab>  #I add a break<nl><tab><tab>  break<nl>  return counts<nl><nl>data = [-3.2, 0, 1, 1.5, 1.6, 1.9, 5, 6, 9, 1, 4, 5, 8, 9, 5, 6.7, 9]<nl>print(\"Correct result:\\t\" + str([1, 6, 4, 6]))<nl>print(\"Your result:\\t\" + str(histogram(data, num_bins=4)))","out":"Python-データセットのヒストグラムを計算する"}
{"in":"map.input.file","out":"MRjobで入力ファイル名を取得する方法"}
{"in":"class MainHandler(tornado.web.RequestHandler):<nl><tab> def prepare(self):<nl><tab><tab>  self.render('intro.html')","out":"TornadoWebフレームワークでGETとPOSTの両方のリクエストを処理する方法は？"}
{"in":"import numpy as np<nl>def find_nearest(array,value):<nl><tab> idx = (np.abs(array-value)).argmin()<nl><tab> return array[idx]<nl><nl>array = np.random.random(10)<nl>print(array)<nl># [ 0.21069679  0.61290182  0.63425412  0.84635244  0.91599191  0.00213826<nl>#<tab>0.17104965  0.56874386  0.57319379  0.28719469]<nl><nl>value = 0.5<nl><nl>print(find_nearest(array, value))<nl># 0.568743859261","out":"numpy配列の中で最も近い値を見つける"}
{"in":"import matplotlib.pyplot as plt<nl>fig = plt.figure()<nl>def onclick(event):<nl><tab> if event.dblclick:<nl><tab><tab><tab>print event.button<nl><nl>connection_id = fig.canvas.mpl_connect('button_press_event', onclick)<nl>plt.show()","out":"matplotlibでダブルクリックイベントを検出するにはどうすればよいですか？"}
{"in":"return f","out":"関数呼び出しから直接得られる値を返すか、中間変数から得られる値を返すか"}
{"in":"root = lxml.html.fromstring(s)<nl>anchors = root.cssselect(\"a\")<nl>links = [a.get(\"href\") for a in anchors]","out":"Pythonでページからリンクを高速にパースする。"}
{"in":"lastline = None<nl><nl>with open('test.txt', 'r') as f:<nl><tab> for line in f.readlines():<nl><tab><tab>  if not lastline:<nl><tab><tab><tab><tab>lastline = line.rstrip('<nl>')<nl><tab><tab><tab><tab>continue<nl><tab><tab>  if line.rstrip('<nl>') == 'Sequence unavailable':<nl><tab><tab><tab><tab>_, _, id = lastline.split('|')<nl><tab><tab><tab><tab>print 'Sequence unavailable|' + id<nl><tab><tab>  lastline = None","out":"特定の行を選択し、特定の列と結合することが困難である。"}
{"in":"def allInRange(bst, left, right):<nl><tab> if bst is EmptyValue:<nl><tab><tab>  return<nl><tab> if left <= bst.root <= right:<nl><tab><tab>  print(bst.root)<nl><tab> allInRange(bst.left, left, right)<nl><tab> allInRange(bst.right, left, right)","out":"バイナリーツリーから特定の範囲の値を収集する？"}
{"in":"for csvFile in directory:<nl><tab> root = Element('Order')<nl><tab> with open(csvFile, 'rt') as f:<nl><tab><tab>  junk = next(f)<tab><tab><tab>#read the first line, don't do anything with it.<nl><tab><tab>  reader = csv.reader(f)<nl><tab><tab>  for row in reader:<nl><tab><tab><tab><tab>queue = row[0]<nl><tab><tab><tab><tab>token = row[1]<nl><tab><tab><tab><tab>current_order = SubElement(root, 'Token', {'text':token})<nl><tab><tab><tab><tab>details = SubElement(current_order, 'Queue',<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>{'queue':queue})<nl><nl><tab> print prettify(root)","out":"PythonでXMLに変換する際にCSVデータからヘッダを取り除く"}
{"in":"tex.delete('1.0', END)","out":"Ubuntuでtkinter pythonのTextboxをクリア\/デリートする方法"}
{"in":"app = Tk()<nl>app.title(\"My GUI\")<nl>app.iconbitmap(app, \"C:\\Program Files (x86)\\Notepad++\\Files\\icon.ico\")<nl>app.resizable(0,0)<nl><nl>app.mainloop()","out":"Python Tkinterのスモールウィンドウがメインウィンドウの前に一瞬だけポップアップ表示される。"}
{"in":"df=pd.read_excel(u\"url\/??2008.xls\", encoding=sys.getfilesystemencoding())","out":"パンダが中国語のファイル名でエクセルを読む"}
{"in":"import unittest<nl>import SomeTestModule<nl><nl>loader = unittest.TestLoader()<nl>loader.loadTestsFromModule(SomeTestModule)","out":"複数のモジュールからすべてのテストケースを実行する方法は？"}
{"in":"import re<nl>print re.sub(r\"u('\\w)\", r\"\\1\", p)","out":"Regex.u'がある記号の前にある場合に、複数回出現する'u'を削除する方法。"}
{"in":"cur.execute(\"INSERT INTO \" + relevant_table + \"VALUES (?,?,?,?,?)\",<nl><tab><tab><tab><tab>(export_date, export_morning, export_day, export_eve, export_night))","out":"SQLiteのテーブルに変数名で書き込む(Python)"}
{"in":"strings = ['a', 'b']<nl>strings = [s + 'c' for s in strings]","out":"リストなどのミュータブルコンテナを反復処理する際に、pythonのイミュータブルタイプを変更する。"}
{"in":"fileInfos = list(DirectoryInfo(path).GetFiles())<nl>fileInfos.sort(key=lambda f: f.CreationTime, reverse=True)","out":"IronPythonでFileInfoのリストをソートする方法"}
{"in":"reverse('api_v2_top_level', kwargs={'api_name': 'v2'})","out":"パスをハードコーディングせずにAPIのエントリーポイントにリダイレクトする方法は？"}
{"in":"mapping = {X1: Y1, X2: Y2, X3: Y3}<nl>mapping[X4] = Y4<nl>mapping[X5] = Y5<nl><nl>for X,Y in mapping.items():<nl><tab> if Y is not None:<nl><tab><tab>  obj[X][0] = Y","out":"PythonでMappingsを使ってコードを凝縮する"}
{"in":"check = cells[1].get_text(strip=True)","out":"ビューティフルスープ、文字列を比較することができない"}
{"in":"return render(request, 'blog\/articles\/{}.html'.format(pk), {'article': article})","out":"Djangoです：ビューで必要な html-page"}
{"in":"arr = []<nl>arr.append((time, host, status, bytes_))<nl>reqs_host, bytes_host, errors_host = {}, {}, {}<nl>for item in arr:<nl><tab> reqs_host[item[1]] = reqs_host.get(item[1], 0) + 1<nl><tab> bytes_host[item[1]] = bytes_host.get(item[1], 0) + item[3]<nl><tab> if item[2] and item[2][0] in \"45\": <nl><tab><tab>  errors_host[item[1]] = errors_host.get(item[1], 0) + 1","out":"PerlからPythonへ辞書の要素をカウントする"}
{"in":"glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, surface.texture, 0)","out":"OpenGLでFrameBufferの背景を透明にする。"}
{"in":"for key in dict1.keys():<nl>  if key in dict2.keys():<nl><tab> dict1[key].append(dict2[key])","out":"PythonのDictをマッチングさせる"}
{"in":"values = [1,2,3]<nl><nl># Turn list of values into list of Q objects<nl>queries = [Q(pk=value) for value in values]<nl><nl># Take one Q object from the list<nl>query = queries.pop()<nl><nl># Or the Q object with the ones remaining in the list<nl>for item in queries:<nl><tab> query |= item<nl><nl># Query the model<nl>Article.objects.filter(query)","out":"Django で OR クエリフィルタを動的に構成する方法は？"}
{"in":"outfile.write(str(i) + '<nl>')","out":"pythonでアーカイブに印刷する"}
{"in":"import subprocess<nl>import json<nl><nl>testing = \"HelloWorld\"<nl><nl>jsonStr = '{\"script\":\"#!\/bin\/bash \\<nl> STRING=\\'%VP%\\' \\<nl> echo $STRING \\<nl>\"}'.replace('%VP%', testing)<nl><nl>j = json.loads(jsonStr)<nl><nl>print \"start\"<nl>subprocess.call(j['script'], shell=True)<nl>print \"end\"","out":"Pythonから入力パラメータを渡してシェルスクリプトを実行する方法"}
{"in":"list_of_parent_keys = ndb.put_multi(list_of_entities)<nl>child_keys = []<nl>for parent_key in list_of_parent_keys:<nl>  child_key = ndb.Key(Parent, parent_key, Child, child_key)<nl>  child_keys.append(child_key)","out":"google app engine 大規模データをデータストアに置く効率的な方法"}
{"in":"s = \"evening\"<nl>ans = len([x for x in xrange(len(s)-2) if s[x] == s[x+2]])<nl>print ans","out":"各要素が右の2つの要素と等しい回数を数える関数の作り方"}
{"in":"coord = tuple(sum(x) for x in zip(coord, change))","out":"同じ長さのタプルからの値の追加"}
{"in":"concordance()","out":"PythonでNLTKを使用したフレーズのコンコーダンス"}
{"in":"container = array.array('I', [0]) * ((10000000000 + 31) \/\/ 32)","out":"Pythonのロングインデックス配列"}
{"in":"import logging<nl>logger = logging.getLogger(__name__)<nl><nl>def restart_service(node_name):<nl><tab> print('='*30 + '  Starting to work on ' + node_name + '  ' + '='*30 + '<nl>')<nl><tab> logging.info('Connecting to %s in order to restart %s...', node_name, service_name)<nl><tab> ssh = paramiko.SSHClient()<nl><tab> ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<nl><tab> ssh.load_system_host_keys()<nl><tab> ssh.connect(node_name)<nl><tab> channel = ssh.get_transport().open_session()<nl><tab> channel.exec_command(command)<nl><tab> while True:<nl><tab><tab>  if channel.exit_status_ready():<nl><tab><tab><tab><tab>break<nl><tab><tab>  rl, wl, xl = select.select([channel], [], [], 0.0)<nl><tab><tab>  if len(rl) > 0:<nl><tab><tab><tab><tab># Log output<nl><tab><tab><tab><tab>logger.info(channel.recv(1024))<nl><tab> ssh.get_transport().close()<nl><tab> ssh.close()","out":"Python Paramiko コマンドのログ出力をファイルに出力する。"}
{"in":"data = {}<nl>for row in words:<nl><tab> if not row[\"name\"] + \"-\" + row[\"subname\"] in data:<nl><tab><tab>  data[row[\"name\"] + \"-\" + row[\"subname\"]] = {<nl><tab><tab><tab><tab>\"name\": row[\"name\"],<nl><tab><tab><tab><tab>\"subname\": row[\"subname\"],<nl><tab><tab><tab><tab>\"data\": {<nl><tab><tab><tab><tab><tab> \"attr1\": {\"name\":\"value1\", \"values\": []},<nl><tab><tab><tab><tab><tab> \"attr2\": {\"name\":\"value2\", \"values\": []}<nl><tab><tab><tab><tab>}<nl><tab><tab>  }<nl><tab> data[row[\"name\"] + \"-\" + row[\"subname\"]][\"data\"][\"attr1\"][\"values\"].append(row[\"value1\"])<nl><tab> data[row[\"name\"] + \"-\" + row[\"subname\"]][\"data\"][\"attr2\"][\"values\"].append(row[\"value2\"])","out":"CSVのカラムの有限集合から読み込み、特定のJSONスキーマに行として出力する。"}
{"in":"import scraperwiki<nl>import lxml.html<nl><nl>html = scraperwiki.scrape('http:\/\/ahr13.mapyourshow.com\/5_0\/exhibitor_results.cfm?  alpha=%40&type=alpha&page=1')<nl><nl>root = lxml.html.fromstring(html)<nl># get the links<nl>hrefs = root.xpath('\/\/td[@class=\"mys-elastic mys-left\"]\/a')<nl><nl>for href in hrefs:<nl><tab>print 'http:\/\/ahr13.mapyourshow.com' + href.attrib['href']","out":"Scraperwiki + lxmlです。クラスを持つ要素の子要素のhref属性を取得するには？"}
{"in":"--nothreading","out":"ミラーリングされたMS SQL Serverへのpyodbcによる2回目の接続でセグメンテーションが発生する。"}
{"in":"with open('ids.txt', 'rU') as f:<nl><tab> interesting_ids = set('>' + line.lower()[0:4] + \"_\" + line[4] for line in f)  # Get all ids in a set.<nl><nl>found_id = None<nl>with open('seqres.txt', 'rU') as g:<nl><tab> for line in g:<nl><tab><tab>  if found_id is not None:<nl><tab><tab><tab><tab>with open(found_id+'.fasta','w') as h:<nl><tab><tab><tab><tab><tab> h.write(line)<nl><nl><tab><tab>  id = line[:7]<nl><tab><tab>  if id in interesting_ids: found_id = id<nl><tab><tab>  else: found_id = None","out":"ファイルをループして、条件を満たした場合に次の行を書き込む"}
{"in":"lambda a=a: inputBoardSize(a)","out":"Tkinterでは、このループ\/関数を修正して、各ボタンが値を変更するようにするにはどうすればよいでしょうか。"}
{"in":"import bs4<nl>soup = bs4.BeautifulSoup(html_string)<nl>href = soup.find('h3').find('a').get('href')<nl>print(href)","out":"googleの検索結果の最初の結果（目立つようにビデオリンク）にアクセスするには？"}
{"in":"ans = np.logical_and(<nl><tab> np.logical_and(array1 != 0, array2 != 0),<nl><tab> array1 == array2 )","out":"2つのnumpy配列の相互の比較"}
{"in":"color_from_url = self.request.get('color')<nl>flavour_from_url = self.request.get('flavour')","out":"Google App EngineでGETパラメータを取得し、適宜利用するためのPython基本スクリプト"}
{"in":"import numpy<nl><nl>my_ar = numpy.array((0,5,10))<nl>print my_ar<nl><nl>transformed = numpy.array(map(lambda x:numpy.array((x,x*2,x*3)), my_ar))<nl>print transformed<nl><nl>print transformed.shape","out":"numpy.arrayの各要素に次元を追加する。"}
{"in":"import re<nl>import os<nl>r = re.compile(r'\\d{2}.+gif$')<nl>for root, dirs, files in os.walk('\/home\/vinko'):<nl>  l = [os.path.join(root,x) for x in files if r.match(x)]<nl>  if l: print l #Or append to a global list, whatever","out":"Pythonを使って、正規表現に一致するファイル名をフォルダから検索するにはどうすればよいですか？"}
{"in":"import pylab as pl<nl>import numpy as np<nl>import pandas as pd<nl><nl># prepare some random data<nl>N = 100<nl>np.random.seed(0)<nl>weekday = np.random.randint(0, 7, N)<nl>week = np.random.randint(0, 40, N)<nl>activity = np.random.randint(0, 100, N)<nl><nl>df = pd.DataFrame({\"weekday\":weekday, \"week\":week, \"activity\":activity})<nl>df.drop_duplicates(cols=[\"weekday\", \"week\"], inplace=True)<nl><nl># reshape the data and plot it<nl>df2 = df.pivot(columns=\"week\", index=\"weekday\", values=\"activity\")<nl>df2.fillna(0, inplace=True)<nl><nl>Weekday, Week = np.mgrid[:df2.shape[0]+1, :df2.shape[1]+1]<nl>fig, ax = pl.subplots(figsize=(12, 4))<nl>ax.set_aspect(\"equal\")<nl>pl.pcolormesh(Week, Weekday, df2.values, cmap=\"Greens\", edgecolor=\"w\", vmin=-10, vmax=100)<nl>pl.xlim(0, df2.shape[1])","out":"Pandas Dataframeからアクティビティプロットを作成する方法（Githubのコントリビューションプロットのようなもの）。"}
{"in":"process=subprocess.Popen([PathToProcess],stdin=subprocess.PIPE,stdout=subprocess.PIPE);<nl>for i in xrange(StepsToComplete):<nl><tab> print \"Forcing step # %s\"%i<nl><tab> process.stdin.write(\"<nl>\")<nl><tab> result=process.stdout.readline()","out":"PythonによるSTDIN\/STDOUT経由の外部プロセスの起動と制御"}
{"in":"def get_absolute_url(self):<nl><tab> return \"\/event\/%d\" % self.id","out":"get_absolute_url()を作成する。"}
{"in":"import sqlalchemy<nl>import fdb","out":"Windowsでsqlalchemyを使ってfirebird superserverに接続する。"}
{"in":"def download(url, local_file):<nl><tab> def progress(blocks_read, block_size, total_size):<nl><tab><tab>  percent = min(int(blocks_read * block_size * 100 \/ total_size), 100)<nl><tab><tab>  sys.stdout.write(\"\\rdownloading {}: {:2}%\".format(local_file, percent))<nl><tab><tab>  if percent == 100:<nl><tab><tab><tab><tab>sys.stdout.write('<nl>')<nl><tab><tab>  sys.stdout.flush()<nl><nl><tab> urllib.urlretrieve(url, local_file, reporthook=progress)<nl><nl><nl># call download function<nl>download(\"http:\/\/ww1.microchip.com\/downloads\/en\/DeviceDoc\/pk2cmdv1-20Linux2-6.tar.gz\",<nl><tab><tab><tab>\"pickit.tar.gz\")","out":"ウェブ上でアーカイブのサイズを確認する方法"}
{"in":"re.search(\"([0-9]{2}\\-[0-9]{2}\\-[0-9]{4})\", fileName)","out":"Python\/Regex - 正規表現を使ってファイル名から日付を抽出する方法は？"}
{"in":"from collections import defaultdict<nl>type_dict = defaultdict(list)<nl>for element in self.elements:<nl><tab> type_dict[element.type()].append(element.dimStr())<nl>return ','.join('%s: %s' for k, v in type_dict.items())","out":"継承でダックタイピングを効果的に使う方法"}
{"in":"reader = csv.reader(thefile.file.read().splitlines())","out":"PythonでHTMLアップロードされたCSVファイルをパースする"}
{"in":"icfg = Matrix2D_icfg(\"icfg\") #declaring object<nl>icfg_compress = pickle.dumps(icfg) #to pickle<nl><nl>icfg = pickle.loads(str(icfg_compress)) # to unload","out":"Google App Engineのペイロードオブジェクト"}
{"in":"import active_directory<nl><nl>user = active_directory.find_user(\"jimboface\")<nl>destination_ou = active_directory.find_ou(\"happyland\")<nl>destination_ou.com_object.MoveHere(str(user.as_string()), str(user.Name))<nl>#Thats it!","out":"Pythonを使用してユーザーを別のOUに移動させる方法"}
{"in":"import os<nl>import shutil<nl>from os import path<nl>from os.path import join, getmtime<nl>from time import time<nl><nl>archive = \"bak\"<nl>current = \"cur\"<nl><nl>def archive_old_versions(days = 3):<nl><tab> for root, dirs, files in os.walk(current):<nl><tab><tab>  for name in files:<nl><tab><tab><tab><tab>fullname = join(root, name)<nl><tab><tab><tab><tab>if (getmtime(fullname) < time() - days * 60 * 60 * 24):<nl><tab><tab><tab><tab><tab> shutil.move(fullname, join(archive, name))","out":"このBashコマンドを純粋なPythonで表現する方法"}
{"in":"colNums = [0, 2, 6]<nl>to_write = [ col for i, col in enumerate(zip(*my_reader)) if i in colNums ]","out":"pythonでcsvファイルの列を別のcsvファイルにコピーする方法は？"}
{"in":"app = wx.App()<nl>frame = MyFrame1(None)<nl>frame.Show()<nl>app.MainLoop()","out":"wxPythonのフレームが表示されない"}
{"in":"#input<nl><nl>file1 = open('1.txt', 'r')<nl>file2 = open('2.txt', 'r')<nl>matrix1 = [line.rstrip().split(', ') for line in file1.readlines()]<nl>matrix2 = [line.rstrip().split(', ') for line in file2.readlines()]<nl>file1.close()<nl>file2.close()<nl><nl>#combine<nl><nl>t_matrix1 = [[r[col] for r in matrix1] for col in range(len(matrix1[0]))]<nl>t_matrix2 = [[r[col] for r in matrix2] for col in range(len(matrix2[0]))]<nl>final_t_matrix = []<nl>for i in (t_matrix1 + t_matrix2):<nl><tab> if i not in final_t_matrix:<nl><tab><tab>  final_t_matrix.append(i)<nl>final_matrix = [[r[col] for r in final_t_matrix] for col in range(len(final_t_matrix[0]))]<nl><nl>#output<nl><nl>outfile = open('out.txt', 'w')<nl>for i in final_matrix:<tab><tab><tab><tab><tab><nl><tab> for j in i[:-1]:<nl><tab><tab>  outfile.write(j+', ')<nl><tab> outfile.write(i[-1]+'<nl>')<nl>outfile.close()","out":"共通カラムによる2つのテーブルの併合"}
{"in":"print myDict[ u'Command']","out":"pymongoの結果をStringに変換"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>listAct = []<nl>for pos,rem in np.array(db.extractData(mess)):<nl><tab> act = gen.unixTime_to_dateTime(rem)- gen.unixTime_to_dateTime(pos) ##act is a datetime object<nl><tab> listAct.append(act.days + act.seconds\/float(86400)) <nl><nl>bins = range(1,15)<nl>plt.hist(listAct,bins)<nl>plt.show()","out":"Pythonで分布グラフを描画する"}
{"in":"album_list.append((album, Photo.objects.filter(album=album).order_by('?')[0]))","out":"オブジェクトのタプルを作成しようとすると、オブジェクトとクエリセットが作成される"}
{"in":"prefetch_related()","out":"Django はテンプレートで ContentType を取得します。"}
{"in":"df_masked = df[(df.time <= t1) & (df.time >= t0)]","out":"DataFrameの特定の部分を取得する方法"}
{"in":"punctuation_i_care_about=\"?.!\"<nl>split_by_punc =  re.split(\"[%s]\"%punctuation_i_care_about, some_big_block_of_text)<nl>words_by_puct = [len(x.split()) for x in split_by_punc]","out":"Pythonで句読点間の単語数をカウントする"}
{"in":"from Crypto.Cipher import AES<nl>from Crypto import Random<nl>IV = Random.new().read(32)<nl>c = AES.new('abcd1234efgh5678', AES.MODE_CFB, IV)<nl>data = c.encrypt('test')<nl><nl>c.decrypt(data)","out":"Python 3でソケットクライアントとサーバーの間を移動するメッセージを安全にする方法は？"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>#plot<nl>r = np.arange(0, 3.0, 0.01)<nl>theta = 2 * np.pi * r<nl>rmax = 2.0<nl>n_th = 6<nl>th_pos = np.linspace(0.0, 2 * np.pi, n_th, endpoint=False)<nl>n_r = 5<nl>r_pos = np.linspace(0, rmax, n_r)<nl><nl><nl>ax = plt.subplot(111, polar=True)<nl><nl>## Plot the grid<tab> <nl>for pos in th_pos:<nl><tab> ax.plot([th_pos]*2, [0, rmax], 'k:', lw=2)<nl>for pos in r_pos[1:-1]:<nl><tab> x = np.linspace(0, 2*np.pi, 50)<nl><tab> y = np.zeros(50)+pos<nl><tab> ax.plot(x, y, 'k:', lw=2)<nl><nl>## Plot your data<nl>ax.plot(theta, r, color='r', linewidth=20)<nl>ax.set_rmax(rmax)<nl>ax.grid(False)<nl><nl>#set ticks and labels<nl>ax.set_xticks(th_pos)<nl>label_cols = ['Label ' + str(num) for num in np.arange(n_th)]<nl>ax.set_xticklabels(label_cols, size=24)<nl>ax.set_yticks(r_pos[1:])<nl><nl><nl>plt.show()","out":"matplotlibで、バー\/ライン\/パッチの下にグリッドラインを設定し、上のティクラベルを保持する方法はありますか？"}
{"in":"def primes(n): # sieve of eratosthenes<nl><tab> ps, sieve = [], [True] * (n + 1)<nl><tab> for p in range(2, n + 1):<nl><tab><tab>  if sieve[p]:<nl><tab><tab><tab>  ps.append(p)<nl><tab><tab><tab>  for i in range(p * p, n + 1, p):<nl><tab><tab><tab><tab><tab>sieve[i] = False<nl><tab> return ps","out":"Pythonによるエラトステネスの篩の実装"}
{"in":"import os<nl><nl>dir_path = '\/path\/to\/folders\/folder{}'<nl><nl>x = 10<nl><nl>for i in range(0, x):<nl><tab> formatted_path = dir_path.format(i)<nl><tab> try:<nl><tab><tab>  for f in os.listdir(formatted_path):<nl><tab><tab><tab><tab>filename = os.path.join(formatted_path, f)<nl><tab><tab><tab><tab>if os.path.isfile(filename):<nl><tab><tab><tab><tab><tab> print filename<nl><nl><tab> except OSError:<nl><tab><tab>  print \"{} does not exist\".format(formatted_path)","out":"特定の末尾番号までフォルダーを歩く python"}
{"in":"key, value = line.split(':')","out":"テキストファイルからpythonで辞書を作成する"}
{"in":"df['hours'] = [ts.hour for ts in pd.to_datetime(df['datetime'])]","out":"カスタムオブジェクトで日付と時刻を追加管理する最良の方法"}
{"in":"plt.clf()","out":"ループからmatplotlibの図を更新する方法は？"}
{"in":"tbl = Table('users', self.meta, autoload=True, autoload_with=Engine)<nl>stmt = select([tbl.c.id, tbl.c.name])<nl>result = self.CONN.execute(stmt)<nl>ids = [row[tbl.c.id] for row in result]<nl>for x in range(2):<nl><tab> for i in ids:<nl><tab><tab>  print(i)","out":"結果プロキシオブジェクトをループ処理する"}
{"in":"DockArea.makeContainer()","out":"ドックが消えるほどサイズ変更されないようにする"}
{"in":"import ctypes<nl>ctypes.windll.user32.PostQuitMessage(0)","out":"pumpMessages()の代わりにpyhookで独自のループを使用するにはどうすればよいですか？"}
{"in":"application = wsgi.Application(soap_application)","out":"djangoやcherypyなどのフレームワークを使わずにmod_wsgiでsoaplibを利用する。"}
{"in":"fig, ax = plt.subplots()<nl><nl>bar1 = ax.bar(date, value)<nl><nl>plt.title('Title')<nl>plt.ylabel('Value')<nl>plt.xlabel('Date')<nl>plt.show()","out":"Matplotlibによる棒グラフの作成"}
{"in":"matches = re.findall(\"([0-9]{5})\",f.read())","out":"pythonから複数行に渡って抽出する"}
{"in":"b.append(i)","out":"pythonを使ったforループで.matファイルにデータを保存する。"}
{"in":"test_range = agents.coll.find({ \"created_at\": {\"$gte\" : datetime(2015, 3, 1), \"$lt\": datetime(2015, 3, 30)}})","out":"Pymongoでisodateを使ったクエリを実行するには？"}
{"in":"import wx<nl><nl>class MyFrame(wx.Frame):<nl><tab> def __init__(self, parent, id, title):<nl><tab><tab>  wx.Frame.__init__(self, parent, id, title,size=(250, 250))<nl><nl><tab><tab>  topPanel = wx.Panel(self)<nl><nl><tab><tab>  panel1 = wx.Panel(topPanel, -1,pos=(0,100),size=(100,100))<nl><tab><tab>  button1 = wx.Button(panel1, -1, label=\"click me\")<nl><nl><tab><tab>  panel2 = wx.Panel(topPanel, -1,pos=(0,200))<nl><tab><tab>  button2 = wx.Button(panel2, -1, label=\"click me\")<nl><tab><tab>  sizer = wx.BoxSizer(wx.VERTICAL)<nl><tab><tab>  sizer.Add(panel1,0,wx.EXPAND|wx.ALL,border=10)<nl><tab><tab>  sizer.Add(panel2,0,wx.EXPAND|wx.ALL,border=10)<nl><nl><tab><tab>  topPanel.SetSizer(sizer)<nl><nl><nl><nl>class MyApp(wx.App):<nl><tab>  def OnInit(self):<nl><tab><tab><tab>frame = MyFrame(None, -1, 'frame')<nl><tab><tab><tab>frame.Show(True)<nl><tab><tab><tab>return True<nl><nl>app = MyApp(0)<nl>app.MainLoop()","out":"wxpython 2つのパネルレイアウト"}
{"in":"google.appengine.ext.ereporter","out":"Google App Engine上のDjangoでデータベースにエラーをログ出力する。"}
{"in":"import os<nl><nl>def get_file_path(file):<nl><tab> for (root, dirs, files) in os.walk('.'):<nl><tab><tab>  if file in files:<nl><tab><tab><tab><tab>return os.path.join(root, file)","out":"サブディレクトリを指定せずにファイルを開く python"}
{"in":"value=str('6,0865000000e-01')<nl>value2=value.replace(',', '.')<nl>float(value2)<nl>0.60865000000000002","out":"指数から浮動小数点への変換"}
{"in":"x_0 = (points[0].getX())<nl>x_02 = (points[1].getX())<nl>x_1 = (((points[0].getX())\/3)*2 +  (points[1].getX())\/3)<nl>x_2 = (((points[0].getX())\/3)<tab>+ ((points[1].getX())\/3)*2)","out":"シェルピンスキーカーペット再帰 - Python"}
{"in":"context = super(RegistrationView, self).get_context_data(**kwargs)<nl>print(self.get_slug_field())<nl>context['company'] = self.kwargs['company']<nl>context['program'] = self.kwargs['program']","out":"URLからパラメータスラッグを取得する"}
{"in":"fig, ax_f = plt.subplots(nrows=1, ncols=1)","out":"Matplotlib: 図、x軸、minor_locator、major_locatorをまとめる。"}
{"in":"import urllib2<nl>import re<nl>from BeautifulSoup import BeautifulSoup<nl><nl>url = \"http:\/\/forums.epicgames.com\/archive\/index.php?f-356-p-164.html\"<nl>page = urllib2.urlopen(url).read()<nl>soup = BeautifulSoup(page)<nl><nl># Get all the links<nl>links = [str(match) for match in soup('a')]<nl><nl>s = r'<a href=\"http:\/\/forums.epicgames.com\/archive\/index.php\\?t-\\d+.html\">(.+?)<\/a>' <nl>r = re.compile(s)<nl>for link in links:<nl><tab> m = r.match(link)<nl><tab> if m:<nl><tab><tab>  print m.groups(1)[0]","out":"Regex Matching Error（正規表現マッチングエラー"}
{"in":"d1 = {\"dog\":\"woof\", \"cat\":\"meow\"}<nl>d2 = d1.copy() # make a copy, not a reference to the same dictionary<nl>d2[\"dog\"] = \"bark\"<nl>for i in d1:<nl><tab> print(i, d1[i])<nl><nl># dog woof<nl># cat meow","out":"Python（パイソン）：辞書のリンクデータ"}
{"in":"openid.store","out":"python-openidとGoogle Apps Federated Loginのエラーについて。"}
{"in":"import subprocess<nl>server = subprocess.Popen([\"python\", \"manage.py\", \"runserver\"])","out":"IPythonのカーネルが無反応に：IPythonノートブックからDjango開発サーバを起動する"}
{"in":"sorted(list, key=lambda d: int(d[2:]))","out":"文字列のリストをソートするPython"}
{"in":"import sys;<nl>sys.path.insert(0, '\/path\/to\/application\/app(folder)')<nl><nl>import urlregister","out":"アプリからPythonインポートファイル"}
{"in":"pos = mylist.index(max(mylist))","out":"Pythonのリストで最大のアイテムの位置情報を取得する効率的な方法"}
{"in":"class_list = []<nl>class CollectSubclasses(type):<nl><tab> def __new__(cls, name, bases, attrs):<nl><tab><tab>  abstract = False<nl><tab><tab>  if attrs.get('abstract', False):<nl><tab><tab><tab><tab>abstract = True<nl><tab><tab><tab><tab>del attrs['abstract']<nl><tab><tab>  res = super(CollectSubclasses, cls).__new__(cls, name, bases, attrs)<nl><tab><tab>  if not abstract:<nl><tab><tab><tab><tab>class_list.append(res)<nl><tab><tab>  return res<nl><nl>class BaseFoo(object):<nl><tab> __metaclass__ = CollectSubclasses<nl><tab> abstract = True<nl><nl>class Concrete1(BaseFoo):<nl><tab> pass<nl><nl>class Abstract(BaseFoo):<nl><tab> abstract = True<nl><nl>class Concrete2(Abstract):<nl><tab> pass<nl><nl>print class_list","out":"Python で Django の抽象ベースクラスのような振る舞いをするクラスを作るにはどうしたらいいでしょうか。"}
{"in":"list(collection.questions)","out":"Flask-SQLAlchemyを使用している多くの人が、実行されたSQLの代わりに生のSQLを返す。"}
{"in":"items = [{'category': m.category, 'message': m.message}<nl>  for m in h.flash.pop_messages()]","out":"オブジェクトの内容でリストを読み込む"}
{"in":"days_left = 100<nl>units_left = 50<nl>ideal_daily_rate = units_left\/days_left<nl>spend = 1.2*ideal_daily_rate<nl><nl>while (days_left>0):<nl><tab> print( \"days_left: %4.1f unit_left: %4.1f ideal: %5.2f spend: %5.2f\" % (days_left,units_left,ideal_daily_rate,spend))<nl><tab> units_left -= spend<nl><tab> days_left -= 1<nl><tab> if (days_left>0):<nl><tab><tab>  ideal_daily_rate = units_left\/days_left<nl><tab><tab>  spend = 1.2*ideal_daily_rate","out":"numpyでの再帰的な減算"}
{"in":"as_<nl>with_<nl>for_<nl>in_","out":"Pythonの命名において、末尾にアンダースコアを付けるメリットは何ですか？"}
{"in":"import numpy as np<nl><nl>A = np.array([1,2,3,4,5,6,7])<nl>B = np.array([2,4,6])<nl>C = np.searchsorted(A, B)<nl><nl>D = np.delete(np.arange(np.alen(A)), C)<nl><nl>D<nl>#array([0, 2, 4, 6])","out":"numpy配列の各要素が別の配列にあるかどうかをチェックする"}
{"in":"#ID<tab><tab>Postal Code  <nl>data = [<nl><tab> ('1001', 'MK18 1TN'),<nl><tab> ('1001', 'MK18 1TL'),<nl><tab> ('1002', 'HP17 6DG'),<nl><tab> ('1002', 'HP17 6DH'),<nl><tab> ]<nl>d = dict()<nl>for id,pc in data:<nl><tab> if id not in d:<nl><tab><tab>  d[id] = []<nl><tab> d[id].append(pc)<nl>idkeys = d.keys()<nl>idkeys.sort()<nl>for k in idkeys:<nl><tab> print k, ', '.join(d[k])","out":"CSVの行から値をコピーして、IDが同じ行に追加する。"}
{"in":"shape = (QT.shape[2],)*2<nl>result = np.memmap('result.dat', dtype=QT.dtype, mode='w+', shape=shape)<nl>np.dot(QT.T, QT, out=result)","out":"配列のコピーを削除してNumpyドットのパフォーマンスを向上させる"}
{"in":"ssh.exec_command(\"pwd; .\/test.sh \" + str(command))","out":"pythonでexec_commandに変数値を渡すには？"}
{"in":"def checkComm(old_commCount): # passed as a parameter<nl><tab> server = xmlrpclib.ServerProxy(server_uri) # connect to WP server<nl><tab> comments = server.wp.getComments(blog_id, server_admin, admin_pass, filters)<nl><tab> new_commCount = len(comments)<nl><tab> if new_commCount > old_commCount:<nl><tab><tab>  print \"there are new comments\"<nl><tab><tab>  old_commCount = new_commCount<nl><tab><tab>  return old_commCount # return it so you can update it<nl><tab> else:<nl><tab><tab>  print \"no new comments\"<nl><tab><tab>  return old_commCount<nl><nl>comm_count = 0 # initialize it here<nl>while True:<nl><tab> comm_count = checkComm(comm_count) # update it every time<nl><tab> time.sleep(60)","out":"Pythonの関数内で変数に別の値を与えるにはどうすればよいですか？"}
{"in":"import pylab as pl<nl><nl>data = pl.loadtxt(\"myfile.txt\")<nl><nl>pl.figure(figsize=(14,6))<nl>pl.plot(data[:,1], data[:,0], \"b\")<nl>pl.plot(data[:,2], data[:,0], \"r\")<nl>pl.plot(data[:,3], data[:,0], \"r\")<nl><nl>pl.show()","out":"matplotlibを使用して3つのデータセットを1つのプロットにする"}
{"in":"from selenium import webdriver<tab> <nl><nl>driver = webdriver.Firefox()<nl>driver.get('navigate to url')<nl><nl>select_elem = driver.find_element_by_id('TargetRadius')<nl>select_elem.click()<nl>options = select_elem.find_elements_by_tag_name('option')<nl>options[len(options)-1].click()","out":"pythonでseleniumの最後のドロップダウンオプションを選択するにはどうすればよいですか？"}
{"in":"def parse_arguments(s):<nl><tab> openers = \"{[\\\"'(\"<nl><tab> closers = \"}]\\\"')\"<nl><tab> state = []<nl><tab> current = \"\"<nl><tab> for c in s:<nl><tab><tab>  if c == \",\" and not state:<nl><tab><tab><tab>  yield current<nl><tab><tab><tab>  current = \"\"<nl><tab><tab>  else:<nl><tab><tab><tab>  current += c<nl><tab><tab><tab>  if c in openers:<nl><tab><tab><tab><tab>  state.append(c)<nl><tab><tab><tab>  elif c in closers:<nl><tab><tab><tab><tab>  assert state, \"ERROR No Opener for %s\"%c<nl><tab><tab><tab><tab>  assert state[-1] == openers[closers.index(c)],\"ERROR Mismatched %s %s\"%(state[-1],c)<nl><tab><tab><tab><tab>  state.pop(-1)<nl><tab> assert not state, \"ERROR Unexpected End, expected %s\"%state[-1]<nl><tab> yield current<nl><nl>print list(parse_arguments(\"1, bar(x+17, 1), arr = 's,y'\"))","out":"Pythonの関数呼び出しのような文字列を引数に分割する。"}
{"in":"url(r'^[\\w\\-]+\/', include('project.urls_tenant')),","out":"Django マルチテナントUrlsの設定"}
{"in":"result = [item for word in words for item in word.split(',')]","out":"リスト内の項目を分割する"}
{"in":"def example():<nl>  try:<nl><tab> return pickle.loads(\"\")<nl>  except EOFError:<nl><tab> return None","out":"空ファイルを漬けるには？"}
{"in":"import numpy as np<nl>from scipy.interpolate import UnivariateSpline<nl><nl>def make_norm_dist(x, mean, sd):<nl><tab> return 1.0\/(sd*np.sqrt(2*np.pi))*np.exp(-(x - mean)**2\/(2*sd**2))<nl><nl>x = np.linspace(10, 110, 1000)<nl>green = make_norm_dist(x, 50, 10)<nl>pink = make_norm_dist(x, 60, 10)<nl><nl>blue = green + pink<tab><nl><nl># create a spline of x and blue-np.max(blue)\/2 <nl>spline = UnivariateSpline(x, blue-np.max(blue)\/2, s=0)<nl>r1, r2 = spline.roots() # find the roots<nl><nl>import pylab as pl<nl>pl.plot(x, blue)<nl>pl.axvspan(r1, r2, facecolor='g', alpha=0.5)<nl>pl.show()","out":"ピークの全幅半値の求め方"}
{"in":"import time<nl>import curses<nl><nl>stdscr = curses.initscr()<nl><nl>n = 0<nl>b = 0<nl>for _ in range(0, 5):<nl><tab> i = 1<nl><tab> for _ in range(0, 123):<nl><tab><tab>  stdscr.addstr(b, 0, \"Current: %d\" % i)<nl><tab><tab>  i = i + 1<nl><tab><tab>  n = n + 1<nl><tab><tab>  time.sleep(0.01)<nl><tab><tab>  stdscr.addstr(b+1, 0, \"Total: %d\" % n)<nl><tab><tab>  stdscr.refresh()<nl><tab> b = b + 1","out":"Python - forループで2つのカウンターを表示する方法"}
{"in":"import smtplib<nl>smtp_client = smtplib.SMTP('smtp.gmail.com', 587)<nl>smtp_client.starttls()<nl>smtp_client.login(username, password)","out":"Pythonを使ったSMTPの自動化"}
{"in":"request_token_url = 'http:\/\/api.twitter.com\/oauth\/request_token'<nl>access_token_url = 'http:\/\/api.twitter.com\/oauth\/access_token'<nl># This is the slightly different URL used to authenticate\/authorize.<nl>authenticate_url = 'http:\/\/api.twitter.com\/oauth\/authenticate'","out":"リクエストトークンの取得方法を教えてください。"}
{"in":"# NYSE<nl>url_nyse = \"http:\/\/www.nasdaq.com\/screening\/companies-by-name.aspx?letter=0&exchange=nyse&render=download\"<nl># Nasdaq<nl>url_nasdaq = \"http:\/\/www.nasdaq.com\/screening\/companies-by-name.aspx?letter=0&exchange=nasdaq&render=download\"<nl># AMEX<nl>url_amex = \"http:\/\/www.nasdaq.com\/screening\/companies-by-name.aspx?letter=0&exchange=amex&render=download\"<nl><nl>import pandas as pd<nl><nl>df = pd.DataFrame.from_csv(url_nyse)<nl>stocks = df.index.tolist()","out":"ある取引所の全銘柄の株式データを引き出す方法"}
{"in":"import json<nl>import datetime<nl><nl><nl>class Custom_JSONEncoder(json.JSONEncoder):<nl><tab> def default(self, obj, **kwargs):<nl><tab><tab>  if isinstance(obj, datetime.datetime):<nl><tab><tab><tab><tab># Use the appropriate format for datetime<nl><tab><tab><tab><tab>return obj.strftime('%Y-%m-%d %I:%M%p')<nl><tab><tab>  return None","out":"PythonでJSONシリアライズが例外をスローしないようにする"}
{"in":"import dbf<nl><nl>my_table = dbf.Table('\/path\/and\/filename')<nl><nl>with my_table:<nl><tab> my_table.add_fields('header3 N(3,0)')<nl><nl><tab> for record in dbf.Process(my_table):<nl><tab><tab>  record.header3 = record.header1 + record.header2","out":"PythonでDBFからセルを参照する方法は？"}
{"in":"__class__.__name__","out":"pythonのクラス名を取得するにはどうすればよいですか？"}
{"in":"import Tkinter as tk<nl>import threading<nl>import random<nl>import time<nl>from Queue import Queue, Empty<nl><nl>root = tk.Tk()<nl>time_label = tk.Label(root, text='<unknown> seconds')<nl>volt_label = tk.Label(root, text='<unknown> volts')<nl>time_label.pack()<nl>volt_label.pack()<nl><nl>def DAQ(q):<nl><tab> while True:<nl><tab><tab>  q.put((time.time(), random.randrange(100)))<nl><tab><tab>  time.sleep(2)<nl><nl>def update_data(queue, root):<nl><tab> try:<nl><tab><tab>  timestamp, volts = queue.get_nowait()<nl><tab> except Empty:<nl><tab><tab>  pass<nl><tab> else:<nl><tab><tab>  time_label.config(text='{:.1f} seconds'.format(timestamp))<nl><tab><tab>  volt_label.config(text='{:.4f} volts'.format(volts))<nl><tab> root.after(100, update_data, queue, root)<nl><nl>data_queue = Queue()<nl>t = threading.Thread(target=DAQ, args=(data_queue,))<nl>t.daemon = True<nl>t.start()<nl>update_data(data_queue, root)<nl>root.mainloop()","out":"Pythonを用いたデータ取得"}
{"in":"import datetime, pytz<nl><nl>datetime.datetime.now(pytz.timezone('Asia\/Jerusalem')).strftime('%z')<nl><nl># returns '+0300' (because 'now' they have DST)<nl><nl><nl>pytz.timezone('Asia\/Jerusalem').localize(datetime.datetime(2011,1,1)).strftime('%z')<nl><nl># returns '+0200' (because in January they didn't have DST)","out":"タイムゾーン名からUTCオフセットを取得する（Python）。"}
{"in":"import tweepy<nl><nl>CONSUMER_KEY = 'yourconsumerkey'<nl>CONSUMER_SECRET = 'yourconsumersecret'<nl>ACCESS_KEY = 'youraccesskey'<nl>ACCESS_SECRET = 'yoursecret'<nl>auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)<nl>auth.set_access_token(ACCESS_KEY, ACCESS_SECRET)<nl>api = tweepy.API(auth)<nl><nl>search_text = \"#gamedev\"<nl>search_number = 2<nl>search_result = api.search(search_text, rpp=search_number)<nl>for i in search_result:<nl><tab> print i.text","out":"ハッシュタグの最新5件を取得するTweepy Python"}
{"in":"myspline.ev(xI, yI)","out":"SciPyによるPythonでの高速2次元補間 正格子から散布\/不規則評価へ"}
{"in":"is_active = models.BooleanField(default=True)","out":"カスタムユーザーモデル django-allauth で AssertionError が発生する。"}
{"in":"bin_range = [0, 100000]<nl>bin_input = raw_input(\"Enter bins as comma seperated list\")<nl>bin_input_parsed = [int(x.strip()) for x in bin_input.split(',')]<nl><nl>bins = [bin_range[0]] + bin_input_parsed + [bin_range[1]]<nl>pd.cut(df['Quantity'], bins)","out":"ユーザー定義のビンでパンダカット"}
{"in":"db_connection.commit()","out":"SQLiteにデータを入力する"}
{"in":"import urllib<nl>import urllib.request<nl>myurl = \"http:\/\/www.mysite.com\"<nl><nl>sock = urllib.request.urlopen(myurl)<nl>pagedata = str(sock.read())<tab><tab><tab><tab><tab><tab><tab><tab>  <nl>sock.close()<nl><nl>file = open(\"output.txt\",\"w\")<nl>file.write(pagedata)<nl>file.close()","out":"トラブル HTMLからきれいなテキストファイルを取得する"}
{"in":"foo = [\"'the\"]<nl>foo = ['\"the']<nl>foo = ['''\"the''']<nl>foo = [\"\"\"'the\"\"\"]","out":"Pythonのリストの要素の一部としてのシングルクォート"}
{"in":"ages_train = np.array([20, 22, 25, 27, 30, 31, 31, 34, 42, 50])<nl>net_worths_train = np.array([10000, 12000, 16000, 20000, 30000, 33000, 34000, 38000, 49000, 60000])<nl>reg.fit(ages_train[:, np.newaxis], net_worths_train[:, np.newaxis])<nl>print reg.coef_, reg.intercept_","out":"Sklearn線形回帰のXとYの入力フォーマット"}
{"in":"print \"\\t\".join([<nl>data['user']['screen_name'],<nl>str(data['user']['followers_count']), <nl>str(data['user']['friends_count'])<nl>])","out":"Pythonを使ったTwitterのJSONデータからの「ユーザー」データのパース処理"}
{"in":"from Tkinter import *<nl><nl>top = Toplevel()<nl>diagrams = PhotoImage(file='your image')<nl>logolbl= Label(top, image = diagrams)<nl>logolbl.grid()<nl><nl>mainloop()","out":"Tkinterで画像を表示する方法は？"}
{"in":"import urllib2<nl>from xml.etree import ElementTree<nl><nl>result = urllib2.urlopen('http:\/\/boardgamegeek.com\/xmlapi\/boardgame\/13').read()<nl>xml = ElementTree.fromstring(result)<nl>print xml.findtext(\".\/\/age\")","out":"Google App EngineでPythonでxmlをパースする方法"}
{"in":"keys.sort(key=lambda x: [int(y) for y in x.split('.')])","out":"Pythonで文字列形式の数字を並べ替える"}
{"in":"db.session.query(models.Recipe).\\<nl><tab> join(models.Ingredient, models.Recipe.ingredients)<nl><nl>db.session.query(models.Recipe).\\<nl><tab> join(models.Recipe.ingredients)","out":"異なる外部キーを持つ2つのテーブルを結合する"}
{"in":"tDict = {}<nl><nl>with open(\"Lexicon.txt\", \"r\") as infile:<tab> <nl>  for line in infile:<nl><tab> s = line.split()<nl><tab> tDict[s[0]] = s[1]<nl><nl>while True:<nl>  wordIn = input(\"Enter the English word(s) to be translated (enter 'exit' to stop the program): \")<nl><nl>  if wordIn == \"exit\": break<nl><nl>  words = wordIn.split()<nl>  for word in words:<nl><tab> if word in tDict.keys():<nl><tab><tab>print(tDict[word])<nl><tab> else:<nl><tab><tab>print(\"*\" + word)","out":"PythonのPiglatin翻訳機でループを使う"}
{"in":"import os<nl>print os.path.splitext('\/home\/user\/somefile.txt')[0]+'.jpg'","out":"Pythonでファイル名から拡張子を置き換える（または取り除く）にはどうすればよいですか？"}
{"in":"username = request.GET['username']","out":"views.pyでurlパラメータを使用してモデル（User）をフィルタリングする方法は？"}
{"in":"import matplotlib.pyplot as plt<nl>boundaries = collections.OrderedDict([(10,'red'),(20,'blue'),(55,'purple')])<nl>areas = range(0,101)<nl>n, bins, patches = plt.hist(areas, [0]+list(boundaries), histtype='bar', rwidth=1.0)<nl>for (patch,color) in zip(patches,boundaries.values()):<nl><tab> patch.set_color(color)<nl>plt.show()","out":"Pythonで数字をビン詰めして分類するにはどうしたらいいですか？"}
{"in":"lang-id","out":"外国語の検出"}
{"in":"from bson import json_util<nl>json_util.dumps(MyDoc._collection_obj.find(MyDoc.objects()._query))","out":"MongoEngineのドキュメントをJSONで返す"}
{"in":"import urllib2<nl>f = urllib2.urlopen(\"http:\/\/your-url\")<nl>size= f.headers[\"Content-Length\"]<nl>print size","out":"インターネット上でURLだけ知っているファイルサイズを知るには"}
{"in":"import urllib2<nl>try:<nl><tab> data = urllib2.urlopen('http:\/\/www.python.org\/pythonHomePage.html').read()<nl>except urllib2.HTTPError, e:<nl><tab> print e.code<nl><tab> print e.msg<nl><tab> print e.headers<nl><tab> print e.fp.read()<nl><tab> with open(\"code2.txt\", \"wb\") as code:<nl><tab><tab>code.write(e.fp.read())","out":"urllib2 URLを元に任意のファイルを取得し、名前付きファイルに保存する。"}
{"in":"import re<nl><nl>t=re.search(r\"(.+?)\\\\(.+)\\\\(.+)\", reg)<nl>t.groups()<nl>('HKEY_LOCAL_MACHINE', 'SOFTWARE\\\\TT\\\\Tools\\\\SYS', 'exePath')","out":"文字列の分割に関する問題"}
{"in":"import numpy as np<nl><nl>um=np.empty((34,17), dtype='float32') # Make these dimensions \"backwards\" for easier reshaping<nl>vm=np.empty((34,17), dtype='float32') # Also watch out, I believe the default type is float64<nl><nl>f = open(inputfile,'rb')<nl>recl = np.zeros(1,dtype=np.uint32)<nl>for i in range(nm+1):<nl><tab> recl = np.fromfile(f, dtype='uint32', count=1)<nl><tab> tmpu = np.fromfile(f, dtype='float32', count=um.size) # These arrays will be flat<nl><tab> tmpv = np.fromfile(f, dtype='float32', count=vm.size)<nl><tab> recl = np.fromfile(f, dtype='uint32', count=1)<nl><nl><tab> um = np.transpose(np.reshape(tmpu, um.shape))<nl><tab> vm = np.transpose(np.reshape(tmpv, vm.shape))","out":"Fortran 77の未フォーマットのバイナリファイルをPythonに読み込む方法"}
{"in":"from selenium.webdriver.support.ui import WebDriverWait<nl>from selenium.webdriver.common.by import By<nl>from selenium.webdriver.support import expected_conditions as EC<nl><nl>WebDriverWait(self.driver, 10).until(<nl><tab> EC.presence_of_element_located((By.XPATH, '\/\/*[@id=\"toast-container\"]\/div\/div[1][@class=\"ng-binding toast-title\"]'))<nl>)","out":"SeleniumでJSが生成したテキストを取得する方法は？"}
{"in":"import win32com.client<nl>shell = win32com.client.Dispatch(\"WScript.Shell\")<nl>shell.Run(\"outlook\")<nl>shell.AppActivate(\"Outlook\")<nl>shell.SendKeys(\"^o\", 0) # 1 f?r Pause = true 0 f?r nein<nl>shell.SendKeys(\"^a\", 0)<nl>shell.SendKeys(\"^c\", 0)","out":"pythonでプログラムを開いてキー入力を送信するには？"}
{"in":"from flask import Flask, render_template, request, jsonify<nl>import dogo<nl>import traceback<nl><nl>app = Flask(__name__)<nl><nl><nl>@app.route('\/')<nl>def index():<nl><tab> return render_template(\"index.html\")<nl><nl><nl>@app.route('\/_summary', methods=[\"GET\"])<nl>def summary():<nl><tab> try:<nl><tab><tab>  song = request.args.get('a')<tab> <nl><tab><tab>  return jsonify(result=dogo.parse_it_asap(song))<nl><tab> except Exception:<nl><tab><tab>  return traceback.format_exc()<nl><nl>if __name__ == \"__main__\":<nl><tab> app.run(debug = True)","out":"Flaskアプリのリクエストajax GETが500 Internal Server Errorを返す。"}
{"in":"for i, e in enumerate(myList):<nl><tab> key = e[e.index(\"_\"):]<nl><tab> if key not in myDict: continue<nl><tab> myList[i] = myDict[key]","out":"リスト内の文字列を、その末尾をもとに数字に置き換えるには？"}
{"in":"class example:<nl><tab> def GET(self):<nl><tab><tab>  print web.ctx.ip","out":"PythonでリクエストからIPを抽出する。"}
{"in":"from selenium.common.exceptions import NoSuchElementException, ElementNotVisibleException<nl><nl>try:<nl><tab> Ui.find_el(link.AuthorPopupNodes.LOGIN_EMAIL)<nl>except (NoSuchElementException, ElementNotVisibleException):<nl><tab> try:<nl><tab><tab>  Ui.find_el(link.HeaderNodes.LOGOUT_BUTTON)<nl><tab><tab>  self.log_out()<nl><tab> except (NoSuchElementException, ElementNotVisibleException):<tab><nl><tab><tab>  pass<nl><nl><tab> Ui.wait_for_element(link.HeaderNodes.LOGIN_BUTTON, \"Timeout: Wait for Login button!\")<nl><tab> Ui.click_el(link.HeaderNodes.LOGIN_BUTTON)","out":"要素が画面上にあるかどうかを確認する方法"}
{"in":"import sys <nl>class MyNameSpace(object):<nl><tab> def __init__(self,ns):<nl><tab><tab>  self.ns = ns<nl><tab> def __enter__(self):<nl><tab><tab>  globals().update(self.ns)<nl><tab> def __exit__(self, exc_type,exc_value,traceback):<nl><tab><tab>  self.ns.update(sys._getframe(1).f_locals)<nl><nl>my_dict = {'a':3, 'b':2} <nl>with MyNameSpace(my_dict) as ns:<nl><tab> print(a) # Should print 3<nl><tab> x = 5 # When the block finishes, my_dict['x'] should now be 5 <nl><nl>print(my_dict['x'])","out":"with文の中で実行されるコマンドのブロックを取得する"}
{"in":"(\".slave-checkbox\")","out":"Djangoでチェックボックスを全選択する。"}
{"in":"import tarfile<nl>tar = tarfile.open(\"file.tgz\")<nl>for file in tar.getmembers():<nl><tab> print file.name","out":"pythonでtgzファイルのディレクトリ構造を取得する"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy<nl><nl>x = numpy.arange(10.)<nl>d = dict((i, numpy.sin(x+i)) for i in range(5))<nl><nl>for k in sorted(d):  # sort purely to make deterministic<nl><tab> plt.plot(x,d[k],label=str(k))<nl><nl>plt.legend(loc=2)<nl>plt.draw()","out":"動的なデータセットに対して、legend()はどのように機能するのでしょうか？"}
{"in":"with open('Path\/to\/file', 'r') as content_file:<nl><tab> content = content_file.read()<nl><tab> print(content.count(\"Methadone\"))","out":"csvファイル内の特定の文字列の出現回数をカウントする。"}
{"in":"tri_crop[tri_crop == 0] = tri_warp[tri_crop == 0]","out":"回転したROIにシームレスな結合を行う"}
{"in":"import numpy as np<nl><nl>#here y2 is the new extrapolated array<nl>y2 = np.interp(x2,x1,y1)","out":"Python の配列で、要素間の間隔が不揃いなものを外挿する。"}
{"in":"class ConversationManager(models.Manager):<nl><tab> def has_all(self, participants):<nl><tab><tab>  # Start with all conversations<nl><tab><tab>  reducedQs = self.get_query_set()<nl><tab><tab>  for p in participants:<nl><tab><tab><tab><tab># Reduce to conversations that have a participant \"p\" <nl><tab><tab><tab><tab>reducedQs = reducedQs.filter(participants__id=p.id)<nl><tab><tab>  return reducedQs","out":"Django M2M QuerySet が複数の外部キーでフィルタリングする。"}
{"in":"import pycurl, json<nl><nl>github_url = 'https:\/\/api.postmarkapp.com\/email'<nl><nl>data = json.dumps({\"From\": \"user@example.com\", \"To\": \"receiver@example.com\", \"Subject\": \"Pycurl\", \"TextBody\": \"Some text\"})<nl><nl>c = pycurl.Curl()<nl>c.setopt(pycurl.URL, github_url)<nl>c.setopt(pycurl.HTTPHEADER, ['X-Postmark-Server-Token: API_TOKEN_HERE','Accept: application\/json'])<nl>c.setopt(pycurl.POST, 1)<nl>c.setopt(pycurl.POSTFIELDS, data)<nl>c.perform()","out":"curlのサンプルをpycurlに変換する"}
{"in":"def query(id):<nl><tab> for line in file:<nl><tab><tab>  table = {}<nl><tab><tab>  (table[\"ID\"],table[\"name\"],table[\"city\"]) = line.split(\";\")<nl><tab><tab>  if id == int(table[\"ID\"]):<nl><tab><tab><tab><tab> file.close()<nl><tab><tab><tab><tab> return table<nl><tab> # ID not found; close file and return empty dict<nl><tab> file.close()<nl><tab> return {}","out":"辞書を返す方法｜Python"}
{"in":"thisCell = [ numpy.zeros(shape=(i,j,k)) for t in range(1, Nmax) ]","out":"PythonでMatlabのセルライク構造"}
{"in":"base.html","out":"ハイフンを含むdjangoのUrlに関する問題"}
{"in":"s.get(url)","out":"Python Requests - 要素の値が見つからない"}
{"in":"output = sorted([1] * k + [0] * (n - k), key=lambda k: random.random())","out":"長さnのブール語のピストニックランダムリストで、ちょうどk個の真偽を持つ。"}
{"in":"re.findall(\"[A-Za-z]+\", \"Toronto, Ontario, Canada\", 0)[1]<nl>'Ontario'<nl><nl>re.findall(\"[A-Za-z]+\", \"California - LA\", 0)[1]<nl>'LA'","out":"pysparkでRDDから部分文字列を選択する。"}
{"in":"[{'a':v, 'b':v, 'c':c} <nl><tab> for (l, c) in zip((l_Y, l_Z), ('Y', 'Z')) <nl><tab><tab>  for v in l]","out":"2つのリストを辞書に登録する - python"}
{"in":"l1 = [1,2,3]<nl>l2 = [4,5,6]<nl><nl>newl = []<nl>for item1, item2 in zip(reversed(l1), reversed(l2)):<nl><tab> newl.append(item1)<nl><tab> newl.append(item2)<nl><nl>print newl","out":"2つのリストからの値で新しいリストを作成する。"}
{"in":"fields = ax.stackplot(df.index,df.field1,df.field2)<nl>colors = [field.get_facecolor()[0] for field in fields]<nl>patch1=mpl.patches.Patch(color=colors[0],label= 'field 1')<nl>patch2=mpl.patches.Patch(color=colors[1], label ='field 2')","out":"python matplotlib: スタックプロットにラベルを追加し、その色を正しく設定する。"}
{"in":"#Initiating Variables for use by importing functions<nl>module_name = 'mymod'<nl>filename = 'action_file'<nl>source = PossibleMatches[0][1] #the source code from the best matched option<nl><nl># define module_name somewhere<nl>import types<nl>module = types.ModuleType(module_name)<nl><nl># source should the code to execute<nl># filename should be a pseudo-filename that the code's from<nl># (it doesn't actually have to exist; it's used for error messages)<nl>code_object = compile(source, filename, 'exec')<nl><nl>#execute the code in the context of the module<nl>exec code_object in module.__dict__<nl><nl>#Executing the 'Main' Function from the code<nl>return module.Main()","out":"Google App Engine上でPythonコードを動的に実行する。"}
{"in":"#!\/usr\/bin\/python<nl><nl>f = open(\"blah.txt\");<tab><tab> # open file<nl>for line in f:<tab><tab><tab><tab>  # iterate over lines in file<nl>  line = line.strip()<tab><tab> # strip leading and trailing white space<nl>  print (\",\" + line + \",\")  # print line between commas<nl>f.close() # close file<tab><tab># close file when done","out":"Pythonでカンマで始まり、カンマで終わるプリント？"}
{"in":"members = QuerySelectMultipleField(query_factory=get_members)","out":"WTFormsとSQLAlchemyで多対多の関係を入力するにはどうすればよいですか？"}
{"in":"import io<nl>import re<nl>import sys<nl><nl>file = io.StringIO('''<nl>title|Head1|Head2|Head3|head4 <nl>----|------|-----|-----|<nl>1|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>2|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>3|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>4|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>5|1150976|0|25300992|bfa92720\/bfa924f8|su|(None, None)<nl>All|processes:|MemAlloc|=|408125440|(None, None)|0.0.0.0<nl>|(None, None)<nl>0.0.0.0 ,text<nl>''')<nl><nl>sys.stdout.writelines(line for line in file if re.match('\\d+\\|', line))","out":"Python 3: Regexによる2つの条件のマッチング"}
{"in":"r = requests.get(\"https:\/\/api.imgur.com\/3\/gallery\/r\/earthporn\/top\/\")","out":"ImgurからJSON形式のデータを要求するための正しいAPIコール？"}
{"in":"import csv<nl>import os<nl><nl>os.chdir(r\"C:\\Users\\Robert\\Documents\\qwe\")<nl><nl>output_ary = []<nl>with open(\"gdweights_feh_robert_cmr.csv\",'rb') as f:<nl><tab> reader = csv.reader(f, delimiter= ',')<nl><tab> zerovar = 0<nl><tab> for row in reader:<nl><tab><tab>  if zerovar==0:<nl><tab><tab><tab><tab>zerovar = zerovar + 1<nl><tab><tab>  else:<nl><tab><tab><tab><tab>sn = row [11]<nl><tab><tab><tab><tab>zerovar = zerovar + 1<nl><tab><tab><tab><tab>x = float(sn)<nl><tab><tab><tab><tab>if x > 20:<nl><tab><tab><tab><tab><tab> print x<nl><tab><tab><tab><tab><tab> output_ary.append(row)<nl><nl>with open(\"output.csv\",'w') as f2:<nl><tab> for row in output_ary:<nl><tab><tab>  for item in row:<nl><tab><tab><tab><tab>f2.write(item + \",\")","out":"pythonでcsvドキュメントの特定の行を検索する方法"}
{"in":"import re<nl>import fileinput<nl><nl>#  write concepts which are not not in log<nl><nl>with open(\"log.txt\", 'r') as f,  open(\"substance.txt\", \"r\") as oldfile, open('new_substance.txt', 'w') as newfile:<nl><tab> # read f only once and convert it to a list<nl><tab> logList = list(f)<nl><tab> # remove everything that exists in f either with a +\\t or a -\\t<nl><tab> withconceptsremoved = [x for x in oldfile if ('-\\t'+x not in logList and '+\\t'+x not in logList)]<nl><tab> # convert to string and write to file<nl><tab> withconceptsremoved = \"\".join(withconceptsremoved)<nl><tab> newfile.write(withconceptsremoved)<nl><tab> #  so the new file only has comments which are neither positive or negative in log.  If we now copy positive ones, we've removed the negatives<nl><tab> #  write new additions to bottom of new file <nl><tab> for line in logList:<nl><tab><tab>  if '+\\t' in line:<nl><tab><tab><tab><tab>addedconcept = line.replace('+\\t','1\\t')<nl><tab><tab><tab><tab>newfile.write(addedconcept)","out":"python: 2つのファイルの間でユニークな値を見つけることによってファイルを更新し、さらにデータを底に追加する。"}
{"in":"background.save(\"result.png\")","out":"PIL ブレのない貼り付け画像"}
{"in":"from traits.api \\<nl><tab> import HasTraits, Button, Range, Float<nl>from traitsui.api \\<nl><tab> import View, Item, Group, RangeEditor<nl>from traitsui.qt4.extra.bounds_editor import BoundsEditor<nl><nl>class Parameters(HasTraits):<nl><tab> rgb_range = Range(0.,1.0)<nl><tab> range1 = rgb_range<nl><tab> range2 = rgb_range<nl><tab> low_val = Float(0.0)<nl><tab> high_val = Float(1.0)<nl><tab> eval_button = Button(\"Eval\")  <nl><nl><tab> traits_view= View(<nl><tab><tab>  Item('range1', editor=RangeEditor()),<nl><tab><tab>  Item('range2', editor=BoundsEditor(low_name = 'low_val', high_name = 'high_val')),<nl><tab><tab>  Item('eval_button'))<nl><nl><nl><tab> def _range1_changed(self, value):<nl><tab><tab>  print(value)<nl><nl><tab> def _low_val_changed(self):<nl><tab><tab>  print(self.low_val)<nl><nl><tab> def _high_val_changed(self):<nl><tab><tab>  print(self.high_val)<nl><nl><tab> def _eval_button_fired(self):<nl><tab><tab>  print(self.range1)<nl><tab><tab>  print(self.low_val)<nl><tab><tab>  print(self.high_val)<nl><nl>if __name__ == '__main__':<nl><tab> alg = Parameters()<nl><tab> alg.configure_traits()","out":"TraitsUIにおけるBoundsEditorの使用方法"}
{"in":"import re<nl><nl>js = open(\"yourfile.js\", \"r\").readlines()[:2]<nl><nl>matcher_rex = re.compile(r'^var\\s+(?P<varname>\\w+)\\s+=\\s+\"(?P<varvalue>[\\w\\s]+)\";?$')<nl>for line in js:<nl><tab> matches = matcher_rex.match(line)<nl><tab> if matches:<nl><tab><tab>  name, value = matches.groups()<nl><tab><tab>  print name, value","out":"PythonでファイルからJavaScriptの変数を読み込む"}
{"in":"#Usage: response.set_cookie( 'cookie_name', 'cookie_value' )<nl><nl>class RefererMiddleware(object):<nl><tab> def process_response(self, request, response):<nl><tab><tab>  if not request.COOKIES.has_key( 'HTTP_REFERER' ):<nl><tab><tab><tab><tab>response.set_cookie( 'HTTP_REFERER', request.META.get('HTTP_REFERER') )<nl><tab><tab>  return response","out":"ランディングページの情報として使うためにHTTP_REFERERを保存するDjango"}
{"in":"import multiprocessing<nl>import time<nl><nl>def process(x):<nl><tab> time.sleep(1)<nl><tab> return x<nl><nl>if __name__ == '__main__':<nl><tab> jobs = range(100)<nl><tab> pool = multiprocessing.Pool(20)<nl><tab> for result in pool.imap_unordered(process, jobs):<nl><tab><tab>  print(result)<nl><tab> pool.close()<nl><tab> pool.join()","out":"pythonのマルチプロセシングスロット"}
{"in":"cb = {}<nl>for link in br.links(url_regex=\"inquiry-results.jsp\"):<nl><tab> cb[link.url] = link<nl>print cb.values()","out":"Pythonのmechnizeを使用して生成されたLinksの重複を削除する方法は？"}
{"in":"import time<nl>import wx<nl><nl>class MyFrame(wx.Frame):<nl><tab> def __init__(self, *args, **kargs):<nl><tab><tab>  wx.Frame.__init__(self, *args, **kargs)<nl><tab><tab>  self.bt = wx.Button(self)<nl><tab><tab>  self.status = ProgressStatusBar(self)<nl><tab><tab>  self.sizer = wx.BoxSizer(wx.VERTICAL)<nl><nl><tab><tab>  self.Bind(wx.EVT_BUTTON, self.on_bt, self.bt)<nl><nl><tab><tab>  self.sizer.Add(self.bt, 1, wx.EXPAND)<nl><tab><tab>  self.sizer.Add(self.status, 1, wx.EXPAND)<nl><nl><tab><tab>  self.SetSizer(self.sizer)<nl><tab><tab>  self.Fit()<nl><tab><tab>  self.SetSize((500,200))<nl><nl><tab> def on_bt(self, evt):<nl><tab><tab>  \"press the button and it will start\" <nl><tab><tab>  for n in range(100):<nl><tab><tab><tab><tab>time.sleep(0.1)<nl><tab><tab><tab><tab>self.status.SetProgress(n)<nl><tab><tab><tab><tab>self.Update()<nl><nl>if __name__ == '__main__':<nl><tab> app = wx.PySimpleApp()<nl><tab> frame = MyFrame(None)<nl><tab> frame.Show()<nl><tab> app.MainLoop()","out":"Cody PrecordのProgressStatusBarを使用した、ステータスバーのプログレスゲージ。"}
{"in":"pairs = int(raw_input(\"How many pairs do you have?\"))<nl>for pair_n in xrange(1, pairs + 1):<nl>  file1 = raw_input(\"pair%d-a: \" % pair_n)<nl>  file2 = raw_input(\"pair%d-b: \" % pair_n)<nl>  cmd = \"samtools merge pair%d.bam '%s' '%s'\" % (pair_n, file1, file2)<nl>  # os.system(cmd) to run the command.","out":"pythonで、後でコマンドラインで使用できる数字のシーケンスを生成するにはどうすればよいですか？"}
{"in":"import os<nl>os.chdir('\/foo\/bar')<nl>f = open('foobar.txt', 'r')","out":"異なるディレクトリからpythonでファイルを読み込む"}
{"in":"def find_root(f, a, b, EPS=0.0001):<nl>  if f(a)==0 : return a<nl>  if f(b)==0 : return b<nl>  if f(a)*f(b)>0 : return None<nl>  c=(a+b)\/2<nl>  while(abs(f(c))>EPS) :<nl><tab> if f(a)*f(c)<0 : b=c<nl><tab> else : a=c<nl><tab> c=(a+b)\/2<nl>  return c","out":"中間値の定理を使った数学関数の根の求め方とは？"}
{"in":"def gen_command_string(path, url):<nl><tab> cmd = path + 'TortoiseProc.exe \/command:ignore \/path:\\\"%s\\\" \/closeonend:0' % url<nl><tab> return cmd<nl><nl>SVN_PATH = 'C:\/Program Files\/TortoiseSVN\/bin'<nl>HG_PATH = 'C:\/Program Files\/TortoiseHg\/bin\/'<nl><nl>cmd = gen_command_string(SVN_PATH, 'http:\/\/google.com')<nl>call(cmd)","out":"複数のTortoiseクライアント（Git、SVN）をインストールしている場合、pythonスクリプトが正しいTortoise.exeを見つけるようにするにはどうしたらよいでしょうか。"}
{"in":"file_name = files.blobstore.create(mime_type='image\/png',_blobinfo_uploaded_filename=file_name_from_url)","out":"BlobStoreでfilenameプロパティを設定する方法は？"}
{"in":"import collections<nl>import heapq<nl><nl>Node = collections.namedtuple('Node', ['v', 'children'])<nl><nl>def min_depth_bfs(root):<nl><tab> todo = [(1, root)]<nl><tab> while todo:<nl><tab><tab>  depth, node = heapq.heappop(todo)<nl><tab><tab>  if not node.children: return depth, node<nl><tab><tab>  for c in node.children:<nl><tab><tab><tab><tab>heapq.heappush(todo, (depth + 1, c))<nl><nl>def min_depth_dfs(node):<nl><tab> if not node.children: return 1, node<nl><tab> d, n = min(min_depth_dfs(c) for c in node.children)<nl><tab> return 1 + d, n<nl><nl>example = Node(8, [Node(3, [Node(1, [])]), Node(10, [])])<nl><nl>print min_depth_dfs(example)<nl>print min_depth_bfs(example)","out":"バイナリーツリーの最小深さを計算する方法"}
{"in":"batchIDlist = []<nl><nl>for s3_file in bucket.list(prefix='Download\/test_queue1\/'):<nl><tab> batchID = str((s3_file.name).split(\"\/\"))[32:-13]<nl><nl><tab> if batchID not in batchIDlist:<nl><tab><tab>  batchIDlist.append(batchID)","out":"AWS S3バケットからオブジェクトのユニークリストを取得する方法"}
{"in":"d=np.array(dataPoints.tolist())","out":"ネストしたデータのリストを多次元のNumpy配列に変換する"}
{"in":"tabsplit=line.split()","out":"ファイルの分割と特定のインデックスにアクセスする方法 python"}
{"in":"def altElement(a):<nl><tab> return a[::2]","out":"最初の要素以降、他のすべての要素をスキップする"}
{"in":"scipy.stats.f_oneway(*archive.values())","out":"スクリプトでscipyのoneway anovaを実行する。"}
{"in":"class decorator(object):<nl><tab> def __init__(self, functor):<nl><tab><tab>  self.functor = functor<nl><nl><tab><tab>  #  lets copy some key attributes from the original function<nl><tab><tab>  self.__name__ = functor.__name__<nl><tab><tab>  self.__doc__ = functor.__doc__<nl><nl><tab> def __call__(self, *args, **kwargs):<nl><tab><tab>  return self.functor(*args, **kwargs)<nl><nl><tab> def __repr__(self):<nl><tab><tab>  return '<function %s created by ...>' % self.functor.__name__<nl><nl><nl>@decorator<nl>def f():<nl><tab> return 'spam'<nl><nl><nl>print f()  # spam<nl>print repr(f)  # <function hehe created by ...>","out":"Pythonの関数の表現を変えるにはどうしたらいいですか？"}
{"in":"tup = (2009, 3, 23, 13, 6, 34, 0, 82, 0)<nl>import datetime <nl>d = datetime.datetime(*(tup[0:6]))<nl>#two equivalent ways to format it:<nl>dStr = d.isoformat(' ')<nl>#or<nl>dStr = d.strftime('%Y-%m-%d %H:%M:%S')","out":"Python, 9タプルのUTC日付をMySQLのdatetime形式に変換する。"}
{"in":"data = [{\"name\": \"John\", \"age\": \"20\", \"occupation\": \"Python pro\"}, \\<nl><tab><tab>  {\"name\": \"Jack\", \"age\": \"80\", \"occupation\": \"Olympic Athlete\"}, \\<nl><tab><tab>  {\"name\": \"John\", \"age\": \"20\", \"occupation\": \"Student\"}]<nl><nl>new_data = []<nl>names_ages = set([])<nl>for d in data:<nl><tab> name_age = (d[\"name\"], d[\"age\"])<nl><tab> if name_age not in names_ages:<nl><tab><tab>  new_data.append(d)<nl><tab> names_ages.add(name_age)<nl><nl>print new_data<nl># [{'age': '20', 'name': 'John', 'occupation': 'Python pro'},<nl>#  {'age': '80', 'name': 'Jack', 'occupation': 'Olympic Athlete'}]","out":"特定の値でフィルタリングされるべき辞書のリスト"}
{"in":"print(\"Sisesta isikukood\")<nl>isikukood = str(input())<nl><nl>if (isikukood[:1] == '1' or isikukood[:1] == '3' or isikukood[:1] == '5'):<nl><tab> print(\"He\")<nl>elif isikukood[:1] == '2' or isikukood[:1]== '4' or isikukood[:1] == '6':<nl><tab> print(\"She\")<nl>else:<nl><tab> print(\"Vale isikukood\")","out":"ユーザー入力の最初の数字を読み込む"}
{"in":"class Abc(object):<nl><tab> pass<nl><nl>def new_funct(self):<nl><tab> print 1234<nl><nl>Abc.instance_funct = new_funct<nl>a = Abc()<nl>a.instance_funct()","out":"Pythonです：クラスを拡張する方法は？"}
{"in":"import maya.cmds as mc<nl><nl>Shader = mc.ls(type = 'surfaceShader')<nl>for i in Shader:<nl><tab> con = mc.listConnections('%s.outColor' % i)<nl><tab> names = mc.listConnections(con, type=\"mesh\")<nl><tab> print i, \"->\", \", \".join(names)","out":"シェーダーが割り当てられたメッシュの名前を取得する"}
{"in":"import numpy as np<nl>data = np.random.randn(3000000,50)<nl>newData = data.reshape(300,10000,50) # This is as [300,10000,50] array<nl><nl>print newData[0,...] # Show the first matrix, 1 of 300","out":"pythonで2次元配列から3次元配列に変換する。"}
{"in":"id_array = [x.id for x in _get_object_array() if x.id % 2 == 0]","out":"Pythonの条件付きforループ"}
{"in":"import pandas as pd<nl>DF = pd.DataFrame({'COL1': [1.0,2.0,\"A\"]})<nl><nl>def ToInt(x):<nl><tab> try:<nl><tab><tab>  x = int(x)<nl><tab> except:<nl><tab><tab>  pass<nl><tab> return x<nl><nl>DF.index = [ToInt(x) for x in DF.COL1]<nl>DF","out":"型が混在する整数としてのインデックスを設定する"}
{"in":"keys_to_print = ['1', '3', '20', '23', '45', '46']<nl>for key in keys_to_print:<nl><tab> print d[key] + ' ',","out":"Pythonで辞書から選択されたキー値を表示する最も簡単な方法は何ですか？"}
{"in":"def testOne(self):<nl><tab> \"\"\"Test IsOdd(1)\"\"\"<nl><tab> self.failUnless(IsOdd(1))<nl><nl>def testTwo(self):<nl><tab> \"\"\"Test IsOdd(2)\"\"\"<nl><tab> self.failIf(IsOdd(2))","out":"Python unittest、より良いグループ\/テスト名を表示する方法は？"}
{"in":"import bugzilla<nl>bz = bugzilla.Bugzilla(url=\"https:\/\/bugzilla.kernel.org\")<nl><nl>print bz._proxy.Bug.fields({\"names\" : [\"rep_platform\"]})","out":"python-bugzilla xml-rpcからフィールドの値を取得する方法。"}
{"in":"sorted(set(s[a:b] for a in range(n) for b in range(a+1,n+1)),<nl><tab><tab> key=lambda x:(len(x),x))","out":"Pythonのソート：サブストリング"}
{"in":"x=[\"123\",\"456.678\",\"abc.def.ghi\"]<nl>[y.rsplit(\".\",1)[0] for y in x]","out":"Pythonによる配列の全要素の文字列操作"}
{"in":"string1.rstrip(\"-\")<nl># \"title\"<nl>string2.rstrip(\"-\")<nl># \"title\"<nl>string3.rstrip(\"-\")<nl># \"title-is-a-title\"","out":"文字列から末尾のダッシュをすべて削除するにはどうすればよいですか？"}
{"in":"filter_stmt.append(func.text(Multicast.addr).like(stmt))","out":"flask-adminでテキスト以外のカラムを検索する。"}
{"in":"# importing numpy as np and<nl># assign a ndarray to x<nl>ind = np.nonzero(x)[-k:]","out":"MATLAB find関数のpythonへの翻訳 - 3入力引数版"}
{"in":"def extract_data_one():<nl><tab> for item in sites:<nl><tab><tab>  os.chdir(r\"\\\\svr-dc\\ftp site\\%s\\Daily\" % item)<nl><tab><tab>  subprocess.call(['7z', 'e', 'data1.zip', '*.*'])","out":"7zはサブプロセスを使用してアーカイブを見つけることができません。"}
{"in":"df.to_csv(path, mode='a')","out":"Pandasでデータの行を新しいデータフレームに連結する"}
{"in":"{<nl><tab><tab>  \"_id\" : {<nl><tab><tab><tab><tab><tab> \"value\" : 1<nl><tab><tab>  },<nl><tab><tab>  \"value\" : 3<nl>}","out":"MongodbのMap Reduceのキーになる整数値"}
{"in":"import random<nl>import sys<nl><nl>def random_line(file_handle):<nl><tab> lines = file_handle.readlines()<nl><tab> num_lines = len(lines)<nl><nl><tab> random_line = None<nl><tab> while not random_line:<nl><tab><tab>  random_line_num = random.randint(0, num_lines - 1)<nl><tab><tab>  random_line = lines[random_line_num]<nl><tab><tab>  random_line = random_line.strip()<nl><nl><tab> return random_line<nl><nl>file_handle = None<nl><nl>if len(sys.argv) < 2:<nl><tab> sys.stderr.write(\"Reading stdin<nl>\")<nl><tab> file_handle = sys.stdin<nl>else:<nl><tab> file_handle = open(sys.argv[1])<nl><nl>print(random_line(file_handle))<nl><nl>file_handle.close()","out":"テキストファイルからランダムに1行を読み込む関数"}
{"in":"def generate_primes(n):<nl>  from math import sqrt<nl>  primes=[]<nl>  potentialPrimes=range(2,n+1)<nl>  prime=potentialPrimes[0]<nl>  while prime<sqrt(n):<nl><tab><tab>primes.append(prime)<nl><tab><tab>potentialPrimes.remove(prime)<nl><tab><tab>for potential in potentialPrimes:<nl><tab><tab><tab> if potential%prime==0:<nl><tab><tab><tab><tab>  potentialPrimes.remove(potential)<nl><tab><tab>prime=potentialPrimes[0]<nl><nl>  for potential in potentialPrimes:<nl><tab><tab>primes.append(potential)<nl>  for number in primes:<nl><tab><tab>print number","out":"1〜nの素数を生成しようとしているが、一貫して素数3と素数5が欠けている？"}
{"in":"def getPoints(connectionList):<nl><tab> firstConnection = connectionList[0]<nl><tab> points = [firstConnection[1][1]]<nl><tab> lastLine = firstConnection[1][0]<nl><nl><tab> connectionList.remove(firstConnection)<nl><nl><tab> while len(connectionList):<nl><tab><tab>  for connection in list(connectionList):<nl><tab><tab><tab><tab>(line1, p1), (line2, p2) = connection<nl><tab><tab><tab><tab>if lastLine == line1 or lastLine == line2:<nl><tab><tab><tab><tab><tab> points.append(p1)<nl><tab><tab><tab><tab><tab> lastLine = line1 if lastLine == line2 else line2<nl><tab><tab><tab><tab><tab> connectionList.remove(connection)<nl><tab><tab><tab><tab><tab> break<nl><tab> return points","out":"タプル、リストのリストによるオブジェクトの検索とマッチング"}
{"in":"# not fair<nl>serving = 'A'<nl><nl># note: we assume probA + probe == 1.0<nl><nl># initial serving is decided by players' skill<nl>serving = 'A' if probA > random() else 'B'<nl><nl># or, initial serving is decided by a coin<nl>serving = 'A' if 0.5 > random() else 'B'","out":"当選回数を計算するコードでrandom()を使っていますが、結果は予想通りです。"}
{"in":"line = line.decode('unicode_escape').encode('latin-1').decode('utf8')","out":"Python 3を使用して16進文字を読み、utf-8に変換する。"}
{"in":"nx,ny = smallerArray.shape<nl>largeArray[0:nx,0:ny] = smallerArray[0:nx,0:ny]","out":"Python - 設定されたサイズのNumpy配列にコピーする。"}
{"in":"logging.info('Altitude:%s' % gpsd.fix.altitude)","out":"Pythonでテキストと変数を同じ行に記録するにはどうしたらいいですか？"}
{"in":"# -*- coding: utf-8 -*-<nl>import curses<nl><nl>screen = curses.initscr()<nl>curses.noecho()<nl>curses.mousemask(curses.ALL_MOUSE_EVENTS)<nl><nl>screen.keypad(1)<nl><nl>char = \"\"<nl><nl>try:<nl><tab> while True:<nl><tab><tab>  char = screen.getch()<nl><nl><tab><tab>  screen.addstr( str(char) + \" \")<nl><tab><tab>  if char == curses.KEY_MOUSE:<nl><tab><tab><tab><tab>screen.addstr (\" |\" + str(curses.getmouse()) + \"| \")<nl><nl>finally:<nl><tab> screen.keypad(0)<nl><tab> curses.endwin()<nl><nl><tab> curses.echo()","out":"cursesベースのUIを実現するスライダー"}
{"in":"dictionary = {'a':'n', 'b':'o', 'c':'p',<nl><tab><tab><tab><tab> 'd':'q', 'e':'r', 'f':'s',<nl><tab><tab><tab><tab> 'g':'t','h':'u','i':'v',<nl><tab><tab><tab><tab> 'j':'w', 'k':'x','l':'y',<nl><tab><tab><tab><tab> 'm':'z','n':'a','o':'b',<nl><tab><tab><tab><tab> 'p':'c','q':'d','r':'e',<nl><tab><tab><tab><tab> 's':'f','t':'g','u':'h',<nl><tab><tab><tab><tab> 'v':'i', 'w':'j','x':'k',<nl><tab><tab><tab><tab> 'y':'l','z':'m'}<nl><nl>def rot(xy):<nl><tab> rot13 = ''<nl><tab> for c in xy:<nl><tab><tab>  if c.islower():<nl><tab><tab><tab><tab>rot13 += dictionary.get(c)<nl><tab><tab>  if c.isupper():<nl><tab><tab><tab><tab>c = c.lower()<nl><tab><tab><tab><tab>rot13 += dictionary.get(c).capitalize()<nl><tab><tab>  if c not in dictionary:<nl><tab><tab><tab><tab>rot13 += c<nl><tab> print \"ROTTED: \", rot13  <nl><tab> return rot13","out":"このROT13ファンクションをどう再利用するか"}
{"in":"list.sort(key=lambda x: x[0][1])","out":"Python リスト要素でリストをソートする方法"}
{"in":"#!\/usr\/bin\/python<nl>import csv<nl><nl>with open('text_file.txt') as input_file:<nl><tab> csv_data = []<nl><nl><tab> for row in csv.reader(input_file, delimiter=','):<nl><tab><tab>  csv_data += [[row[0], int(row[1].strip()) + 10]]<nl><nl><tab> convert_to_csv = True<nl><nl><tab> if convert_to_csv:<nl><tab><tab>  with open('input.csv', 'w') as output_file:<nl><tab><tab><tab><tab>csv_file = csv.writer(output_file, delimiter=',')<nl><tab><tab><tab><tab>csv_file.writerow(['Text', 'Count'])<nl><nl><tab><tab><tab><tab>for row in csv_data:<nl><tab><tab><tab><tab><tab> csv_file.writerow(row)","out":"PythonでCSV計算。一覧からデータを取得する"}
{"in":"while True: <nl><tab> sleep_now = False<nl><tab> try:<nl><tab><tab>  print \"WRITER:Getting\"<nl><tab><tab>  line,offset = self.queue.get(True, 5)<nl><tab><tab>  #Process the line just read<nl><tab><tab>  proc_line = self.process_line(line)<nl><tab><tab>  if proc_line: <nl><tab><tab><tab><tab>#Must write it to DB. Put it into DB Queue<nl><tab><tab><tab><tab>if self.dbqueue.full(): <nl><tab><tab><tab><tab><tab> #DB Queue is full, put data into DB before putting more data<nl><tab><tab><tab><tab><tab> self.empty_dbqueue()<nl><tab><tab><tab><tab>self.dbqueue.put(proc_line)<nl><tab><tab><tab><tab>#Keep a track of the maximum offset in the queue<nl><tab><tab><tab><tab>self.queue_offset = offset if offset > self.queue_offset else self.queue_offset<nl><tab> except Queue.Empty: <nl><tab><tab>  #Looks like writing queue is empty. Just check if DB Queue is empty too<nl><tab><tab>  print \"WRITER: Empty Read Queue\"<nl><tab><tab>  self.empty_dbqueue()","out":"マルチプロセッシングを利用したファイルプロセッサー"}
{"in":"url = 'http:\/\/webapps.rrc.state.tx.us\/CMPL\/viewPdfReportFormAction.do?method=cmplP4FormPdf&packetSummaryId=97770'<nl><nl>req = urllib2.Request(url)<nl>req.add_unredirected_header('User-Agent', 'Mozilla\/5.0')<nl><nl>file_pointer = urllib2.urlopen(req)<nl>print file_pointer.getcode()<nl>print file_pointer.geturl();","out":"Pythonでurllib2とリクエストを使ってページをダウンロードしようとすると、リダイレクトされ続けます。"}
{"in":"GAE_SETTINGS_MODULES = (<nl><tab> 'maps.gae_models_settings',<nl>)","out":"django nonrel \/ App Engineでフィールド単位のインデックスを管理する。"}
{"in":"with open(\"test.csv\",\"wa\") as f:<nl><tab> f.write(\"name\\tnum<nl>\")<nl><tab> for k, v in tripo.items():<nl><tab><tab>  if v:<nl><tab><tab><tab><tab>f.write(\"1\\t\")<nl><tab><tab><tab><tab>f.write(\"{}<nl>\".format(k.split('.')[0]))<nl><tab><tab><tab><tab>for s in v:<nl><tab><tab><tab><tab><tab> f.write(\"1\\t{}<nl>\".format(s.split('.')[0]))","out":"Pythonで出力ファイルに新しい列を追加する方法は？"}
{"in":"list3=list1[:10]+list2[:20]","out":"pythonでリストから要素を取得する"}
{"in":"#!\/usr\/bin\/python<nl>a = []<nl>b = []<nl>nums = raw_input(\"Enter input- \")<nl>#append all to a list<nl>for n in nums.split():<nl><tab> n = int(n)<nl><tab> if n < 0:<nl><tab><tab>  break<nl><tab> a.append(n)<nl><nl>#get the maximums<nl>b = list(a)<nl>first_max = max(b)<nl>b.remove(first_max)<nl>second_max = max(b)<nl>b.remove(second_max)<nl>third_max = max(b)<nl><nl>#get the minimums<nl>b = list(a)<nl>first_min = min(b)<nl>b.remove(first_min)<nl>second_min = min(b)<nl>b.remove(second_min)<nl>third_min = min(b)<nl><nl>## now swap <nl>xMax, yMax, zMax = a.index(first_max), a.index(second_max), a.index(third_max)<nl>xMin, yMin, zMin = a.index(first_min), a.index(second_min), a.index(third_min)<nl>a[xMax], a[xMin] = a[xMin], a[xMax]<nl>a[yMax], a[yMin] = a[yMin], a[yMax]<nl>a[zMax], a[zMin] = a[zMin], a[zMax]<nl><nl>print a","out":"最大値と最小値を入れ替えるには？(パイソン)"}
{"in":"z=urlopen(url).read().decode('utf-8')<nl>self.feed(z)","out":"このコードはAptanaから実行すると動作しますが、pythonのHTMLParserでは失敗します。"}
{"in":"from twython import Twython<nl><nl>twitter = Twython()<nl>followers = twitter.get_followers_ids(screen_name = \"ryanmcgrath\")<nl><nl>for follower_id in followers:<nl><tab> print \"User with ID %d is following ryanmcgrath\" % follower_id","out":"Twythonを使ってtwitterのフォロワーを獲得する方法とは？"}
{"in":"sys.setrecursionlimit(n)","out":"Pythonの再帰はどの程度安全か？"}
{"in":"x = '123 Main St'<nl>y = '123 MAIN ST'<nl><nl>new_x = x.lower()<nl>new_y = y.lower()<nl><nl><nl><nl>if new_x == new_y :<nl><tab>print \"correct\"<nl>else:<nl><tab>print \"incorrect\"","out":"異なるフォーマットのXMLドキュメントから取り出したアドレスを比較する。"}
{"in":"logging.basicConfig(filename='test.log', format='[%(levelname)s] %(message)s', level=logging.DEBUG)","out":"python logging format: ブラケットを追加する方法"}
{"in":"import threading<nl><nl>class Test:<nl><tab> def printit(self):<nl><tab><tab>  print(\"hello world\")<nl><tab><tab>  threading.Timer(5.0, self.printit).start()<nl><nl>test = Test()<nl>test.printit()","out":"n秒ごとにクラスメソッドを実行する"}
{"in":"logging.config.dictConfig(yaml.load(open('logging.yaml', 'r')))","out":"Tornadoのtimed rotateファイルハンドラでロギングする方法とは？"}
{"in":"print (\"ln(x) at \", x, \"is: \", lnx)","out":"初心者がpythonで印刷するためのヘルプを探しています。"}
{"in":"def test2():<nl><tab> \"\"\"Test with a subfunction.\"\"\"<nl><tab> exec 'print \"hi from test2\"' in globals(), locals()<nl><tab> def subfunction():<nl><tab><tab>  return True","out":"Pythonでは、サブファンクションを持つ関数ではなぜexecが効かないのでしょうか？"}
{"in":"string = letters[0]<nl>listInDesiredFormat = string.replace('\\'', '').split(', ')","out":"文字列リテラルから文字列のリストに変換する。"}
{"in":"import urllib<nl>from multiprocessing import Process, Queue<nl><nl>def worker(input, output):<nl>  for func, args in iter(input.get, 'STOP'):<nl><tab> result = func(*args)<nl><tab> output.put(result)<nl><nl>def find_on_page(num):<nl>  uri = 'http:\/\/www.example.com\/index.php?id=%d' % num<nl>  f = urllib.urlopen(uri)<nl>  data = f.read()<nl>  f.close()<nl>  index = data.find('datahere:') # obviously use your own methods<nl>  if index < 0:<nl><tab> return None<nl>  else:<nl><tab> return data[index:index+20]<nl><nl>def main():<nl>  NUM_PROCESSES = 4<nl>  tasks = [(find_on_page, (i,)) for i in range(99999)]<nl>  task_queue = Queue()<nl>  done_queue = Queue()<nl>  for task in tasks:<nl><tab> task_queue.put(task)<nl>  for i in range(NUM_PROCESSES):<nl><tab> Process(target=worker, args=(task_queue, done_queue)).start()<nl>  for i in range(99999):<nl><tab> print done_queue.get()<nl>  for i in range(NUM_PROCESSES):<nl><tab> task_queue.put('STOP')<nl><nl>if __name__ == \"__main__\":<nl>  main()","out":"C++やPython：多くのウェブページからテキストを探し出すためのブルートフォースメント"}
{"in":"class UploadPincode(models.Model):<nl><tab> added_on = models.DateField(auto_now_add=True)<nl><tab> pincode_file = models.FileField(<nl><tab><tab>  upload_to=\"Pincodes\/\", verbose_name=\"Pincode Excel file (.xls,xlsx)\", blank=False, null=False)<nl><nl><tab> def save(self):<nl><tab><tab>  print \"Before Save #######\"<nl><nl><tab><tab>  super(UploadPincode, self).save()<nl><tab><tab>  print \" Save #######\"<nl><nl><tab><tab>  pincode_process(self.pincode_file.url)<nl><nl><nl><tab> def __unicode__(self):<nl><tab><tab>  return str(self.added_on)<nl><nl><nl><nl>def pincode_process(pincode_file=None):<nl><nl><tab> print \"Pincode Adding ##########################\",pincode_file,pincode_file[1:]<nl><nl><nl><tab> book = open_workbook(pincode_file[1:])<nl><tab> for j in range(0, book.nsheets - 1):<nl><tab><tab>  sheet = book.sheet_by_index(j)<nl><tab><tab>  for i in range(sheet.nrows):<nl><tab><tab><tab><tab>if i != 0:<nl><tab><tab><tab><tab><tab> a = sheet.row_values(i)<nl><tab><tab><tab><tab><tab> int_pin = int(a[0])<nl><tab><tab><tab><tab><tab> Pincode(pincode=str(int_pin)).save()<nl><nl><tab> return True","out":"Djangoのモデル保存メソッドでアップロードされたファイルを処理する方法"}
{"in":"actors = [item.text for item in soup.findAll('span', {\"itemprop\":\"actor\"})]<nl>print \"Actors: %s\" % (\", \".join(actors))","out":"pythonでfor-loopの出力を行うには？"}
{"in":"# ...<nl>app = Flask(__name__)<nl># ...<nl>from fresque import filters","out":"flaskアプリケーションにおけるjinja2 template_filterデコレータの異常な動作について"}
{"in":"print '7\\xe6\\x9c\\x8810\\xe6\\x97\\xa5'.decode('utf-8')","out":"Python prints result as '7xe6╱x9c╱x8810╱x97xa5', but I want '7?10?'."}
{"in":"import pyglet<nl>from pyglet.window import mouse<nl><nl>window = pyglet.window.Window()<nl><nl>@window.event<nl>def on_draw():<nl><tab> pass<nl><nl><nl>@window.event<nl>def on_mouse_drag(x, y, dx, dy, buttons, modifiers):<nl><tab> pyglet.graphics.draw(4, pyglet.gl.GL_QUADS, ('v2f', [x, y, x-dx, y, x-dx, y-dy, x, y-dy]))<nl><tab> print x, y, dx, y, dx, dy, x, dy<nl>pyglet.app.run()","out":"マウスドラッグの周囲に矩形を描く Pyglet"}
{"in":"import SendKeys<nl><nl>SendKeys.SendKeys(\"\"\"<nl>{CAPSLOCK}<nl>{SCROLLOCK}<nl>{NUMLOCK}<nl>\"\"\")","out":"Pythonでキーボードロックの変更"}
{"in":"file_obj.seek(0)","out":"Django はアップロードされたファイルを S3 に保存する。"}
{"in":"window.delch([y, x])","out":"ncursesで特定の座標範囲の文字列をクリアする方法は？"}
{"in":"def strip_string(string, to_strip):<nl><tab> if to_strip:<nl><tab><tab>  while string.startswith(to_strip):<nl><tab><tab><tab><tab>string = string[len(to_strip):]<nl><tab><tab>  while string.endswith(to_strip):<nl><tab><tab><tab><tab>string = string[:-len(to_strip)]<nl><tab> return string","out":"文字列から順序付けられた文字列を取り除く。"}
{"in":"import re<nl><nl>filename = \"file.txt\"<nl>regex = re.compile(r'(memcpy\\s*\\(\\s*buffer\\s*,\\s*\")\\s*(\"\\s*,\\s*64\\s*)')<nl>with open(filename) as in_file:<nl><tab> in_buffer = in_file.readlines()<nl><nl>data = \"foo bar\"<nl>with open(filename, \"w\") as out_file:<nl><tab> for line in in_buffer:<nl><tab><tab>  out_file.write(regex.sub(r'\\g<1>'+data+'\\g<2>', line))","out":"Pythonスクリプトを使って、ファイルの特定行の特定位置に特定の文字列を挿入する方法は？"}
{"in":"return ''.join(sorted(comb_))","out":"Pythonで文字列の要素をソートする"}
{"in":"import StringIO<nl><nl>pa.read_csv(StringIO.StringIO(lines.join('<nl>')))","out":"pandasを使って行の一覧からデータを読み込む"}
{"in":"from bottle import static_file<nl>@route('\/static\/<filename>')<nl>def server_static(filename):<nl><tab> return static_file(filename, root='\/path\/to\/your\/static\/files')","out":"ボトルサーバーでhtmlファイルを返すには？"}
{"in":"name = \"frame%d.jpg\"%count<nl>cv2.imwrite(name, frame)<tab>  # save frame as JPEG file","out":"動画をフレームとして保存する OpenCV{PY}．"}
{"in":"import csv<nl>with open('output.csv', 'wb') as fout:<nl><tab> csvout = csv.writer(fout)<nl><tab> for row in a['rows']:<nl><tab><tab>  csvout.writerow( [row['id']] + row['cell'] )","out":"辞書をcsvファイルに変換する方法"}
{"in":"with open('test.txt') as f:<nl><tab> for line in f:<nl><tab><tab>  nextLine = next(f)<nl><tab><tab>  if 'A' == line.strip():<nl><tab><tab><tab><tab>print nextLine","out":"Pythonで次の行を読む"}
{"in":"old_headings = [old_freestream_headings] * 2 + [old_integral_headings] + [old_forces_headings] * 5","out":"Python: リスト内の文字列の複数コピー"}
{"in":"import time<nl>with open(file) as f:<nl><tab> for line in f:<nl><tab><tab>  identifier, t0, score, date, hour = line.split()<nl><nl><tab><tab>  # You can also get a time_struct from the time<nl><tab><tab>  timer = time.strptime(date + hour, \"%d\/%m\/%Y%H:%M:%S\")","out":"python ファイルからデータを読み込む"}
{"in":"self.crackButton.bind('<ButtonRelease-1>', lambda e: self.crack(Filenamelist, forceclick))","out":"Python\/Tkinterでボタンクリック時に強制的に待機させる。"}
{"in":"from traceback import format_exception<nl><nl>def excepthook(self, type_, value, traceback):<nl><tab> print format_exception(type_, value, traceback)<nl><nl>sys.excepthook = self.excepthook","out":"excepthookで元の例外を印刷する"}
{"in":"import gtk<nl><nl>def keypress(win, event):<nl><tab> if event.keyval == gtk.keysyms.F11:<nl><tab><tab>  win.is_fullscreen = not getattr(win, 'is_fullscreen', False)<nl><tab><tab>  action = win.fullscreen if win.is_fullscreen else win.unfullscreen<nl><tab><tab>  action()<nl><tab><tab>  label.set_visible(not win.is_fullscreen)<nl><nl>win = gtk.Window()<nl>win.connect(\"delete-event\", gtk.main_quit)<nl>win.connect('key-press-event', keypress)<nl>image = gtk.image_new_from_stock(gtk.STOCK_ABOUT, gtk.ICON_SIZE_DIALOG)<nl>label = gtk.Label(('test ' * 20 + '<nl>') * 20)<nl>vbox = gtk.HBox()<nl>vbox.add(label)<nl>vbox.add(image)<nl>win.add(vbox)<nl>win.show_all()<nl>gtk.main()","out":"フルスクリーン時のGtkアプリケーションのレイアウトを変更する方法は？"}
{"in":"import sys<nl>import inspect<nl><nl>def f1():<nl><tab> \"f1!\"<nl><tab> pass<nl>def f3():<nl><tab> \"f3!\"<nl><tab> pass<nl>def f2():<nl><tab> \"f2!\"<nl><tab> pass<nl><nl>funcs = [elt[1] for elt in inspect.getmembers(sys.modules[__name__],<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> inspect.isfunction)]<nl>ordered_funcs = sorted(funcs, key=lambda f: f.__code__.co_firstlineno)<nl>for f in ordered_funcs:<nl><tab> print(f.__doc__)","out":"Python関数のリスト（モジュール内で定義された順番に並ぶ"}
{"in":"run('mysql -u %s -p%s -e \"grant all on %s.* to \\'%s\\'@\\'localhost\\' identified by \\'PASSWORD\\'\"' % (user, dbpasswd, account, account))","out":"ファブリック・パイソン正規表現によるmysqlユーザー権限の付与"}
{"in":"total = sum(int(v) for name,v in table)","out":"ラムダ関数を使った入れ子リストの和の求め方"}
{"in":"db.collection.update(<nl><tab>{\"charachters.char_name\": \"Testarion\"},<nl><tab>{\"$push\": {\"charachters.$.parties\": \"party_user\"}})","out":"MongoDB で条件に合う配列の要素を $push で更新する"}
{"in":"self.setAttribute(QtCore.Qt.WA_DeleteOnClose)","out":"QMainWindowを閉じた後、QTimerが持続する。"}
{"in":"import traceback<nl><nl>traceback.print_stack()","out":"例外を発生させずにスタックトレースを表示する"}
{"in":"CTemp = str(12.34) #set for testing<nl>text = \"The temp is: \"+CTemp<nl><nl>msg = MIMEText(text)","out":"Pythonでメールを送信し、件名にバイアブルを記載する。"}
{"in":"from tornado.ioloop import IOLoop<nl>from tornado import gen<nl>from tornado.httpclient import AsyncHTTPClient<nl>from toro import Queue<nl><nl>q = Queue(maxsize=1)<nl><nl><nl>@gen.coroutine<nl>def consumer():<nl><tab> item = yield q.get()<nl><tab> while item:<nl><tab><tab>  print item<nl><tab><tab>  item = yield q.get()<nl><nl><nl>@gen.coroutine<nl>def producer():<nl><tab> try:<nl><tab><tab>  client = AsyncHTTPClient()<nl><tab><tab>  for url in [<nl><tab><tab><tab><tab><tab> 'http:\/\/tornadoweb.org',<nl><tab><tab><tab><tab><tab> 'http:\/\/python.org',<nl><tab><tab><tab><tab><tab> 'http:\/\/readthedocs.org']:<nl><tab><tab><tab><tab>response = yield client.fetch(url)<nl><tab><tab><tab><tab>item = (url, len(response.body))<nl><tab><tab><tab><tab>yield q.put(item)<nl><nl><tab><tab>  # Done.<nl><tab><tab>  q.put(None)<nl><tab> except Exception:<nl><tab><tab>  IOLoop.current().stop()<nl><tab><tab>  raise<nl><nl>future = producer()<nl>IOLoop.current().run_sync(consumer, timeout=20)","out":"正常値も出せるトルネードコルーチンを書く"}
{"in":"gevent.spawn(daemon.requestLoop)","out":"geventでPyroを使うにはどうすればよいですか？"}
{"in":"datetime.datetime.now().strftime(\"%H:%M:%S.%f\")","out":"Pythonのstrftime()で%fを使用してマイクロ秒を取得する。"}
{"in":"gameDisplay.fill(your_color_tuple)<nl><nl># afterwards add your drawing code","out":"Pygameのウィンドウのテキストを置換する"}
{"in":"print [item for item in dir(adfix) if not item.startswith(\"__\")]","out":"特定のPythonモジュールの変数のリストを取得する方法は？"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl>x = np.array([0,1,2,3,4,5,6])<nl>y = np.array([0,2,0,4.5,0.5,2,3])<nl><nl>line = plt.plot(x,y,'o')[0]<nl>line.set_clip_on(False)<nl>plt.show()","out":"軸の上にマーカーを置くプロット"}
{"in":"Book.objects.all().delete()","out":"Django orm を使って TRUNCATE TABLE を行うにはどうすればよいですか？"}
{"in":"import os<nl><nl>def doc_to_text_catdoc(filename):<nl><tab> (fi, fo, fe) = os.popen3('catdoc -w \"%s\"' % filename)<nl><tab> fi.close()<nl><tab> retval = fo.read()<nl><tab> erroroutput = fe.read()<nl><tab> fo.close()<nl><tab> fe.close()<nl><tab> if not erroroutput:<nl><tab><tab>  return retval<nl><tab> else:<nl><tab><tab>  raise OSError(\"Executing the command caused an error: %s\" % erroroutput)<nl><nl># similar doc_to_text_antiword()","out":"COM\/automation を使用せずに Word ドキュメントからテキストを抽出する最良の方法？"}
{"in":"def view2(request):<nl><tab> if request.method == 'POST':<nl><tab><tab>  page_list=request.POST.values()<nl><tab> else:<nl><tab><tab>  HttpResponseRedirect('\/urls\/')","out":"djangoでビュー間でリストを渡す方法"}
{"in":"with open('file.csv') as f:<nl><tab> f.readline() # ignore first line (header)<nl><tab> mydict = dict(csv.reader(f, delimiter=','))<nl><nl>print mydict","out":"csv を dict 形式に変換する方法"}
{"in":"import socket<nl>import struct<nl>address = (\"10.0.0.12\", 5000)<nl>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<nl>s.bind(address)<nl>s.listen(1000)<nl><nl><nl>client, addr = s.accept()<nl>print 'got connected from', addr<nl><nl>buf = ''<nl>while len(buf)<4:<nl><tab> buf += client.recv(4-len(buf))<nl>size = struct.unpack('!i', buf)<nl>print \"receiving %s bytes\" % size<nl><nl>with open('tst.jpg', 'wb') as img:<nl><tab> while True:<nl><tab><tab>  data = client.recv(1024)<nl><tab><tab>  if not data:<nl><tab><tab><tab><tab>break<nl><tab><tab>  img.write(data)<nl>print 'received, yay!'<nl><nl>client.close()","out":"Pythonソケットサーバ受信イメージ"}
{"in":"import os<nl>os.write(fd, os.linesep)","out":"Pythonでファイルディスクリプタにネイティブの改行文字を書き込むには？"}
{"in":"df.to_pickle(file_name)","out":"pandas DataFrameのシリアライズ。"}
{"in":"import scipy.signal<nl>import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>im = plt.imread('example.jpg')<nl>im \/= 255.<tab># normalise to 0-1, it's easier to work in float space<nl><nl># make some kind of kernel, there are many ways to do this...<nl>t = 1 - np.abs(np.linspace(-1, 1, 21))<nl>kernel = t.reshape(21, 1) * t.reshape(1, 21)<nl>kernel \/= kernel.sum()<tab># kernel should sum to 1!  :) <nl><nl># convolve 2d the kernel with each channel<nl>r = scipy.signal.convolve2d(im[:,:,0], kernel, mode='same')<nl>g = scipy.signal.convolve2d(im[:,:,1], kernel, mode='same')<nl>b = scipy.signal.convolve2d(im[:,:,2], kernel, mode='same')<nl><nl># stack the channels back into a 8-bit colour depth image and plot it<nl>im_out = np.dstack([r, g, b])<nl>im_out = (im_out * 255).astype(np.uint8) <nl><nl>plt.subplot(2,1,1)<nl>plt.imshow(im)<nl>plt.subplot(2,1,2)<nl>plt.imshow(im_out)<nl>plt.show()","out":"Pythonによる画像スムージング"}
{"in":"from keystoneclient.auth.identity import v2<nl>from keystoneclient import session<nl>from ceilometerclient import client<nl><nl>auth=v2.Password(auth_url=\"hosturl:5000\/v2.0\/\", username=\"admin\", password=\"pass\", tenant_id='123456')<nl><nl>sess = session.Session(auth=auth,verify=False)<tab>  # verify=False may not be required for you<tab> <nl>token = auth.get_token(sess)<nl><nl>cclient = client.get_client(2, ceilometer_url=\"hosturl:8777\/\", token=token,verify=False)<nl>cclient.meters.list()","out":"Ceilometer Python Client APIにauth_tokenを導入する方法。"}
{"in":"[t[:-1] + (100,) for t in a]","out":"タプルのリストで最後の値を置き換える。"}
{"in":"# untested<nl>from itertools import count<nl>rows = len(csvList)<nl>pctn = rows \/\/ 100<nl>perc = count()<nl>for rowno, row in enumerate(csvList):<nl><tab> if rowno % pctn == 0:<nl><tab><tab>  print '{}%'.format(next(perc))","out":"SQLインサートプログレスバー"}
{"in":"def isBetween(a, b, c):<nl><tab> crossproduct = (c.y - a.y) * (b.x - a.x) - (c.x - a.x) * (b.y - a.y)<nl><tab> if abs(crossproduct) > epsilon : return False<tab># (or != 0 if using integers)<nl><nl><tab> dotproduct = (c.x - a.x) * (b.x - a.x) + (c.y - a.y)*(b.y - a.y)<nl><tab> if dotproduct < 0 : return False<nl><nl><tab> squaredlengthba = (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y)<nl><tab> if dotproduct > squaredlengthba: return False<nl><nl><tab> return True","out":"ある点が線分上の他の2点の間にあると判断するにはどうすればよいか。"}
{"in":"array = lane_emden(3)","out":"Python 3.5 関数の外で使うために配列を保存する"}
{"in":"from fuzzywuzzy import process<nl>import csv<nl><nl>save_file = open('FuzzyResults3.csv', 'w')<nl>writer = csv.writer(save_file, lineterminator = '<nl>')<nl><nl>def parse_csv(path):<nl><nl><tab> with open(path,'r') as f:<nl><tab><tab>  reader = csv.reader(f, delimiter=',')<nl><tab><tab>  for row in reader:<nl><tab><tab><tab><tab>yield row<nl><nl><nl>if __name__ == \"__main__\":<nl><tab> ## Create lookup dictionary by parsing the products csv<nl><tab> data = {}<nl><tab> for row in parse_csv('File1.csv'):<nl><tab><tab>  data[row[0]] = row[1]<nl><nl><tab> ## For each row in the lookup compute the partial ratio<nl><tab> for row in parse_csv(\"File2.csv\"):<nl><tab><tab>  #print(process.extract(row,data, limit = 100))<nl><tab><tab>  for found, score, matchrow in process.extract(row, data, limit=100):<nl><tab><tab><tab><tab>if score >= 60:<nl><tab><tab><tab><tab><tab> print('%d%% partial match: \"%s\" with \"%s\" ' % (score, row, found))<nl><tab><tab><tab><tab><tab> Digi_Results = [score, row, found]<nl><tab><tab><tab><tab><tab> writer.writerow(Digi_Results)<nl><nl><nl>save_file.close()","out":"ファジーによる2列の比較"}
{"in":"import Queue, thread<nl><nl># create a Queue.Queue here<nl>queue = Queue.Queue()<nl><nl>print (\"downloading and parsing Bibles...\")<nl>root = html.parse(open('links.html'))<nl>for link in root.findall('\/\/a'):<nl>  url = link.get('href')<nl>  queue.put(url) # produce<nl><nl><nl><nl><nl>def thrad():<nl>  url = queue.get() # consume<nl>  name = urlparse.urlparse(url).path.split('\/')[-1]<nl>  dirname = urlparse.urlparse(url).path.split('.')[-1]<nl>  f = urllib2.urlopen(url)<nl>  s = f.read()<nl>  if (os.path.isdir(dirname) == 0): <nl><tab> os.mkdir(dirname)<nl>  soup = BeautifulSoup(s)<nl>  articleTag = soup.html.body.article<nl>  converted = str(articleTag)<nl>  full_path = os.path.join(dirname, name)<nl>  open(full_path, 'wb').write(converted)<nl>  print(name)<nl><nl>thread.start_new(thrad, ()) # start 1 threads","out":"マルチスレッドによるダウンロードの高速化"}
{"in":"wb = load_workbook('path\/doc.xls', use_iterators=True)","out":"openpyxlを使用してExcelの列から値を取得する。"}
{"in":"import NetworkManager<nl><nl>for dev in NetworkManager.NetworkManager.GetDevices():<nl><tab> if dev.DeviceType != NetworkManager.NM_DEVICE_TYPE_WIFI:<nl><tab><tab>  continue<nl><tab> for ap in dev.SpecificDevice().GetAccessPoints():<nl><tab><tab>  print ap.Ssid","out":"Pythonで私のコンピュータが見ることができるすべてのWLANのリストを取得するにはどうすればよいですか？"}
{"in":"['%f, %s' % (x,y) for _,_,_,x,_,y in d.values()]","out":"Python の list の list を繰り返し、新しい list を作成する。"}
{"in":"if __name__ == '__main__':<nl><tab> manager = Manager()<nl><tab> flag = manager.list([True])<nl><tab> for taskSize in taskSizes:<nl><tab><tab>  flag[0] = True<nl><tab><tab>  processes = [] # a list to store the process handles <nl><tab><tab>  for i in range(1,TASK_LAUNCHERS):<nl><tab><tab><tab><tab>p = Process(target=backgroundTaskLauncher, args=(taskSize,flag))<nl><tab><tab><tab><tab>p.start()<nl><tab><tab><tab><tab>processes.append(p) # save process handle<nl><tab><tab>  # Experiment goes here (I think it goes here (unindented(?)))<nl><tab><tab>  flag[0] = False<nl><tab><tab>  # after you are done with your experiment, join all child processes<nl><tab><tab>  for p in processes:<nl><tab><tab><tab><tab>p.join()","out":"PythonでマルチプロセッシングプログラムのループのON\/OFFを切り替える"}
{"in":"import heapq<nl><nl>a = [(\"a\", 6), (\"b\", 4), (\"c\", 3), (\"d\", 1)]<nl>b = [(\"e\", 5), (\"f\", 5), (\"g\", 4), (\"h\", 2)]<nl><nl>class Pair:<nl><tab> def __init__(self, i, j, value):<nl><tab><tab>  self.i = i<nl><tab><tab>  self.j = j<nl><tab><tab>  self.value = value<nl><tab> def __cmp__(self, other):<nl><tab><tab>  return other.value - self.value<nl><nl>def solution(a, b):<nl><tab> heap = []<nl><tab> for i in range(len(a)):<nl><tab><tab>  heapq.heappush(heap, Pair(i, 0, a[i][1] + b[0][1]))<nl><tab> while len(heap) > 0:<nl><tab><tab>  pair = heapq.heappop(heap)<nl><tab><tab>  yield (a[pair.i], b[pair.j], pair.value)<nl><tab><tab>  if pair.j + 1 < len(b):<nl><tab><tab><tab><tab>heapq.heappush(heap, Pair(pair.i, pair.j + 1, a[pair.i][1] + b[pair.j + 1][1]))<nl><nl>for (a, b, value) in solution(a, b):<nl><tab> print (\"%s %s -> %d\" % (a, b, value))","out":"いくつかのリストのすべての順列を順列-値順で生成する。"}
{"in":"x = np.empty((21, 2))<nl>x[:, 0] = 45<nl>x[:, 1] = np.linspace(55, 65, x.shape[0])","out":"Numpy - 配列の1列の値だけを変更する簡単な方法？"}
{"in":"import webapp2<nl><nl>from webapp2_extras import sessions<nl><nl>class BaseHandler(webapp2.RequestHandler):<nl><tab> def dispatch(self):<nl><tab><tab>  # Get a session store for this request.<nl><tab><tab>  self.session_store = sessions.get_store(request=self.request)<nl><nl><tab><tab>  try:<nl><tab><tab><tab><tab># Dispatch the request.<nl><tab><tab><tab><tab>webapp2.RequestHandler.dispatch(self)<nl><tab><tab>  finally:<nl><tab><tab><tab><tab># Save all sessions.<nl><tab><tab><tab><tab>self.session_store.save_sessions(self.response)<nl><nl><tab> @webapp2.cached_property<nl><tab> def session(self):<nl><tab><tab>  # Returns a session using the default cookie key.<nl><tab><tab>  return self.session_store.get_session()<nl><nl># To set a value:<nl>self.session['foo'] = 'bar'<nl><nl># To get a value:<nl>foo = self.session.get('foo')","out":"Google App Engine - Python 2.7でセッションを動作させるには"}
{"in":"from pymongo.bulk import BulkUpsertOperation<nl>bulk=clientConn.db.table.initialize_ordered_bulk_op()<nl><nl>for i in someList:<nl><tab> bulk.find({'uid':i,\"dt\":datetime(y,m,d)}).upsert().update({'$inc': {'count': 1}})<nl>res=bulk.execute()","out":"MongoDb pymongo 複数のドキュメントをインクリメントする方法"}
{"in":"# create query order by monthly price <nl>base_query = Contract.query.order_by(Contract.monthly_price)<nl><nl># build subqueries for each network <nl>queries = []<nl>for n in networks.all():<nl><tab> queries.append( base_query.filter(Contract.network_id==n.id).\\<nl><tab><tab><tab><tab><tab><tab><tab><tab>limit(3).subquery().select() )<nl><nl># get contracts using union_all<nl>contracts = Contract.query.select_entity_from(union_all( *queries )).all()","out":"SQLalchemy 各カテゴリのトップ3結果"}
{"in":"{{ item.date|date:\"Y M d\" }}","out":"djangoでpythonでdatetimeを文字列に変換する方法"}
{"in":"import xml.etree.ElementTree as ET<nl><nl># I find that using a dictionary to map prefixes to namespaces keeps<nl># things easier to understand. You can also use the namespaces directly<nl># though if you prefer<nl>NAMESPACE_PREFIXES = {<nl><tab> 'w': 'http:\/\/schemas.openxmlformats.org\/wordprocessingml\/2006\/main'<nl><tab> }  <nl><nl>tree = ET.parse('document.xml')<nl>root = tree.getroot()<nl>text_elements = [element for element in root.iter() if element.tag == <nl>'{' + NAMESPACE_PREFIXES['w'] + '}t']<nl># Equivalent to:<nl># text_elements = [element for element in root.iter() if element.tag == <nl># '{http:\/\/schemas.openxmlformats.org\/wordprocessingml\/2006\/main}t']<nl>for text_element in text_elements:<nl><tab> if text_element.text == 'Hello world!':<nl><tab><tab>  text_element.text = 'Goodbye world!'","out":"Pythonのxml.elementtreeを使ってWord docxファイルをzip文書としてパースすることを試みる"}
{"in":"HATEOAS = False","out":"項目に対するイブのきれいな_リンク、複数のエントリーポイント"}
{"in":"numbers = [1,2,3,4,5,6]<nl><nl>with open('output.txt', 'w') as f:<nl>  f.write('\\t'.join(numbers))","out":"pythonでテキストファイルに書き込むには？"}
{"in":"from itertools import imap<nl>from operator import mul<nl>def sumsquared(arr):<nl><tab> return sum(imap(mul, arr, arr))","out":"リスト上の単純な数学的計算を最適化する"}
{"in":"import csv<nl>data = []<nl>with open('Trial_test.csv', 'rb') as csvfile:<nl><tab>reader = csv.reader(csvfile, delimiter=' ', quotechar='|')<nl><tab>for row in reader:<nl><tab><tab> data.append(row)<nl><nl># now do your calculations on the 'data' object.<nl><nl>with open('Trial_test_new.csv', 'wb') as csvfile:<nl><tab>writer = csv.writer(csvfile, delimiter=' ', quotechar='|')<nl><tab>for row in data:<nl><tab><tab> writer.writerow(row)","out":"csvファイルへのデータ追記"}
{"in":"import subprocess<nl><nl># ps -ux | grep 1842 (Assuming 1842 is the process id. replace with process id you get)<nl><nl>p1 = subprocess.Popen([\"ps\", \"-ux\"], stdout=subprocess.PIPE)<nl>p2 = subprocess.Popen([\"grep\", \"1842\"], stdin=p1.stdout, stdout=subprocess.PIPE)<nl>p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.<nl>output = p2.communicate()[0]<nl>print output","out":"linuxのpythonでプロセスのメモリを読むにはどうしたらいいですか？"}
{"in":"def unique_list(l):<nl><tab> ulist = []<nl><tab> [ulist.append(x) for x in l if x not in ulist]<nl><tab> return ulist<nl><nl>a=\"calvin klein design dress calvin klein\"<nl>a=' '.join(unique_list(a.split()))","out":"Pythonで文字列の中の重複する単語を削除するにはどうすればよいですか？"}
{"in":"result_record_list[0].pic = None<nl>result_record_list[0].put()","out":"GAE NDBプロパティ（BlobKeyProperty型）から値を削除する方法。"}
{"in":"pyplot.errorbar()","out":"Python matplotlib 配列を異なる色でプロットする"}
{"in":"9**(9**9)","out":"Pythonでタイムアウトのあるコードを実行する正しい方法"}
{"in":"import FreeImagePy as FIPY<nl>F = FIPY.Image()<nl>F.new(multiBitmap = \"multipage.tiff\")<nl>F.appendPage(\"test1.jpg\")<nl>F.appendPage(\"test2.jpg\")<nl>F.deletePage(0)<nl>F.close()","out":"JPGをマルチページTiffに変換するPythonライブラリ"}
{"in":"from flask import Flask,redirect","out":"FlaskでURLを書き換える"}
{"in":"def removeSel(self):<nl><tab> listItems=self.listA.selectedItems()<nl><tab> if not listItems: return<tab><tab>  <nl><tab> for item in listItems:<nl><tab><tab> self.listA.takeItem(self.listA.row(item))","out":"QListWidgetからItemを削除するには？"}
{"in":"grouped = df.groupby([df.index.year,df.index.day])<nl>df['sum'] = grouped.apply(lambda x: x.Open + x.Close)","out":"pandasのデータフレームオブジェクトに、カラムの計算で新しいカラムを追加する。"}
{"in":"for dir, subdir, files in os.walk(path):<nl><tab> for file in files:<nl><tab><tab>  print os.path.join(dir, file)","out":"pythonで、ディレクトリ内のすべてのファイルのパスを取得する方法（サブディレクトリ内のファイルを含むが、サブディレクトリへのパスは除く"}
{"in":"eval(CMD[17:-1])","out":"python 3で変数user inputを表示する方法は？"}
{"in":"get_top_from_all()","out":"prawを使ってsubredditの歴代上位投稿の一覧を取得したいのですが"}
{"in":"import json<nl>from django.forms.models import model_to_dict<nl><nl>@render_to ('companion\/companionSub.html')<nl>def topic(request, id):<tab><nl><nl><tab> ids = Catagories.objects.get(catagory=id)<nl><nl><tab> topics = [model_to_dict(topic) for topic in Topics.objects.filter(fabCatagory_id=ids.id)]<nl><tab> topic_list = json.dumps({'topics':topics})<nl><nl><tab> return HttpResponse(topics_list)","out":"Django は、ajax get でテンプレートに辞書オブジェクトをレンダリングする。"}
{"in":"# -*- coding: utf-8 -*-<nl><nl>def run():<nl><tab> code_task = get_active_task()<nl><nl><tab> from os.path import dirname<nl><nl><tab> def change_directory():<nl><tab><tab>  code_editor = code_task.active_editor<nl><tab><tab>  if not code_editor:<nl><tab><tab><tab><tab>return<nl><tab><tab>  python_pane = code_task.python_pane<nl><tab><tab>  active_dir = dirname(code_editor.obj.path)<nl><tab><tab>  python_pane.execute_command(u'cd %s<nl>' % active_dir)<nl><nl><tab> code_task.on_trait_change(change_directory, 'active_editor')","out":"IPython Shellの作業ディレクトリをCanopyで実行中のpythonファイルの作業ディレクトリに設定する。"}
{"in":"rc('font',**{'family':'serif','serif':['Times']})","out":"これらのアーティファクトを取り除くにはどうしたらよいでしょうか（LaTeXを使ったmatplotlib）"}
{"in":"with open('\/Users\/d-sdf\/test_erick\/test\/essays.csv') as csvfile:<nl><tab> for i, line in enumerate(csvfile):<nl><tab><tab>  with open(\"essay{}.txt\".format(str(i+1)), \"w\") as txtfile:<nl><tab><tab><tab><tab>txtfile.write(line)","out":"ファイルから読み込んだ1行ずつを別のファイルとして保存する"}
{"in":"import Tkinter<nl>import tkFileDialog<nl>import tkSimpleDialog<nl>from tkFileDialog import askopenfilename<nl>import os<nl><nl># Set up GUI<nl><nl><nl>def main():<nl><nl><tab> root = Tkinter.Tk(); <nl><tab> root.withdraw()<nl><nl><tab> # Prompt for user info<nl><tab> File_number = tkSimpleDialog.askinteger(\"File number\", <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  \"How many files do you want to compare?\")<nl><nl><tab> if not File_number:<nl><tab><tab>  return<nl><nl><tab> user_fiels = []<nl><nl><nl><tab> max_file_no = int(File_number)<nl><tab> current_file = 1;<nl><nl><tab> while(current_file <= max_file_no):<nl><nl><tab><tab>  fileloc = tkFileDialog.askopenfilename(parent=root, title='Choose file {}'.format(current_file))<nl><nl><tab><tab>  if not fileloc:<nl><tab><tab><tab><tab>continue<nl><nl><tab><tab>  fileloc_name_clean = os.path.splitext(fileloc)[0]<nl><tab><tab>  fileloc_name = os.path.basename(fileloc_name_clean)<nl><nl><tab><tab>  user_fiels.append([fileloc, fileloc_name_clean, fileloc_name])<nl><nl><tab><tab>  current_file += 1<nl><nl><tab><tab>  #print(fileloc_name_clean, fileloc_name)<nl><nl><tab> print(user_fiels) <nl><nl>main()","out":"Python（パイソン異なる処理を順番に一定時間ループさせる"}
{"in":"input_implementations = { 'xls':xls, 'xml':xml, 'csv':csv }<nl><nl>def input_factory(filename):<nl><tab> ext = os.path.splitext(filename)[1][1:].lower()<nl><tab> impl = input_implementations.get(ext, None)<nl><tab> if impl is None:<nl><tab><tab>  print 'rain fire from the skies'<nl><tab> else:<nl><tab><tab>  return impl(filename)","out":"サブクラスに基づいて動作を決定する"}
{"in":"from re import findall<nl><nl>print findall(r'\\w[\\w.]*\\w', 'WARC-_Target-URI: http:\/\/www.allchocolate.com\/health\/basics\/')","out":"特定の単語をpythonに与える正規表現"}
{"in":"from xml.dom import minidom<nl>import xml.etree.ElementTree as ET<nl><nl>tree = ET.parse('\/tmp\/input.xml').getroot()<nl>namespaces = {'gml': 'http:\/\/www.opengis.net\/gml', 'ogr':'http:\/\/ogr.maptools.org\/'}<nl>for child in tree.findall('gml:featureMember', namespaces=namespaces):<nl><tab> if len(child.find('ogr:TZwards', namespaces=namespaces)):<nl><tab><tab>  name = child.find('ogr:TZwards', namespaces=namespaces).find('ogr:Region_Nam', namespaces=namespaces).text<nl><tab><tab>  if name != 'TARGET':<nl><tab><tab><tab><tab>tree.remove(child)<nl><nl>out = ET.ElementTree(tree)<nl>out.write(\"\/tmp\/out.xml\")","out":"子ノードの子ノードが特定の値を含んでいる場合、XMLノードを削除する。"}
{"in":"#!\/usr\/bin\/env python<nl><nl>#x=1.123<nl>#y=2.123<nl><nl>pos = [1.123, 2.123]<nl><nl>with open('vars.txt','w') as f:<nl><tab> f.write(\"%s %s\" % (pos[0], pos[1]))<nl><tab> #f.write(\"%s %s\" % (x,y))<nl><nl>with open ('vars.txt', 'r') as myfile:<nl><tab> position=myfile.read().split()<nl><nl>position = map(float, position)<nl># position = [1.123, 2.123]","out":"Pythonのvarをファイルから書き込む方法と読み込む方法"}
{"in":"import numpy as np<nl><nl>Rxx = np.arange(100)<nl>epochs = 10<nl>Rxx_mean = []<nl><nl>epoch_Rxx = np.array_split(Rxx,epochs)<nl>for i in range(0,epochs):<nl>  Rxx_mean.append(np.mean(epoch_Rxx[i]))<nl><nl>print Rxx_mean","out":"Pythonで配列を分割し、Forループで分割を意味し、元に戻す。"}
{"in":"def guid2hexstring(val):<nl><tab> s = ['\\\\%02X' % ord(x) for x in val]<nl><tab> return ''.join(s)<nl><nl>guid = ldapobject.get('objectGUID', [''])[0] # 'Igr\\xafb\\x19ME\\xb2P9c\\xfb\\xa0\\xe2w'<nl>guid2string(guid).replace(\"\\\\\", \"\") # '496772AF62194D45B2503963FBA0E277'<nl><nl>#and back to a value you can use in an ldap search filter<nl><nl>guid = ''.join(['\\\\%s' % guid[i:i+2] for i in range(0, len(guid), 2)]) # '\\\\49\\\\67\\\\72\\\\AF\\\\62\\\\19\\\\4D\\\\45\\\\B2\\\\50\\\\39\\\\63\\\\FB\\\\A0\\\\E2\\\\77'<nl><nl>searchfilter = ('(objectGUID=%s)' % guid)","out":"Python LDAPでobjectGUIDを16文字列に変換して戻す。"}
{"in":"dshape = discover(resource('report_2015.csv'))<nl>t = odo('report_2015.csv', 'sqlite:\/\/\/report.db::report', dshape=dshape)","out":"odoを使用してSQLにデータを移行する"}
{"in":"plt.savefig(str(new_counter)+'foo.eps')","out":"ループでプロットすると、最後のプロットしか得られない"}
{"in":"with tempfile.TemporaryFile() as tmp:<nl><tab> with gzip.open(fname, 'rb') as f:<nl><tab><tab>  shutil.copyfileobj(f, tmp)<nl><tab><tab>  tmp.seek(0)","out":"pythonでgzipファイルを修正する"}
{"in":"from PIL import Image<nl>import numpy as np<nl><nl>def SRGBResize(im, size, filter):<nl><tab> # Convert to numpy array of float<nl><tab> arr = np.array(im, dtype=np.float32) \/ 255.0<nl><tab> # Convert sRGB -> linear<nl><tab> arr = np.where(arr <= 0.04045, arr\/12.92, ((arr+0.055)\/1.055)**2.4)<nl><tab> # Resize using PIL<nl><tab> arrOut = np.zeros((size[1], size[0], arr.shape[2]))<nl><tab> for i in range(arr.shape[2]):<nl><tab><tab>  chan = Image.fromarray(arr[:,:,i])<nl><tab><tab>  chan = chan.resize(size, filter)<nl><tab><tab>  arrOut[:,:,i] = np.array(chan)<nl><tab> # Convert linear -> sRGB<nl><tab> arrOut = np.where(arrOut <= 0.0031308, 12.92*arrOut, 1.055*arrOut**(1.0\/2.4) - 0.055)<nl><tab> # Convert to 8-bit<nl><tab> arrOut = np.uint8(np.rint(arrOut * 255.0))<nl><tab> # Convert back to PIL<nl><tab> return Image.fromarray(arrOut)","out":"PillowでSRGBを意識した画像リサイズを行う。"}
{"in":"friendship_union = select([<nl><tab> FacebookFriendship.dater_id,<nl><tab> cast(FacebookFriendship.fb_uid_friend, Integer()).label(<nl><tab><tab>  'fb_uid_friend')<nl>]).union(<nl><tab> select([<nl><tab><tab>  cast(FacebookFriendship.fb_uid_friend, Integer()),<nl><tab><tab>  FacebookFriendship.dater_id]<nl><tab> )<nl>).alias()<nl><nl>cls.all_fb_friendships = relationship(<nl><tab> UserSocialAuth,<nl><tab> secondary=friendship_union,<nl><tab> primaryjoin=UserSocialAuth.user_id == friendship_union.c.dater_id,<nl><tab> secondaryjoin=and_(<nl><tab><tab>  UserSocialAuth.provider == 'facebook',<nl><tab><tab>  cast(UserSocialAuth.uid, Integer() ) == friendship_union.c.fb_uid_friend,<nl><tab> ),<nl><tab> viewonly=True<nl>)","out":"SQLAlchemy：リレーションシップを他の2つのリレーションシップの結合として定義するにはどうすればよいですか？"}
{"in":"def print_rect(l, w, c):<nl><tab> for a in range(w):<nl><tab><tab>  print(a*\" \", l*c)","out":"pythonで平行四辺形を作る方法"}
{"in":"from collections import defaultdict<nl><nl>terms = ['Electronic rock', 'Alternative rock', 'Indie pop']<nl>d = defaultdict(list)<nl>for term in terms:<nl><tab> for word in term.split():<nl><tab><tab>  d[word].append(term)<nl><nl>for k,v in d.iteritems():<nl><tab> if len(v) > 1:<nl><tab><tab>  print k,v","out":"Python：単語を共有する文字列を検出する"}
{"in":"Info[\"City_Name\"].update({\"Population\": 20000, \"Population_Density\": 200})","out":"1つのコマンドで複数のキーに複数の値を割り当てる方法"}
{"in":"f = open(\"output.txt\", \"a\")","out":"Python - 最終行のみファイルに保存されます。"}
{"in":"import urllib2<nl>data = urllib2.urlopen(\"some_url\")<nl>html_data = data.read()<nl>soup = BeautifulSoup(html_data)<nl><nl>for a in soup.findAll('a',href=True):<nl><tab> print a['href']","out":"美しいスープでアンカータグからhrefリンクを抽出する方法"}
{"in":"def check_time(until_when, def_time, how_long):<nl><tab> arg_dict = {def_time:how_long}<nl><tab> dt = datetime.timedelta(**arg_dict)<nl><tab> if until_when- datetime.datetime.now() > dt:<nl><tab><tab>  input('Task has been finished.<nl>Press any key to quit<nl>')<nl><tab><tab>  exit()","out":"datetime.timedeltaに引数を渡す方法を教えてください。"}
{"in":"def make_happiness_table(filename=\"word-happiness.csv\"):<nl><tab>''' make_happiness_table: string -> dict<nl><tab><tab>creates a dictionary of happiness scores from the given file '''<nl><nl><tab>return {}","out":"ファイル名を文字列として入力し、辞書を返す。"}
{"in":"times = race1.index.to_series()<nl>today = pandas.Timestamp('00:00:00')<nl>timedelta = times - today<nl>times_ordinal = timedelta.dt.seconds\/(24*60*60) + today.toordinal()<nl>ax = times_ordinal.hist()<nl>ax.xaxis_date()<nl>plt.gcf().autofmt_xdate()<nl>plt.ylabel('Number of finishers')","out":"PandasでCSVから時刻をヒストグラムにする"}
{"in":"import urllib, urllib2<nl>import time<nl>import sys<nl><nl>query = ' '.join(sys.argv)<tab><nl><nl># encode params as a list of 2-tuples<nl>params = ( ('from','ACC'), ('to', 'P_REFSEQ_AC'), ('format','tab'), ('query', query))<nl># url encode them<nl>data = urllib.urlencode(params)<tab> <nl>url = 'http:\/\/www.uniprot.org\/mapping\/'<nl><nl># fetch the data<nl>try:<nl><tab> foo = urllib2.urlopen(url, data)<nl>except urllib2.HttpError, e:<nl><tab> if e.code == 503:<nl><tab><tab>  # blah blah get the value of the header...<nl><tab><tab>  wait_time = int(e.hdrs.get('Retry-after', 0))<nl><tab><tab>  print 'Sleeping %i seconds...' % (wait_time,)<nl><tab><tab>  time.sleep(wait_time)<nl><tab><tab>  foo = urllib2.urlopen(url, data)<nl><nl><nl># foo is a file-like object, do with it what you will.<nl>foo.read()","out":"PythonでUniProtとHTTPで会話するにはどうすればよいですか？"}
{"in":"df['Monday-Friday'] = df['days'].isin(range(5)).astype(int)<nl>df['Saturday'] = (df['days'] == 5).astype(int)<nl>df['Sunday'] = (df['days'] == 6).astype(int)","out":"月曜～金曜と土曜・日曜のパンダを分けるには？"}
{"in":"import os<nl><nl>outFile = 'C:\/CompanyFiles\/Matrix.txt'<nl>folder = 'C:\/CompanyFiles'<nl><nl>with open(outFile, 'w') as wfp:<nl><tab> for f in os.listdir(inFolder):<nl><tab><tab>  tmp = [line.rstrip() for line in open(os.path.join(folder, f), 'r')]<nl><tab><tab>  arr = tmp[0].split('-')<nl><tab><tab>  arr = [arr[0]] + arr[1].split('_')<nl><tab><tab>  arr += [t.split(':')[1].strip() for t in tmp[1:]]<nl><tab><tab>  wfp.write(','.join([\"'\" + e + \"'\" for e in arr]) + '<nl>')","out":"txtファイルからカンマ区切りのマトリックス - 続き"}
{"in":"from pydub import AudioSegment<nl><nl>def detect_leading_silence(sound, silence_threshold=-50.0, chunk_size=10):<nl><tab> '''<nl><tab> sound is a pydub.AudioSegment<nl><tab> silence_threshold in dB<nl><tab> chunk_size in ms<nl><nl><tab> iterate over chunks until you find the first one with sound<nl><tab> '''<nl><tab> trim_ms = 0 # ms<nl><tab> while sound[trim_ms:trim_ms+chunk_size].dBFS < silence_threshold:<nl><tab><tab>  trim_ms += chunk_size<nl><nl><tab> return trim_ms<nl><nl>sound = AudioSegment.from_file(\"\/path\/to\/file.wav\", format=\"wav\")<nl><nl>start_trim = detect_leading_silence(sound)<nl>end_trim = detect_leading_silence(sound.reverse())<nl><nl>duration = len(sound)<tab> <nl>trimmed_sound = sound[start_trim:duration-end_trim]","out":"PyDubでWaveファイルの先頭と末尾の無音部分を除去する。"}
{"in":"boxticks = IntVar().get()","out":"onvalueとoffvalueで変数を変更する。"}
{"in":"def gather_path(self):<nl><tab> path_object = PathsOfDomain.objects.filter(FKtoTld=3)","out":"メソッドから別のメソッドへの属性の受け渡し python"}
{"in":"import subprocess<nl>p = subprocess.Popen([\"some\", \"command\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)<nl>stdout, stderr = p.communicate()<nl>stdout=stdout.split(\"<nl>\")<nl>for line in stdout:<nl><tab> if line.startswith(\"This is the line:\"):<nl><tab><tab>  print line","out":"サブプロセス出力から特定の1行だけを取得する方法"}
{"in":"ratio = Column(Numeric(5, 3), nullable=True)","out":"SQLAlchemyでこのカラムを宣言する方法"}
{"in":"name=input(\"Enter your name: \")<nl>message=input(\"Enter your message:\")<nl>namefinal = ''<nl>for letter  in name:<tab><nl><tab>if letter not in message:<nl><tab><tab> namefinal += letter<nl>print namefinal","out":"Pythonのリストの要素をユーザー入力で削除する。"}
{"in":"def GetHtmlText(self,text):<nl><tab> html_text = '<h3>Data Results:<\/h3><p><table border=\"2\">'<nl><tab> html_text += \"<tr><td>Domain:<\/td><td>Mail Server:<\/td><td>TLS:<\/td><td># of Employees:<\/td><td>Verified<\/td><\/tr>\"<nl><tab> for row in root.ptglobal.to_csv():<nl><tab><tab>  html_text += \"<tr>\"<nl><tab><tab>  for x in range(len(row)):<nl><tab><tab><tab><tab>html_text += \"<td>\"+str(row[x])+\"<\/td>\"<nl><tab><tab>  html_text += \"<\/tr>\"<nl><tab> return html_text + \"<\/table><\/p>\"","out":"wxPython フォーマット付き文字列の印刷"}
{"in":"handler.cgi_directories = [\"\/\"]","out":"Python CGIHTTPServer デフォルトのディレクトリ"}
{"in":"stored_json = token.readlines()<nl>token.close()<nl>return stored_json","out":"flaskでサーバーにjsonファイルを読み書きする。"}
{"in":"from PyQt4 import QtGui<nl><nl>app = QtGui.QApplication([])<nl><nl>menu = QtGui.QMenu()<nl><nl>sub_menu = QtGui.QMenu(\"Sub Menu\")<nl><nl>for i in [\"a\", \"b\", \"c\"]: #or your dict<nl><tab> sub_menu.addAction(i) #it is just a regular QMenu<nl><nl>menu.addMenu(sub_menu)<nl><nl>menu.show()<nl><nl>app.exec_()","out":"Pyqt4 のサブメニュー付きドロップダウン・メニュー"}
{"in":"webbrowser.open('https:\/\/www.google.com') # open a passed URL string using default browser","out":"Python 2.7からURLを開く"}
{"in":"length = len(filelist)<nl>for i in range(length):<nl><tab>self.importFiles(filelist[i],timestamps[i])","out":"一度に2つのリストから値を取得するにはどうすればよいか"}
{"in":"def mask_z_level(xi, yi, msk_img, x0=-14.3887, y0=5.564):<nl><tab> im = plt.imread(msk_img)<nl><tab> msk = np.zeros(xi.shape, dtype='bool')<nl><nl><tab> pxmm = np.zeros((3, 2))<nl><tab> p = 0<nl><nl><tab> for row in range(im.shape[0]):<nl><tab><tab>  for col in range(im.shape[1]):<nl><tab><tab><tab><tab>if tuple(im[row, col]) == (1., 0., 0.):<nl><tab><tab><tab><tab><tab> pxmm[p] = (row, col)<nl><tab><tab><tab><tab><tab> p += 1<nl><nl><tab> pxx = pxmm[1, 1] \/ 5.5<nl><tab> pxy = pxmm[2, 0] \/ 6.5<nl><tab> print(pxx, pxy)<nl><nl><tab> for j in range(xi.shape[1]):<nl><tab><tab>  for i in range(xi.shape[0]):<nl><tab><tab><tab><tab>x, y = xi[i, j], yi[i, j]<nl><tab><tab><tab><tab>dx, dy = x - x0, y - y0<nl><tab><tab><tab><tab>dpx = np.round(dx * pxx).astype('int')<nl><tab><tab><tab><tab>dpy = -np.round(dy * pxy).astype('int')<nl><nl><tab><tab><tab><tab>if tuple(im[dpy, dpx]) == (1., 1., 1.):<nl><tab><tab><tab><tab><tab> msk[i, j] = True<nl><nl><tab> return msk","out":"2次元の点からエッジを見つける Python"}
{"in":"lines = file.readlines()<nl>lines = lines[:-1]","out":"Pythonでファイルの最終行を削除する"}
{"in":"file = open(\"save_file.txt\")<nl><nl>for each_line in file:<nl><tab> s = {}<nl><tab> (s['name'], s['race'], s['class'], s['FOR'], s['INT'], s['DES']) = each_line.split(\";\")<nl><tab> print(s['name'])<nl><tab> print(s['race'])<nl><tab> print(s['class'])<nl><tab> print(s['FOR'])<nl><tab> print(s['INT'])<nl><tab> print(s['DES'])<nl><tab> print(s['name'])<nl>file.close()","out":"行数を多く印刷するには？"}
{"in":"from Spotfire.Dxp.Application.Visuals import VisualContent<nl><nl>#\"visual\" is the name of the parameter found in the \"Script Parameter\" dialog below the editor which points to the visualization I want to change.<nl>vc = visual.As[VisualContent]()<nl>exp=\"[\"+Document.Properties[\"DocPropertyNameHere\"]+\"]\"<nl>vc.YAxis.Expression =exp","out":"Spotfire with IronPythonで棒グラフのX軸(xaxis)を設定するにはどうすればよいですか？"}
{"in":"class SignupForm(authtoolsforms.UserCreationForm):<nl><tab> captcha = CaptchaField()<nl><nl><tab> def __init__(self, *args, **kwargs):<nl><tab><tab>  super(SignupForm, self).__init__(*args, **kwargs)<nl><tab><tab>  self.helper = FormHelper()<nl><tab><tab>  self.fields[\"email\"].widget.input_type = \"email\"<nl><nl><tab><tab>  self.helper.layout = Layout(<nl><tab><tab><tab><tab>Field('email', placeholder=\"Enter Email\", autofocus=\"\"),<nl><tab><tab><tab><tab>Field('name', placeholder=\"Enter Full Name\"),<nl><tab><tab><tab><tab>Field('password1', placeholder=\"Enter Password\"),<nl><tab><tab><tab><tab>Field('password2', placeholder=\"Re-enter Password\"),<nl><tab><tab><tab><tab>Field('gender', placeholder=\"Gender\"),<nl><tab><tab><tab><tab>Field('captcha ', placeholder=\"Enter captcha\"),<nl><tab><tab><tab><tab>Submit('sign_up', 'Sign up', css_class=\"btn-warning\"),<nl><tab><tab><tab><tab>)","out":"DjangoのCrispy FormでCaptchaField()を追加する方法とは？"}
{"in":"lastItems = [int(i[-1]) for i in yourList[2:]]","out":"Python - ファイルを使用してリストの最後の項目を取得する"}
{"in":"import subprocess<nl>out, err = subprocess.Popen([\"pdftotext\", \"-\", \"-\"], stdout=subprocess.PIPE).communicate(pdf_data)","out":"pythonからコマンドラインを実行し、メモリから引数をパイピングする。"}
{"in":"import httplib<nl>from socket import error<nl><nl>with open(\"in.txt\") as f, open(\"out.txt\",\"a\") as out: # change to w if you want to overwrite each time<nl><tab> for line in f:<nl><tab><tab>  try:<nl><tab><tab><tab><tab>conn = httplib.HTTPConnection(line.rstrip())<nl><tab><tab><tab><tab>conn.request(\"HEAD\", \"\/index.php\")<nl><tab><tab><tab><tab>r1 = conn.getresponse()<nl><tab><tab><tab><tab>print(r1.reason)<nl><tab><tab><tab><tab>if r1.reason == \"OK\":<nl><tab><tab><tab><tab><tab> out.write(line)<nl><tab><tab>  except error as e:<nl><tab><tab><tab><tab>print(e)","out":"テキストファイルで各IPのindex.phpチェックを行う方法"}
{"in":"from SimpleCV import *<nl>from imagegtk import DisplayImage<nl><nl>im = Image(\"Lenna\")<nl>image = im.toRGB.getBitmap()<nl><nl>d = DisplayImage(title=\"iamgegtk\")<nl><nl>label = gtk.Label(\"Lenna\")<nl>d.box.pack_start(label,False,False,0)<nl><nl>but1 = gtk.Button(\"Quit\")<nl>but1.connect(\"clicked\",d.leave_app)<nl>d.box.pack_end(but1,False,False,2)<nl><nl>d.show(image)","out":"SimpleCVをGUIで拡張する方法"}
{"in":"print (r.data.decode('utf-8'))","out":"urllib3を使って生のhtml文字列を印刷する方法？"}
{"in":"class Game(db.Model):<nl>  players = db.ListProperty()<nl><nl>game1.players = ['tom', 'bob']<nl>game2.players = ['joe', 'tom']<nl><nl># this query will match all games where tom is one of the players<nl>query = Game.all().filter('players =', 'tom')","out":"Google app engineのgqlクエリで、2つのプロパティを同じ文字列で問い合わせる。"}
{"in":"import os<nl><nl>os.system('export http:\/\/<your proxy>:<your port>\/')<nl>os.system('export https:\/\/<your proxy>:<your port>\/')","out":"Pythonからブラウザのプロキシ設定を変更する（Ubintu）？"}
{"in":"import re<nl><nl>regex = '''<item><nl><obj1>grab1<\/obj1><nl><obj2>text<obj2><nl>...<nl><\/item>'''<nl><nl>pattern = re.compile(regex)<nl><nl>with open('data.dat') as searchfile:<nl><tab> filetext = searchfile.read()<nl><tab> text = pattern.findall(filetext)<nl><tab> print text","out":"pythonで複数行の文字列から値を取得するために正規表現を使用する。"}
{"in":"import codecs<nl>f=codecs.open(\"test.html\", 'r')<nl>print f.read()","out":"htmlファイルを開くには？"}
{"in":"import re<nl>import xml.sax.saxutils<nl><nl>def anchor_from_email_address_match(match):<nl><tab> address = match.group(0)<nl><tab> return \"<a href=%s>%s<\/a>\" % (<nl><tab><tab>  xml.sax.saxutils.quoteattr(\"mailto:\" + address),<nl><tab><tab>  xml.sax.saxutils.escape(address))<nl><nl>def replace_email_addresses_with_anchors(text):<nl><tab> return re.sub(\"\\w+@(?:\\w|\\.)+\", anchor_from_email_address_match, text)<nl><nl>print replace_email_addresses_with_anchors(<nl><tab> \"An address: bob@example.com, and another: joe@example.com\")","out":"Pythonです：メールアドレスをHTMLリンクに変換する"}
{"in":"sys.stdout.flush()","out":"Pythonでは、なぜ改行がないと印刷されないのでしょうか？"}
{"in":"userWantToContinue = True<nl>while aqpool[0] and userWantToContinue:<nl><tab> shuffle (aqpool)<nl><tab> numRight = 0<nl><nl><tab> for question, rightAnswer in aqpool:<nl><tab><tab>  answer = raw_input(question + \" \")<nl><nl><tab><tab>  if answer == rightAnswer:<nl><tab><tab><tab><tab>print (\"R?TT SVAR!\")<nl><nl><tab><tab><tab><tab>numRight = numRight + 1<nl><nl><tab><tab>  else:<nl><tab><tab><tab><tab>print(\"FEL SVAR! R?tta svaret ?r: \" + rightAnswer + \"<nl>\")<nl><nl><nl><tab><tab>  print(\"Vill du f?rs?tta spela? (ja eller nej)\")<nl><tab><tab>  userWantToContinue = str(raw_input()) not in ('n', 'nej')<nl><tab><tab>  if not userWantToContinue:<nl><tab><tab><tab><tab>break<nl><nl><tab> total = numRight \/ len(aqpool) * 100<nl><tab> print (\"Du hade %s%% r?tt!\" % total)","out":"Pythonプログラミング - ループの終了とスコアの表示"}
{"in":"from gevent import monkey<nl>monkey.patch_all()<nl><nl>import urllib2<nl>from gevent.pool import Pool<nl><nl><nl>def download(url):<nl><tab> return urllib2.urlopen(url).read()<nl><nl><nl>if __name__ == '__main__':<nl><tab> urls = ['http:\/\/httpbin.org\/get'] * 100<nl><tab> pool = Pool(20)<nl><tab> print pool.map(download, urls)","out":"Python - 複数のURLの取得"}
{"in":"from scipy import stats<nl>import numpy as np<nl>np.random.seed(2015)<nl><nl>x = [ stats.t.rvs(9) for i in range(250)]<nl>stats.t.fit(x)","out":"Scipyを使って、t分布の最適な自由度を自動的に推定する方法はありますか？"}
{"in":"import re<nl>s = '<table style=\"width: 100%%\" bgcolor=\"%s\"><tr><td><font color=\"%s\"><b>1.23<\/b><\/td><\/tr><\/table>'<nl>result = float(re.sub(r\"<.?table[^>]*>|<.?t[rd]>|<font[^>]+>|<.?b>\", \"\", s))","out":"pythonで特定のhtmlタグを削除する。"}
{"in":"my_list = [l[0] for l in list]","out":"Pythonでリストから括弧を削除する"}
{"in":"import sys<nl>getattr(sys.modules[__name__], 'A')","out":"現在のpythonモジュールからクラスのセットを動的に取得するにはどうすればよいでしょうか？"}
{"in":"import wx<nl><nl>class MyPanel(wx.Panel):<nl><tab> \"\"\" class MyPanel creates a panel to draw on, inherits wx.Panel \"\"\"<nl><tab> def __init__(self, parent, id):<nl><tab><tab>  # create a panel<nl><tab><tab>  wx.Panel.__init__(self, parent, id)<nl><tab><tab>  self.SetBackgroundColour(\"white\")<nl><tab><tab>  self.Bind(wx.EVT_PAINT, self.OnPaint)<nl><nl><tab> def OnPaint(self, evt):<nl><tab><tab>  \"\"\"set up the device context (DC) for painting\"\"\"<nl><tab><tab>  self.dc = wx.PaintDC(self)<nl><tab><tab>  self.dc.BeginDrawing()<nl><tab><tab>  self.dc.SetPen(wx.Pen(\"grey\",style=wx.TRANSPARENT))<nl><tab><tab>  self.dc.SetBrush(wx.Brush(\"grey\", wx.SOLID))<nl><tab><tab>  # set x, y, w, h for rectangle<nl><tab><tab>  self.dc.DrawRectangle(250,250,50, 50)<nl><tab><tab>  self.dc.EndDrawing()<nl><tab><tab>  del self.dc<nl><nl>app = wx.PySimpleApp()<nl># create a window\/frame, no parent, -1 is default ID<nl>frame = wx.Frame(None, -1, \"Drawing A Rectangle...\", size = (500, 500))<nl># call the derived class, -1 is default ID<nl>MyPanel(frame,-1)<nl># show the frame<nl>frame.Show(True)<nl># start the event loop<nl>app.MainLoop()","out":"wxPython - DCで塗りつぶされていない矩形を描画する"}
{"in":"#!\/usr\/bin\/env python<nl># -*- coding: utf-8 -*-<nl><nl>import pygtk<nl>pygtk.require(\"2.0\")<nl>import gtk<nl>import gtk.glade<nl><nl>class HellowWorldGTK:<nl><nl><tab> def __init__(self):<nl><tab><tab>  self.gladefile = \"helloworld.glade\" <nl><tab><tab>  self.glade = gtk.Builder()<nl><tab><tab>  self.glade.add_from_file(self.gladefile)<nl><tab><tab>  self.glade.connect_signals(self)<nl><tab><tab>  self.glade.get_object(\"MainWindow\").show_all()<nl><nl><tab> def on_MainWindow_delete_event(self, widget, event):<nl><tab><tab>  gtk.main_quit()<nl><nl>if __name__ == \"__main__\":<nl><tab> try:<nl><tab><tab>  a = HellowWorldGTK()<nl><tab><tab>  gtk.main()<nl><tab> except KeyboardInterrupt:<nl><tab><tab>  pass","out":"Pythonにgladeのインターフェイスを入れる"}
{"in":"import Tkinter as tk<nl><nl>def key_press(event):<nl><tab> print event.char<nl><tab> return event.char<nl><tab> # Or whatever processing you might want.<nl><nl>tk_app = tk.Tk()<nl>tk_app.bind('<KeyPress>', key_press)<nl>tk_app.mainloop()","out":"Python 2.7でキーボードキーをマッピングするにはどうしたらいいですか？"}
{"in":"query = '''INSERT INTO cheese (data) VALUES (%s)'''<nl>cur.execute(query, (bd,))","out":"MySQLのblobにpythonのバイナリ文字列オブジェクトを挿入する。"}
{"in":"def dfunc(ipees, portees):<nl><tab> for (ip, port) in zip(ipees, portees):<nl><tab><tab>  try:<nl><tab><tab><tab><tab>s = socket.create_connection((ip, port), timeout=10)<nl><tab><tab><tab><tab>s.send('GET \/ HTTP\/1.0\\r<nl>\\r<nl>')<nl><tab><tab><tab><tab>buf = s.recv(1000)<nl><tab><tab><tab><tab>print buf<nl><tab><tab>  except socket.error:<nl><tab><tab><tab><tab>print 'Could not connect to ({0}, {1})'.format(ip, port)","out":"pythonスクリプトから出力されない"}
{"in":"self.builder.get_object(\"boxWelcome\").set_text(\"Welcome %s!\" % (username.get_text()))","out":"pythonからglade guiにデータをエクスポートする。"}
{"in":"driver.find_element_by_xpath(\"\/\/input[@placeholder='Select month']\").click()<nl>driver.find_element_by_xpath(\"\/\/*[contains(text(), '09')]\").click()","out":"PythonでSeleniumの<input>ドロップダウンの値を設定する"}
{"in":"def change(self, event):<nl><tab> myobject = event.GetEventObject()<nl><tab> myobject.Disable()","out":"wxPython、ボタンを無効にする？"}
{"in":"import pygraphviz as pgv<nl>from PIL import Image<nl><nl>d={'1': {'2': None}, '2': {'1': None, '3': None}, '3': {'2': None}}<nl>A=pgv.AGraph(d)<nl>A.node_attr['style']='filled'<nl>n = A.get_node('1')<nl>n.attr['fillcolor']=\"#CCCCFF\"<nl>n.attr['label'] = 'MY LOVELY LABEL'<nl>A.layout() # default to neato<nl>A.layout(prog='dot') # use dot<nl>A.draw('file.png')<nl>img = Image.open('file.png')<nl>img.show()","out":"pyGraphVizでノードの色を設定する"}
{"in":"sum(sum(b) for b in a)","out":"itertoolsを使用せずに入れ子リストの和を求める。"}
{"in":"def refresh(self):<nl><tab> if (self.nbfig > 0): #meaning the c++ app already plotted a figure<nl><tab><tab>  plt.ioff()<nl><tab><tab>  plt.close()","out":"matplotlib で最初のグラフを閉じた後、新しいグラフをプロットする。"}
{"in":"for i in range(0,11):<nl><tab> if i % 3 == 0 and i != 0:<nl><tab><tab>  continue<nl><tab> print(i)<nl><nl><nl>1<nl>2<nl>4<nl>5<nl>7<nl>8<nl>10","out":"範囲をループする際に、n 番目の値までスキップする - python"}
{"in":"with open(keywords_file, 'r') as f:<nl><tab>  keywords = \",\".join(line.strip() for line in f)","out":"文字列の結合は最初の行をスキップする"}
{"in":"session.query(func.max(Table.title), Table.slug).group_by(Table.slug).all()","out":"sqlalchemy: 1つのカラムに対してのみ区別する。"}
{"in":"import base64<nl><nl>with open('input.zip', 'rb') as fin, open('output.zip.b64', 'w') as fout:<nl><tab> base64.encode(fin, fout)","out":"PythonでZIPファイルをbase64エンコードする"}
{"in":"print datetime.strptime(mylist[4], '%Y%m')","out":"要素を抽出し、datetimeに変換する。"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>def myhist(ax, color):<nl><tab> ax.hist(np.log(np.arange(1, 10, .1)), facecolor=color)<nl><nl>def say_something(ax, words):<nl><tab> t = ax.text(.2, 20., words)<nl><tab> make_a_dim_yellow_bbox(t)<nl><nl>def make_a_dim_yellow_bbox(txt):<nl><tab> txt.set_bbox(dict(facecolor='yellow', alpha=.2))<nl><nl>fig = plt.figure()<nl>ax0 = fig.add_subplot(1,2,1)<nl>ax1 = fig.add_subplot(1,2,2)<nl><nl>myhist(ax0, 'blue')<nl>myhist(ax1, 'green')<nl><nl>say_something(ax0, 'this is the blue plot')<nl>say_something(ax1, 'this is the green plot')<nl><nl>plt.show()","out":"Pythonとmatplotlib - 描画関数の再利用"}
{"in":"def runbg(cmd, sockname=\"dtach\"):<nl><tab> return run('dtach -n `mktemp -u \/tmp\/%s.XXXX` %s'  % (sockname,cmd))","out":"ファブリックを使用して、nohupでバックグラウンドプロセスを開始します。"}
{"in":"myDict.pop(key, None)","out":"Python del if in dictionaryを1行で表示する。"}
{"in":"r'T.{18}(?:TT|AA|CC|GG)'","out":"python 正規表現繰り返し文字"}
{"in":"import collections<nl><nl>class Coffee():<nl><tab> def __init__(self, name='', color='', taste=''):<nl><tab><tab>  self.name = name<nl><tab><tab>  self.color = color<nl><tab><tab>  self.taste = taste<nl><nl><tab> def __repr__(self):<nl><tab><tab>  return '{0} {1} {2}'.format(self.name, self.color, self.taste)<nl><nl>prompt = \"Enter name,color,taste or ctrl-d when done: \"<nl>coffees = collections.defaultdict(Coffee)<nl><nl>while True:<nl><tab> try:<nl><tab><tab>  name, color, taste = input(prompt).split(',')<nl><tab><tab>  coffees[name].name = name<nl><tab><tab>  coffees[name].color = color<nl><tab><tab>  coffees[name].taste = taste<nl><tab> except ValueError:<nl><tab><tab>  print(\"Try again!\")<nl><tab> except EOFError:<nl><tab><tab>  print()<nl><tab><tab>  break<nl><nl><nl>print(coffees)","out":"オブジェクトのリストを変更するためのエレガントでPythonicなアプローチ"}
{"in":"import urllib.request<nl>from bs4 import BeautifulSoup<nl><nl>url_to_parse = 'http:\/\/www.myfxbook.com\/members\/fxgrowthbot\/forex-growth-bot\/71611'<nl>response = urllib.request.urlopen(url_to_parse)<nl>html = response.read()<nl>soup = BeautifulSoup(html)<nl>a = soup.find(id='history').find_all('td')<nl><nl>print(len(a))  # 300","out":"BS4 でリモート HTML からテーブル <td> をパースする。"}
{"in":"import random<nl>import urllib<nl>import urllib2<nl><nl>url = 'https:\/\/www.interactivebrokers.com\/java\/classes\/latest.jnlp?counter=' + str(random.random())<nl><nl>def download_file_1(url):<nl><tab> urllib.urlretrieve(url + \".jnlp\", \"latest.jnlp\")<nl><nl>def download_file_2(url):<nl><tab> jnlpfile = urllib2.urlopen(url + \".jnlp\")<nl><tab> output = open('test.jnlp','wb')<nl><tab> output.write(jnlpfile.read())<nl><tab> output.close()","out":"PythonからInteractive BrokersのTWSを開く方法"}
{"in":"for s in mylist:<nl><tab> if 'item' in s:<nl><tab><tab> print(s)","out":"Pythonのリストで部分文字列を検索するとNameErrorが発生する。"}
{"in":"return list_a[:-1] + list_b[1:]","out":"スライスしたリストを返す"}
{"in":"Arguments = 1, 2, 3<nl>SumOf(*Arguments)","out":"Pythonで複数の引数を渡す代わりに単一の変数を使用する方法"}
{"in":"#!\/usr\/bin\/env python<nl>import getpass<nl>import sys<nl>import telnetlib<nl><nl>HOST = \"localhost\"<nl>user = raw_input(\"Enter your remote account: \")<nl>password = getpass.getpass()<nl><nl>tn = telnetlib.Telnet(HOST)<nl><nl>tn.read_until(\"login: \")<nl>tn.write(user + \"<nl>\")<nl>if password:<nl><tab> tn.read_until(\"Password: \")<nl><tab> tn.write(password + \"<nl>\")<nl><nl>tn.write(\"ls<nl>\")<nl>tn.write(\"exit<nl>\")<nl><nl>print tn.read_all()","out":"telnetクライアントの作成"}
{"in":"v = float(input('start vlocity m\/s: '))<nl>a = float(input('start angle : '))<nl>p = v*math.sin(math.radians(a))<nl>g = 9.81<nl>equ = p*p\/(2*g)  <nl>print(str(equ) + ' M')","out":"Python How To Square Sin for the Height Equation（高さの方程式を二乗する方法"}
{"in":"import os<nl>import pygame<nl><nl>images = {str(i)[:-4]:pygame.image.load(\"images\/\"+i) for i in os.listdir(\"images\") if os.path.isfile(\"images\/\"+i)}","out":"画像のフォルダを自動で読み込むにはどうすればよいですか？"}
{"in":"def my_function(f, value):<nl>  yield value<nl>  while True:<nl><tab> value = f(value)<nl><tab> yield value","out":"yield python add previous function 結果"}
{"in":"B= np.split(A, np.where(A[:, 0]== 0.)[0][1:])","out":"numpyで配列を値で分割する"}
{"in":"from mako.template import Template<nl><nl>mydata = {'foo': 'bar', 'better foo': 'beach bar'}<nl>working_template = Template(\"Let's go to the ${foo}\")<nl>fail_template = Template(\"Let's go to the ${mydata['better foo']}\")<nl><nl>print working_template.render(**mydata)<nl>print fail_template.render(mydata=mydata)","out":"makoで複数単語の辞書キーを参照する方法は？"}
{"in":"from docx import Document<nl><nl>document = Document()<nl>r = 2 # Number of rows you want<nl>c = 2 # Number of collumns you want<nl>table = document.add_table(rows=r, cols=c)<nl>table.style = 'LightShading-Accent1' # set your style, look at the help documentation for more help<nl>for y in range(r):<nl><tab> for x in range(c):<nl><tab><tab>  cell.text = 'text goes here'<nl>document.save('demo.docx') # Save document","out":"Pythonでdocxファイルを作成する方法"}
{"in":"turtle.begin_fill() # Begin the fill process.<nl>turtle.down() # \"Pen\" down?<nl>for i in range(squares):  # For each edge of the shape<nl><tab> turtle.forward(40) # Move forward 40 units<nl><tab> turtle.left(angle) # Turn ready for the next edge<nl>turtle.up() # Pen up<nl>turtle.end_fill() # End fill.","out":"Turtleでこの四角を埋めるにはどうしたらいいか - Python"}
{"in":"host, aliaslist, lan_ip = socket.gethostbyname_ex(socket.gethostname())<nl>print host<nl>print aliaslist<nl>print lan_ip[0]","out":"数分おきにIPアドレスを指定してファイルをアップロードするpythonスクリプトが必要です。"}
{"in":"sizer = wx.BoxSizer(wx.VERTICAL)<nl>sizer.Add(self.canvas, 1, wx.EXPAND)<nl>self.SetSizer(sizer)","out":"wxPythonです：何かを拡張する"}
{"in":"import matplotlib.pyplot as plt<nl><nl>def read_data(f, num_lines=1, split_on=':'):<nl><tab> lines = (f.next() for i in range(num_lines))<nl><tab> pieces = (line.split(split_on) for line in lines)<nl><tab> data = ((a,float(b)) for a,b in pieces)<nl><tab> return zip(*data)<nl><nl>with open(\"xx.txt\") as inf:<nl><tab> amino_names, amino_values = read_data(inf, 4)<nl><tab> ph_names, ph_values = read_data(inf, 2)<nl><nl>fig = plt.figure(figsize=(2,1))<nl>p1 = fig.add_subplot(1,2,1)<nl>p1.pie(amino_values, labels=amino_names)<nl>p2 = fig.add_subplot(1,2,2)<nl>p2.pie(ph_values, labels=ph_names)<nl>fig.show()","out":"Pythonのmatplotlibで円グラフを描く"}
{"in":"included_clients = clientData.objects.values_list('client', flat=True)<nl><nl>excluded_clients = Client.objects.exclude(id__in=included_clients)","out":"ある条件に基づいてモデルからデータをフィルタリングする"}
{"in":"if os.system(\"\/usr\/libexec\/oah\/translate > \/dev\/null 2>&1\"):<nl>  print \"Not installed\"<nl>else:<nl>  print \"Installed\"","out":"rosettaがインストールされているかどうかを確認する方法とは？--MacPython"}
{"in":"def cmpdirs(dir_cmp):<nl><tab> # make copies of the comparison results<nl><tab> left<tab>= dir_cmp.left_only[:]<nl><tab> right  = dir_cmp.righ_only[:]<nl><tab> common = dir_cmp.common_files[:]<nl><nl><tab> for sub_dcmp in dir_cmp.subdirs.values():<nl><tab><tab>  sub_left, sub_right, sub_common = cmpdirs(sub_dcmp)<nl><nl><tab><tab>  # join the childrens results<nl><tab><tab>  left<tab>+= sub_left<nl><tab><tab>  right  += sub_right<nl><tab><tab>  common += sub_common<nl><nl><tab> # return the merged results<nl><tab> return (left, right, common)<nl><nl>if __name__ == '__main__':<nl><tab> dcmp<tab>= dircmp('dir1', 'dir2')<nl><tab> result = cmpdirs(dcmp)","out":"再帰的なPython関数の戻り値からフラットリストを作成する。"}
{"in":"from sqlalchemy import create_engine, Column, Integer, String, DateTime, Float, UnicodeText, VARCHAR, NVARCHAR, TEXT, DATE, distinct, ForeignKey, Table<nl>import sqlalchemy<nl>from sqlalchemy.orm import sessionmaker, relationship<nl>from sqlalchemy.ext.declarative import declarative_base<nl>engine = create_engine(\"sqlite:\/\/\/.\/P_case.db\", <nl><tab><tab><tab><tab><tab><tab><tab>  echo=False)<nl><nl>Session = sessionmaker( bind=engine )<nl>session = Session()<nl><nl>Base = declarative_base()<nl>metadata = Base.metadata #########################<nl>class Bus(Base):<nl><nl><tab> __tablename__ = \"bus_info\"<nl><tab> id = Column( Integer, primary_key = True )<nl><nl><tab> ## Bus<nl><tab> number = Column( Integer)<nl><nl>metadata.create_all( engine )<tab> ######################","out":"SQL Alchemy ORMの構築"}
{"in":"from PySTAF import * <nl><nl>filename = 'C:\\\\Users\\\\NET\\\\2.png'<nl>destination = '192.168.1.139'<nl>copy_cmd =  \"COPY FILE {} TODIRECTORY c:\\Temp TOMACHINE {}\".format(STAFWrapData(filename),STAFWrapData(destination))<nl>result = handle.submit(\"local\", \"FS\",copy_cmd)<nl>print result.result<nl>assert result.rc == STAFResult.Ok","out":"PySTAFを使用してリモートマシンのファイルをコピーする方法"}
{"in":"from datetime import datetime<nl>from datetime import timedelta<nl><nl>now = datetime.now()<nl>time_changed_state = now - timedelta(hours=2)<nl>time_delay = 0<nl>time_arrival = time_changed_state + timedelta(minutes=time_delay)<nl><nl>if now < time_arrival:<nl><tab>print 'something'<nl>elif now >= time_arrival:<nl><tab>print 'something different'","out":"pythonのDatetime比較の動作"}
{"in":"# views.py<nl><nl>part_list = product.buildpart.all().order_by('family__type')","out":"Django がビューで自己参照型 ManyToManyField の関連項目を取得する。"}
{"in":"def lineWhiteness(line, image):<nl><tab> (pt1, pt2) = lineParams(line, len(image))<nl><tab> count = 0<nl><tab> li = cv.InitLineIterator(cv.fromarray(image), pt1, pt2)<nl><tab> for (r, g, b) in li:<nl><tab><tab>  if (r or g or b):<nl><tab><tab><tab><tab>count += 1<nl><tab> return count","out":"OpenCVで線に沿った白画素の数を数える。"}
{"in":"def test_testing(self):<nl>  url = self.base + str(gameid)  #the base ends with '\/v2\/game\/'<nl>  headers = {'content-type': 'application\/json'}<nl>  r = requests.post(url,headers=headers)","out":"url 変数で flask ルートにアクセスする Python リクエスト"}
{"in":"Class._get_collection().aggregate([<nl><tab> { '$group': {<nl><tab><tab>  '_id': {<nl><tab><tab><tab><tab>'year': { '$year': '$utc_timestamp' },<nl><tab><tab><tab><tab>'month': { '$month': '$utc_timestamp' },<nl><tab><tab><tab><tab>'day': { '$dayOfMonth': '$utc_timestamp' },<nl><tab><tab>  },<nl><tab><tab>  'defects': {<nl><tab><tab><tab><tab>'$sum': { '$cond': [<nl><tab><tab><tab><tab><tab> { '$eq': [ '$status', 'defect' ] },<nl><tab><tab><tab><tab><tab> 1,<nl><tab><tab><tab><tab><tab> 0<nl><tab><tab><tab><tab>]}<nl><tab><tab>  },<nl><tab><tab>  'totalCount': { '$sum': 1 }<nl><tab> }},<nl><tab> { '$project': {<nl><tab><tab>  'defect_rate': {<nl><tab><tab><tab><tab>'$cond': [<nl><tab><tab><tab><tab><tab> { '$eq': [ '$defects', 0 ] },<nl><tab><tab><tab><tab><tab> 0,<nl><tab><tab><tab><tab><tab> { '$divide': [ '$defects', '$totalCount' ] }<nl><tab><tab><tab><tab>]<nl><tab><tab>  }<nl><tab> }}<nl>])","out":"MongoEngineを使ってこのMongoDBクエリを実行する方法"}
{"in":"# emails is a set of emails<nl>for line in fileinput.input(\"csvfile.csv\",inplace =1):<nl><tab> parts = line.split(',')<nl><tab> if parts[3] not in emails:<nl><tab><tab>  print line","out":"2つのリストの差分を、それぞれのリストの文字列を含む部分文字列に基づいて取得するにはどうすればよいですか？"}
{"in":"d = fits.getdata('data.fit')<nl>df=pd.DataFrame(np.array(d).byteswap().newbyteorder())","out":"numpyの配列からpandasのDataFrameを作成すると、おかしなエラーが発生する。"}
{"in":"from django import db<nl>db.close_connection()","out":"django transaction.commit_manuallyで「MySQLサーバーが消えた」につながる。"}
{"in":"def check_file_ready(self, path):<nl><tab> '''Check if file is not opened by another process.'''<nl><tab> handle = None<nl><tab> try:<nl><tab><tab>  handle = win32file.CreateFile(<nl><tab><tab><tab><tab>path,<nl><tab><tab><tab><tab>win32file.GENERIC_WRITE,<nl><tab><tab><tab><tab>0,<nl><tab><tab><tab><tab>None,<nl><tab><tab><tab><tab>win32file.OPEN_EXISTING,<nl><tab><tab><tab><tab>win32file.FILE_ATTRIBUTE_NORMAL,<nl><tab><tab><tab><tab>None)<nl><tab><tab>  return True<nl><tab> except pywintypes.error, e:<nl><tab><tab>  if e[0] == winerror.ERROR_SHARING_VIOLATION:<nl><tab><tab><tab><tab># Note: other possible error codes include<nl><tab><tab><tab><tab>#  winerror.ERROR_FILE_NOT_FOUND<nl><tab><tab><tab><tab>#  winerror.ERROR_PATH_NOT_FOUND<nl><tab><tab><tab><tab>#  winerror.ERROR_ACCESS_DENIED.<nl><tab><tab><tab><tab>return False<nl><tab><tab>  raise<nl><tab> finally:<nl><tab><tab>  if handle:<nl><tab><tab><tab><tab>win32file.CloseHandle(handle)","out":"Pythonを使ってファイルの保存が完了したことを確認する方法は？"}
{"in":"common_words = frozenset((\"if\", \"but\", \"and\", \"the\", \"when\", \"use\", \"to\", \"for\"))<nl>title = \"When to use Python for web applications\"<nl>title_words = set(title.lower().split())<nl>keywords = title_words.difference(common_words)<nl>print(keywords)","out":"Python\/Djangoで、長い単語のリストに対して文字列を効率的にフィルタリングする方法は？"}
{"in":"from kivy.uix.popup import Popup<nl>from kivy.uix.textinput import TextInput<nl>from kivy.uix.boxlayout import BoxLayout<nl>from kivy.uix.label import Label<nl><nl>box = BoxLayout()<nl>box.add_widget(Label(text='Hello world'))<nl>box.add_widget(TextInput(text='Hi'))<nl><nl>popup = Popup(title='Test popup', content=box, size_hint=(None, None), size=(400, 400))","out":"Kivyです：ポップアップで複数の項目を表示することができない"}
{"in":"import win32gui<nl><nl>def enumerationCallaback(hwnd, results):<nl><tab> text = win32gui.GetWindowText(hwnd)<nl><tab> if text.find(\"Mozilla Firefox\") >= 0:<nl><tab><tab>  results.append((hwnd, text))<nl><nl>mywindows = []<tab> <nl>win32gui.EnumWindows(enumerationCallaback, mywindows)<nl>for win, text in mywindows:<nl><tab> print text<nl><nl>def recurseChildWindow(hwnd, results):<nl><tab> win32gui.EnumChildWindows(hwnd, recurseChildWindow, results)<nl><tab> print hwnd<nl><tab> # try to get window class, text etc using SendMessage and see if it is what we want<nl><nl>mychildren = []<nl>recurseChildWindow(mywindows[0][0], mychildren)","out":"PythonでFirefoxのアドレスバーのURLを取得する方法(pywin32)"}
{"in":"import collections<nl>import random<nl><nl>cnt = collections.Counter()<nl>for i in range(101):<nl>  number = random.randint(1, 100)<nl>  if number % 2 == 0:<nl><tab> cnt['even'] += 1<nl>  else:<nl><tab> cnt['odd'] += 1<nl>print(cnt)","out":"Pythonでカウンターを保持するプログラムについて、どなたか助けてください。"}
{"in":"import pandas as pd<nl>import numpy as np<nl>import io<nl><nl>#original data<nl>temp=u\"\"\"col1,col2,col3,col4,col5<nl>1,2,3,4,5<nl>3,4,-5,6,7<nl>5,6,-7,8,9\"\"\"<nl><nl>df1 = pd.read_csv(io.StringIO(temp))<nl>print df1<nl>#<tab>col1  col2  col3  col4  col5<nl>#0<tab>  1<tab>  2<tab>  3<tab>  4<tab>  5<nl>#1<tab>  3<tab>  4<tab> -5<tab>  6<tab>  7<nl>#2<tab>  5<tab>  6<tab> -7<tab>  8<tab>  9<nl><nl>#copy data for next processing<nl>df = df1.copy()<nl><nl>#set data by conditions<nl>df1['col1'] = np.where(df1['col3'] > 0,  df1['col1'] + df1['col3'], np.NaN)<nl>df1['col5'] = np.where(df1['col3'] > 0,  'blah', np.NaN)<nl><nl>#drop rows with NaN<nl>df1 = df1.dropna()<nl><nl>#append to original df<nl>result = pd.concat([df, df1], ignore_index=True)<nl>print result<nl>#<tab>col1  col2  col3  col4  col5<nl>#0<tab>  1<tab>  2<tab>  3<tab>  4<tab>  5<nl>#1<tab>  3<tab>  4<tab> -5<tab>  6<tab>  7<nl>#2<tab>  5<tab>  6<tab> -7<tab>  8<tab>  9<nl>#3<tab>  4<tab>  2<tab>  3<tab>  4  blah","out":"既存のデータフレームへの追記を高速化する方法"}
{"in":"from numpy import *<nl>from matplotlib.pyplot import *<nl>from math import *<nl><nl>t=arange(0,4*pi\/2,0.0001)<nl>print(t)<nl>#first set of parameters<nl>A=1<nl>B=1<nl>a1=1<nl>b1=2<nl>d=pi\/2<nl>#second set of parameters<nl>a2=2<nl>b2=3<nl>X1=[]<nl>Y1=[]<nl>Y2=[]<nl>X2=[]<nl>for i in range(len(t)):<nl><tab> x1=A*sin(a1*t[i]+d)<nl><tab> y1=B*sin(b1*t[i])<nl><tab> x2=A*sin(a2*t[i]+d)<nl><tab> y2=B*sin(b2*t[i])<nl><tab> X1=append(X1,x1)<nl><tab> Y1=append(Y1,y1)<nl><tab> X2=append(X2,x2)<nl><tab> Y2=append(Y2,y2)<nl>figure()<nl>plot(t,X1, color='blue')<nl>plot(t,Y1, color='pink')<nl>plot(t,X2, color='purple')<nl>plot(t,Y2, color='green')<nl>show()","out":"(Python)リサージュ曲線のグラフが表示されない不具合について"}
{"in":"import urllib<nl>urllib.urlretrieve('http:\/\/python.org\/images\/python-logo.gif', '\/tmp\/foo.gif')","out":"サーバー内の特定のパスにファイルをダウンロードする方法 : Python"}
{"in":"Clock.schedule_once(partial(durclock.update, str(i)), 10-i)","out":"Kivy Clock.schedule_onceでイベントをスケジュールする方法。"}
{"in":"def reverse(data_list):<nl><tab> length = len(data_list)<nl><tab> s = length<nl><nl><tab> new_list = [None]*length<nl><nl><tab> for item in data_list:<nl><tab><tab>  s = s - 1<nl><tab><tab>  new_list[s] = item<nl><tab> return new_list","out":"pythonのリストのリバースメソッドをゼロから作る"}
{"in":"list=['L:', 'JM6', 'jm6', 'test', 'turb', 'results', 'v6.2', 'examples']<nl>os.path.join(*list)","out":"リストの要素をパスに結合する"}
{"in":"class B(A):<nl><tab>  __init__ = my_init","out":"initをオーバーライドするにはどうすればよいですか？"}
{"in":"for i, item in enumerate(test):<nl><tab> if i and i % 4 == 0:<nl><tab><tab>  f.write(\"<nl>\")<nl><tab> f.write(\"%-9s|<tab>\" % item)","out":"pythonでリストを整形・表示する"}
{"in":"formatter = logging.Formatter('[%(asctime)s] p%(process)s {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s','%m-%d %H:%M:%S')","out":"標準のPythonロギングを拡張し、ログメソッドが呼び出された行番号を含めるようにする。"}
{"in":"class Test(object): # make sure you inherit from object<nl><tab> @property<nl><tab> def x(self):<nl><tab><tab>  return 4<nl><nl>p = Test()<nl>p.x # returns 4","out":"Pythonです：オブジェクトの属性を参照してメソッドを呼び出す方法"}
{"in":"driver.find_element_by_xpath(\"\/\/li\/label\/input[contains(..,'polishpottery')]\")","out":"Selenium WebDriverで要素の後にテキストが続くものを選択する。"}
{"in":"rst_epilog = \"\"\"<nl>.. _CC-BY: https:\/\/creativecommons.org\/licenses\/by\/3.0\/<nl>.. _MIT: http:\/\/opensource.org\/licenses\/MIT<nl>\"\"\"","out":"Sphinxの共通リンクターゲット"}
{"in":"class MakeSlots(type):<nl><nl><tab> def __new__(cls, name, bases, attrs):<nl><tab><tab>  attrs['__slots__'] = attrs.keys()<nl><nl><tab><tab>  return super(MakeSlots, cls).__new__(cls, name, bases, attrs)<nl><nl>class A(object):<nl><tab> one = 1<nl><tab> two = 2<nl><nl><tab> __metaclass__ = MakeSlots","out":"Pythonでクラスの静的属性を検索する"}
{"in":"result = [] # final result<nl>for i in range(len(A)):<nl><nl><tab> row = [] # the new row in new matrix<nl><tab> for j in range(len(B)):<nl><nl><tab><tab>  product = 0 # the new element in the new row<nl><tab><tab>  for v in range(len(A[i])):<nl><tab><tab><tab><tab>product += A[i][v] * B[v][j]<nl><tab><tab>  row.append(product) # append sum of product into the new row<nl><nl><tab> result.append(row) # append the new row into the final result<nl><nl><nl>print(result)","out":"forループを使った行列の掛け算の方法 - Python"}
{"in":"vals = [random.choice(integers) for _ in range(num_ints)]","out":"ランダムな整数のリストを、指定した整数だけを用いて生成する方法は？(Python)"}
{"in":"class Tutor:<nl><tab> firstName = \"\"<nl><tab> lastName = \"\"<nl><tab> age = 0<nl><tab> primarySubjects = []<nl><tab> secondarySubjects = []","out":"可変プロパティを持つクラスを作成する"}
{"in":"from multiprocessing import Process<nl>import time<nl>import threading <nl><nl>def f(name):<nl><tab> time.sleep(100)<nl><tab> print 'hello', name<nl><nl>def run_process_with_timeout(timeout, target, args):<nl><tab> p = Process(target=target, args=args)<nl><tab> p.start()<nl><tab> time.sleep(timeout)<nl><tab> p.terminate()<nl><nl>if __name__ == '__main__':<nl><tab> t = threading.Thread(target=run_process_with_timeout, args=(5,f,('bob',)))<nl><tab> t.start()<nl><tab> print \"This Needs to be Printed Immediately\"","out":"Pythonのプロセスを制限時間内に終了させる"}
{"in":"def invert_tag(self, start, end=None, tag=SEL, w=None):<nl><tab> if w==None:<nl><tab><tab>  w=self.cur_scroll() #This is my current text widget<nl><tab> i=0<nl><tab> while w.compare(start+\"+\"+str(i)+\"c\", \"<\", end):<nl><tab><tab>  if \"sel\" in w.tag_names(start+\"+\"+str(i)+\"c\"):<nl><tab><tab><tab><tab>w.tag_remove(tag, start+\"+\"+str(i)+\"c\")<nl><tab><tab>  else:<nl><tab><tab><tab><tab>w.tag_add(tag, start+\"+\"+str(i)+\"c\")<nl><tab><tab>  i+=1","out":"Tkinter: 2つのインデックスの範囲にあるタグを持つテキストを反転させる"}
{"in":"import tkFileDialog<nl><nl>def open_it():<nl><tab> filename = tkFileDialog.askopenfilename()<nl><tab> print filename  # test<nl><nl>def save_it():<nl><tab> filename = tkFileDialog.askopenfilename()<nl><tab> print filename  # test<nl><nl>def save_as():<nl><tab> filename = tkFileDialog.asksaveasfilename()<nl><tab> print filename  # test","out":"Python as\/openで保存"}
{"in":"def myfunc(w):<nl><tab> y = [el[:] for el in w]<nl><tab> y[0].append('What do I need to do to get this to work here?')<nl><tab> y[0].append('When I search for the manual, I get pointed to python.org, but I can\\'t find the answer there.')<nl><tab> return y<nl><nl>x = [[]]<nl>z = myfunc(x)<nl>print(x)","out":"Pythonの関数が入力を変更しないようにするにはどうすればよいですか？"}
{"in":"N = 3 # for 3 lines of output<nl>p = subprocess.Popen(['\/path\/to\/external-app.sh'], <nl><tab> stdout=subprocess.PIPE, stderr=subprocess.PIPE)<nl>stdout, stderr = p.communicate()<nl><nl>if p.returncode != 0:<nl><tab> print (\"ERROR: External app did not complete successfully \"<nl><tab><tab><tab>  \"(error code is %s)\" % p.returncode)<nl><tab> print \"Error\/failure details: \", '<nl>'.join(stderr.splitlines()[-N:])<nl><tab> status = False<nl>else:<nl><tab> status = True","out":"サブプロセスのstderrストリーム出力の最後のN行を取得する方法は？"}
{"in":"lastforlevel[n-1]","out":"要素レベルを持つリストからPythonのxmlを作成する。"}
{"in":"#Open the document<nl>document = Document(args.inputFile)<nl><nl>#changing the page margins<nl>sections = document.sections<nl>for section in sections:<nl><tab> section.top_margin = Cm(margin)<nl><tab> section.bottom_margin = Cm(margin)<nl><tab> section.left_margin = Cm(margin)<nl><tab> section.right_margin = Cm(margin)<nl><nl>document.save(args.outputFile)","out":"python-docxでdocxのページマージンを変更する。"}
{"in":"list_acciones=Accion.objects.filter(proyectos__id__in=ids_Proyecto)","out":"Django モデルフィルター"}
{"in":"class myClass:<nl><tab> proxies = []<nl><tab> def doIt(self):<nl><tab><tab>  myClass.proxies.append(1)","out":"関数内で静的変数を使用するには？"}
{"in":"errs = dict((f.auto_id, f.errors) for f in form if f.errors)","out":"これがどうして1行で書けるのでしょうか？"}
{"in":"from win32com.client import Dispatch<nl><nl>auto = Dispatch(\"AutoItX3.Control\")<nl>auto.WinActivate(\"The window's title\", \"\")<nl>auto.WinWaitActive(\"The window's title\", \"\", 10)<nl><nl>auto.Send(\"The input\")","out":"stdinパイプを使ったWindowsコンソールアプリのコントロール"}
{"in":"w, h = draw.textsize(text, font)","out":"PILのテキストサイズに正しくテキストを合わせることができません。"}
{"in":"import re<nl>exp = 'qty * price - discount + 100'<nl>exp = re.sub('(qty|price|discount)','%(\\\\1)f', exp)%vars(obj)","out":"eval のための python 文字列変換"}
{"in":"import itertools<nl>with open(filename) as fin:<nl><tab> ilines = itertools.islice(fin, 2, None) #this throws away the first 2 lines<nl><tab> lines = sorted(ilines, key=lambda x: x.split()[0])  #sort lexicographically on first column<nl><nl>with open('header') as header, open('%s.header'%filename) as fout:<nl><tab> fout.writelines(header) #write the header<nl><tab> fout.writelines(lines) #write the data","out":"ヘッダーを削除し、別のヘッダーを追加する"}
{"in":"chart = pygal.StackedLine(width=1000, height=800)","out":"pygalでsvgの幅\/高さを制限する方法"}
{"in":"def onListView1ListItemSelected(self, event):<nl><tab> obj<tab>  = event.GetEventObject()<nl><tab> index<tab>= event.GetIndex()<nl><tab> columns = obj.GetColumnCount()<nl><tab> data<tab> = []<nl><nl><tab> for i in range(columns):<nl><tab><tab>  item = obj.GetItem(index, i)<nl><tab><tab>  data.append(item.GetText())<nl><nl><tab> print(data)","out":"wxpyton guiのクリックイベントからリストデータを取得するにはどうすればよいですか？"}
{"in":"{<nl>\"query\": {<nl><tab> \"function_score\": {<nl><tab><tab>  \"query\": {  <nl><tab><tab><tab><tab>\"match\": {<nl><tab><tab><tab><tab><tab> \"text\": \"how now brown cow\"<nl><tab><tab><tab><tab>}<nl><tab><tab>  },<nl><tab><tab>  \"functions\": [{<nl><tab><tab><tab><tab>\"script_score\": { <nl><tab><tab><tab><tab><tab> \"script\": \"doc['weight'].value\"<nl><tab><tab><tab><tab>}<nl><tab><tab>  }],<nl><tab><tab>  \"score_mode\": \"multiply\"<nl><tab> }<nl>}<nl>}","out":"Elasticsearchで特定のフィールドを指定してブーストするクエリのやり方"}
{"in":"for obj in objs:<nl><tab> obj.send(gateway)<nl>Message.objects.bulk_create(objs)","out":"bulk_create 各オブジェクトに対して関数を呼び出す方法。"}
{"in":"import sys<nl><nl>print('Name of the script: {0}'.format(sys.argv[0]))<nl><nl>if len(sys.argv) == 3:<nl><tab> inputfile_path = sys.argv[1]<nl><tab> dictionary_path = sys.argv[2]<nl><tab> print('First parameter: {0}'.format(inputfile_path))<nl><tab> print('Second parameter: {0}'.format(dictionary_path))","out":"pythonスクリプトで複数の位置引数を受け付けるようにするにはどうすればよいですか？"}
{"in":"from polls.models import Poll, Choice","out":"Djangoデータベースのテーブルができたが、そこからモデルをインポートすることができない。"}
{"in":"size = sum(1 for _ in bucket.objects.all())","out":"boto3 Collectionのサイズを知るにはどうしたらいいですか？"}
{"in":"iframe = self.driver.find_element_by_css_selector(\"#webcam-container\")<nl>self.driver.switch_to_frame(iframe)<nl>record = self.driver.find_element_by_css_selector(\"#record-button > span.yt-uix-button-content\")<nl>record.click()","out":"Seleniumを使ってWebページのボタン制御を自動化する方法とは？"}
{"in":"n, k = int(input()), int(input())<nl>num = sorted([ int(input()) for i in range(0,n) ])<nl>min_unfairness = min( max_value - min_value for min_value, max_value in<tab> zip(num, num[k-1:]) )<nl>print(min_unfairness)","out":"Pythonで学ぶパフォーマンス向上の基本"}
{"in":"[f() for f in flist]","out":"Pythonでlambdaを使わずに関数のリストに対してマップ関数を適用する。"}
{"in":"def f(ls):<nl><tab> ct = 0<nl><tab> for x in ls:<nl><tab> #<tab><tab> ^<tab>  Do not call the method, but just parse through the list  <nl><tab><tab>  if x % 2 == 1:<nl><tab><tab><tab><tab>ct += x<nl><tab> return(ct)<nl><tab> #<tab>  ^  ^ parenthesis are not necessary <nl><nl>print(f([2,5,4,6,7,8,2]))<nl>#<tab><tab>^<tab><tab><tab><tab><tab>^<tab> Missing paranthesis","out":"forループのトラブル"}
{"in":"placeholders = ','.join('%s' for col in columns)<nl>query_string = \"INSERT INTO `{}` {} VALUES ({})\".format(table, columns, placeholders)<nl>query.execute(query_string, values)","out":"Python MySQLdb cursor.execute() 値の数が変化するインサート"}
{"in":"from nose.tools import *<nl>class Test_mysim():<nl><tab> def setup(self):<nl><tab><tab>  self.ans = calculate_it_once()<nl><nl><tab> def test_sync(self):<nl><tab><tab>  ans=calculate_it_sync()<nl><tab><tab>  assert_equal(ans,self.ans)<nl><nl><tab> def test_async(self):<nl><tab><tab>  ans=calculate_it_async()<nl><tab><tab>  assert_equal(ans,self.ans)","out":"noseでPythonの単体テストを行う：連続したテストの作成"}
{"in":"if int(list[0][11:13])>=17 and int(list[0][11:13])<=19:<nl><tab> #This is the correct way of printing for aggregate library<nl><tab> #Print all as a string.<nl><tab> print  \"LongValueSum:\" + \"Express\" + \"\\t\" + list[3]","out":"pythonでHadoopを使って大きなcsvファイルを処理する。"}
{"in":"import json<nl><nl>#jstr = \"... that thing above ...\"<nl># This line only decodes the JSON into a structure in memory:<nl>obj = json.loads(jstr)<nl># obj, in this case, is a dictionary, a built-in Python type.<nl><nl># These lines just iterate over that structure.<nl>for ka, va in obj.iteritems():<nl><tab> print ka<nl><tab> for kb, vb in va.iteritems():<nl><tab><tab>  print '  ' + kb<nl><tab><tab>  for key, string in vb.iteritems():<nl><tab><tab><tab><tab>print '<tab> ' + repr((key, string))","out":"PythonによるJSONのデコード"}
{"in":"L = [['Text', 'Count']]<nl>for line in inputFile:<nl><tab> L.append([var, var5])","out":"forループから出力されるリストを変換する"}
{"in":"import re<nl>valid = re.match('^[\\w-]+$', str) is not None","out":"文字列が英数字とダッシュのみを含むかどうかを確認するにはどうすればよいですか？"}
{"in":"class DictionayModelForm(ModelForm):<nl><tab><tab>  def __init__(self, *largs, **kwargs):<nl><tab><tab><tab><tab>super(DictionayModelForm, self).__init__(*largs, **kwargs)<nl><tab><tab><tab><tab>if self.instance and self.instance.pk is not None:<nl><tab><tab><tab><tab><tab> for f in self.instance._meta.fields:<nl><tab><tab><tab><tab><tab><tab>  if isinstance(f, models.ForeignKey) and issubclass(f.rel.to, Dictionary):<nl><tab><tab><tab><tab><tab><tab><tab><tab>model_field = self.fields[f.name]<nl><tab><tab><tab><tab><tab><tab><tab><tab>value = getattr(self.instance, f.name, None)<nl><tab><tab><tab><tab><tab><tab><tab><tab>if value and value not in model_field.choices:<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> model_field.queryset = Dictionary.objects.filter(Q(**f.rel.limit_choices_to) | Q(id = value.id))","out":"djangoでモデルの他のフィールドの状態に基づいてフィールドのレンダリング動作を変更する方法"}
{"in":"def midnights(dt1, dt2):<nl><tab> dt1 = dt1.replace(hour=0, minute=0, second=0, microsecond=0)<nl><tab> dt2 = dt2.replace(hour=0, minute=0, second=0, microsecond=0)<nl><tab> return (dt2 - dt1).days","out":"日付間の真夜中の出現回数をカウントする。"}
{"in":"import pdb<nl>pdb.set_trace()","out":"pythonスクリプトの実行を、pythonを閉じたり変数を維持したりせずに、プログラム的に停止するにはどうすればよいでしょうか。"}
{"in":"line = line.rstrip()","out":"Pythonです：strから改行を削除することができない"}
{"in":"from multiprocessing import Process, Queue<nl>import time<nl>def consumer(q):<nl><tab><tab><tab>while(True):<nl><tab><tab><tab><tab>data=q.get()<nl><tab><tab><tab><tab>if (data[0]==False):<nl><tab><tab><tab><tab><tab> print(\"Killing\")<nl><tab><tab><tab><tab><tab> return<nl><tab><tab><tab><tab>print((data[1]))<nl><tab><tab><tab><tab>time.sleep(1)<nl><nl>if __name__ == '__main__':<nl><tab> maxitems=3<nl><tab> q = Queue(maxitems)<nl><tab> p = Process(target=consumer, args=(q,))<nl><tab> p.start()<nl><tab> for idx in range(0,10):<nl><tab><tab>  q.put((True,idx))<nl><tab><tab>  #Where idx would normally be a chunk of data<nl><tab> q.put((False,False))<nl><tab> p.join()","out":"pythonのproducer consumerはgetでロックする。"}
{"in":"Y = Y[random.choice(Y.keys())]","out":"Networkxのノードトラバーサル"}
{"in":"import seaborn as sns<nl>import matploltlib.pyplot as plt<nl><nl>tips = sns.load_dataset(\"tips\")<nl><nl>ax = sns.pointplot(x=\"day\", y='total_bill', hue=\"smoker\",<nl><tab><tab><tab><tab>  data=tips, dodge=0.3, join=False, palette=['white'])<nl>plt.setp(ax.lines, zorder=100)<nl>plt.setp(ax.collections, zorder=100, label=\"\")<nl><nl>sns.violinplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips,<nl><tab><tab><tab><tab><tab>split=True, inner='stick', ax=ax)","out":"Seabornを使用して、点描画のすべての要素をvioloinplotの要素の上に表示させるにはどうすればよいですか？"}
{"in":"dict1 = { <nl>  'D1K1': ('v1', 'v2'),<nl>  'D1K2': ('v3', 'v4')<nl>}<nl><nl>dict2 = { <nl>  'D2K1': ('v1', 'v2'),<nl>  'D2K2': ('v3', 'v4')<nl>}<nl><nl># reverse dict2. this randomly chooses one of the possible mappings<nl># if there are more than one key with the same value..<nl>inv2 = dict((v, k) for k, v in dict2.items())<nl><nl># this assumes that there will always be a reverse mapping in dict2 <nl># for all values in dict1 (use inv2.get(v, default_value) if that is<nl># not the case).<nl>print dict((k, inv2[v]) for k, v in dict1.items())","out":"python 2つの辞書を1つの辞書にする、その値に基づく結合"}
{"in":"sql=\"select value from table where name='aaaa'\"<nl>cursor.execute(sql)<nl>results=cursor.fetchall() # changed to results to better reflect the list structure<nl>count = len(results)<nl>for i in range(0, count):<nl>  for j in range (i+1, count):<nl><tab> print results[i][0], results[j][0]","out":"pythonを使用してテーブルの行を比較する方法"}
{"in":"import signal<nl>dict((k, v) for v, k in reversed(sorted(signal.__dict__.items()))<nl><tab>  if v.startswith('SIG') and not v.startswith('SIG_'))","out":"Pythonで数値からシグナル名を取得する"}
{"in":"y = a + bx + c*exp(-d*x)","out":"Pythonで単調に成長する配列の推定値を計算するにはどうすればよいですか？"}
{"in":"message = (<nl><tab> 'From: me@yahoo.com <nl>'<nl><tab> 'To: %s <nl>'<nl><tab> 'Subject: Data saved successfully <nl>'<nl><tab>  '%s' %(args.r,TEXT)<nl>)","out":"ループで生成されたメールの件名が送信されない"}
{"in":"for index in range(len(listOne)):<nl><tab> listThree.append((listOne[index],listTwo[index]))","out":"pythonの入れ子リストとforループのプログラムがおかしな結果になる。"}
{"in":"def was_published_today(self):<nl><tab> return (self.pub_date.date() == datetime.date.today())","out":"django datetime.datetime エラー。"}
{"in":"def joinSegments( s ):<nl><tab> if s[0][0] == s[1][0] or s[0][0] == s[1][-1]:<nl><tab><tab>  s[0].reverse()<nl><tab> c = s[0][:]<nl><tab> for x in s[1:]:<nl><tab><tab>  if x[-1] == c[-1]:<nl><tab><tab><tab><tab>x.reverse()<nl><tab><tab>  c += x<nl><tab> return c","out":"順序付けラインストリングディレクションアルゴリズム"}
{"in":"class ProbSVC(SVC):<nl><tab> def predict(self, X):<nl><tab><tab>  return super(ProbSVC, self).predict_proba(X)","out":"sci-kit learnにおけるSVC確率出力に対するグリッドサーチクロスバリデーション"}
{"in":"USE_PYTHON=yes<nl>USE_PYDISTUTILS=yes","out":"新しいFreebsdポートを作成する"}
{"in":"class Friendship(models.Model):<nl>  from_friend = models.ForeignKey(<nl><tab> User, related_name='friend_set'<nl>  )<nl>  to_friend = models.ForeignKey(<nl><tab> User, related_name='to_friend_set'<nl>  )<nl>  def __unicode__(self):<nl><tab> return u'%s, %s' % (<nl><tab><tab>self.from_friend.username,<nl><tab><tab>self.to_friend.username<nl><tab> )<nl>  class Meta:<nl><tab> unique_together = (('to_friend', 'from_friend'), )","out":"この「モデル」をDjangoでどう書けばいいのか？"}
{"in":"def setup_cookie():<nl><tab> # try\/except to read the cookie<nl><tab> return cookie<nl><nl>def headers(cookie):<nl><tab> # print a set-cookie header if needed<nl><tab> return \"SetCookie: etc\"<nl><nl>def page_content(cookie):<nl><tab> # maybe you want to alter the page content with a regex or something based on the cookie value<nl><tab> return html<nl><nl>cookie = setup_cookie()<nl>print headers( cookie )<nl>print \"\"<nl>print page_content( cookie )","out":"python CGIで、ウェブページにクッキーを追加する。"}
{"in":"import lxml.html<nl>doc = lxml.html.parse(url_to_site)<nl>feeds = doc.xpath('\/\/link[@type=\"application\/rss+xml\"]\/@href') # list feed urls","out":"Pythonを使用してHTMLからURLをフィードする"}
{"in":"3.907985046680551e-14","out":"C言語で作成されたBinaryファイルからdoubleを読み出す方法としては、どのようなものがありますか？"}
{"in":"from suds.client import Client<nl>from suds.transport.http import HttpAuthenticated<nl><nl>t = HttpAuthenticated(username='liferayuser', password='liferaypassword')<nl>c = Client('http:\/\/liferay62instance.domain.com\/api\/axis\/Portal_UserService?wsdl', transport=t)<nl>result = c.service.getUserByScreenName(companyId=10154, screenName='user')","out":"liferay 6.2GA2 石けん認証とpython sudsクライアント"}
{"in":"with open('some_file_1.txt', 'r') as file1:<nl><tab> with open('some_file_2.txt', 'r') as file2:<nl><tab><tab>  same = set(file1).intersection(file2)<nl><nl>same.discard('<nl>')<nl><nl>with open('some_output_file.txt', 'w') as file_out:<nl><tab> for line in same:<nl><tab><tab>  file_out.write(line)","out":"pythonで2つの異なるファイルを一行ずつ比較する。"}
{"in":"from django.db.models import Q<nl><nl>threshold = {<nl><tab> 'hot': Q(post_upvotes__gt=50),<nl><tab> 'trending': Q(post_upvotes__range=(20,50)),<nl><tab> 'new': Q(post_upvotes__lt=20)<nl>}<nl><nl>return Post.objects.filter(threshold[section])","out":"Django orm フィルタは dict の要素です。"}
{"in":"request.FILES['file_pm']","out":"python-django ファイルアップロード「キーエラー"}
{"in":"x = csr_matrix(np.random.rand(1000) > 0.99).T<nl>print x.shape<tab># (1000, 1)","out":"Pythonによるスパース・デンシ乗算"}
{"in":"imagelist[pagenumber: pagenumber+16]","out":"Pythonでdictオブジェクトを使ったページングソリューションの実装方法"}
{"in":"from bs4 import BeautifulSoup<nl><nl>page = \"<span>Hello world<\/span><h1>Nice to see you<\/h1><span>no<\/span><span>Hello babe<\/span>\"<nl><nl>soup = BeautifulSoup(page)<nl><nl>while len(soup.find_all('span')) > 0:<nl><tab> soup.span.extract()<nl>print soup","out":"PythonとBeautifulSoupでHTMLから特定の種類のタグを（文字列操作なしで）削除する。"}
{"in":"l = [a, b, c, d, e]<nl>c_index = l.index(\"c\")<nl>l2 = l[:c_index]","out":"Pythonです：インデックス範囲に基づきリストをサブリストに分割する"}
{"in":"def inplace_unique_latest(L, key=None):<nl>  if key is None:<nl><tab> def key(x):<nl><tab><tab>return x<nl>  seen = set()<nl>  n = iter(xrange(len(L) - 1, -2, -1))<nl>  for x in xrange(len(L) - 1, -1, -1):<nl><tab> item = L[x]<nl><tab> k = key(item)<nl><tab> if k not in seen:<nl><tab><tab>seen.add(k)<nl><tab><tab>L[next(n)] = item<nl>  L[:next(n) + 1] = []","out":"Pythonのリストから重複を削除する最も効率的な方法であり、順序を維持し、最も古い要素を削除する。"}
{"in":"dither=\"yes\"","out":"Pocketphinxのデコーダーは、独自の言葉を加える"}
{"in":"import xlsxwriter<nl><nl>workbook  = xlsxwriter.Workbook('file.xlsx')<nl>worksheet = workbook.add_worksheet()<nl><nl>data = [13, 24, 15]<nl><nl>for row_num, value in enumerate(data):<nl><tab> worksheet.write(row_num, 0, value)<nl><nl>row_num += 1<nl>worksheet.write(row_num, 0, '=SUM(A1:A{})'.format(row_num))<nl><nl>workbook.close()","out":"xlsxwriterで、ある列の最終入力行を決定する方法は？"}
{"in":"from openerp.addons.web import http<nl>from openerp.addons.web.http import request<nl><nl>class Book(http.Controller):<nl><tab> @http.route('\/page\/getjson\/', type='http', auth='public', website=True)<nl><tab> def index(self, **kw):<nl><tab><tab>  Books = request.env['x_book.book']<nl><tab><tab>  return request.render('book.index', {<nl><tab><tab>  'books': Books.search([])<nl><tab>})","out":"Odoo 8でデータベースからデータを取得する方法"}
{"in":"class ItemLoader(ItemLoader):<nl><nl><tab> default_output_processor = MapCompose(unicode.strip)","out":"pythonで辞書を反復処理し、空白を除去する。"}
{"in":"row[2] == day","out":"Python - if文"}
{"in":"process.terminate()","out":"Pythonのプロセスが一定時間内に終了しない場合はKillする？"}
{"in":"class escapeMode(object):<nl><tab> '''<nl><tab> Enum to represent the escape mode.<nl><tab> '''<nl><tab> ## Escape all values<nl><tab> ALLWAYS<tab>  = 1<nl><tab> ## Escape only values containing seperators or starting with quotation<nl><tab> NECESSARY<tab>= 2","out":"pythonのメンバー以降のドキュメント(doxygen付き)"}
{"in":"import uuid <nl>uuid.uuid4().hex[:6].upper()","out":"Python\/Djangoで一意な文字列を生成する。"}
{"in":"body = str(\"The following items are in the list: \")<nl>items = [\"a\", \"b\", \"c\", \"d\"]  # list of strings<nl>for i in items:<nl><tab> body = body.__add__(i + \",\")<nl>print(body)","out":"リストのすべての項目を変数に追加するにはどうすればよいですか？"}
{"in":"values = [l[3] for l in data[:100]]","out":"リストのリストにアクセスする"}
{"in":"import filename","out":"現在書いている新しいプログラムの中で、以前書いたプログラムを使うにはどうしたらいいのでしょうか？"}
{"in":"rxSetting = re.compile('((?:\/\\w+:[^\/]+){3})')","out":"Python RegExのマッチング結果が最小になりすぎています。"}
{"in":"connecting = ClientCreator(reactor, RedisListenerProtocol).connectTCP(HOST, PORT)<nl>def connected(listener):<nl><tab> listener.subscribe(\"newChannelName\")<nl><tab> listener.unsubscribe(\"channelName\")<nl>connecting.addCallback(connected)","out":"txredisapiで接続した後にチャンネルの登録・解除を行う。"}
{"in":"{} and {}.format(\"string\", 1)","out":"pythonで文字列と整数の連結を行う。"}
{"in":"sys.stdout.write(stdout_data)<nl>sys.stderr.write(stderr_data)","out":"stdoutとstderrを2つの異なるログファイルにリダイレクトする。"}
{"in":"print(name + ', you won.')","out":"Pythonで文字列の末尾の空白を削除する方法は？"}
{"in":"start = new_programme.get('start')<nl>start_time = datetime.datetime.strptime(start, '%Y%m%d%H%M%S -0000')<nl>print(type(start_time))<nl>seven_weeks = datetime.datetime.now() - datetime.timedelta(weeks=7)<nl>print(type(seven_weeks))<nl>is_more_than_7_weeks = start_time < seven_weeks","out":"pythonでtime_structとdatetime.datetimeを比較する方法は？"}
{"in":"response = opener.open(self.__url, data)<nl>if response.info().get('Content-Encoding') == 'gzip':<nl><tab> buf = StringIO.StringIO( response.read())<nl><tab> gzip_f = gzip.GzipFile(fileobj=buf)<nl><tab> content = gzip_f.read()<nl>else:<nl><tab> content = response.read()","out":"urllib2 opener が間違った文字コードを提供する。"}
{"in":"import matplotlib<nl>if matplotlib.rcParams['backend'] == 'module:\/\/my_backend':<nl><tab> from IPython.lib.inputhook import enable_gui<nl><tab> enable_gui('qt4')","out":"Matplotlib：Qt4Aggバックエンドをカスタマイズする"}
{"in":"def generate(ysize, xsize, ycenter, xcenter, radius):<nl><tab> x = np.arange(xsize)[None,:]<nl><tab> y = np.arange(ysize)[:,None]<nl><tab> return ((xcenter - x) ** 2 + (ycenter - y) ** 2 <= radius ** 2) * 1<nl><nl><nl>generate(10,8,4,3,2)<nl><nl><nl>array([[0, 0, 0, 0, 0, 0, 0, 0],<nl><tab><tab> [0, 0, 0, 0, 0, 0, 0, 0],<nl><tab><tab> [0, 0, 0, 1, 0, 0, 0, 0],<nl><tab><tab> [0, 0, 1, 1, 1, 0, 0, 0],<nl><tab><tab> [0, 1, 1, 1, 1, 1, 0, 0],<nl><tab><tab> [0, 0, 1, 1, 1, 0, 0, 0],<nl><tab><tab> [0, 0, 0, 1, 0, 0, 0, 0],<nl><tab><tab> [0, 0, 0, 0, 0, 0, 0, 0],<nl><tab><tab> [0, 0, 0, 0, 0, 0, 0, 0],<nl><tab><tab> [0, 0, 0, 0, 0, 0, 0, 0]])","out":"パターン化されたnumpy行列を生成する"}
{"in":"Discount.objects.filter(discount_store__store_city__city_name=\"bursa\")","out":"Django Span Filter in View"}
{"in":"self.ToggleTool(self.add_points_id, True)","out":"wxpython: プログラムでラジオツールを選択する方法は？"}
{"in":"Button.invoke()","out":"tkinter \/ pythonでタッチせずにボタンを押す方法はありますか？"}
{"in":"package_dir = {'': 'src'},","out":"pip\/setuptoolsに、私のパッケージが.\/srcにあることを理解させるにはどうすればよいですか？"}
{"in":"self.b_set.last().name","out":"(Django) `__str__` を定義したモデルで、他のモデルの属性が未定義である。"}
{"in":"from urllib import quote_plus as urlquote<nl>from sqlalchemy.engine import create_engine<nl>engineString = 'postgresql:\/\/wberg:%s@localhost\/mydatabase' % urlquote('pass\/word')<nl>engine = create_engine(engineString)","out":"SQLAlchemy create_engine()のパスワードにスラッシュが含まれている場合のValueError。"}
{"in":"def initialize_function(num,instruction,emplacement1,emplacement2,current_pipeline):<nl><tab> function_mapping={<nl><tab> \"LOAD\" : LOAD,<nl><tab> \"STORE\" : STORE,<nl><tab> \"MOVE\" : MOVE_IADD,<nl><tab> \"IADD\" : MOVE_IADD,<nl><tab> \"FADD\" : FADD<nl><tab> }<nl><tab> current_pipeline=function_mapping[instruction](num,emplacement1,emplacement2,current_pipeline)<nl><tab> return(current_pipeline)","out":"辞書の初期化をキャンセルする方法 ? python3.3"}
{"in":"max_value = max(foo.value for foo in foos)<nl># instead of:<nl># max_value = max([foo.value for foo in foos])","out":"max-オブジェクトの属性のための関数"}
{"in":"kwargs = {filter_field: filter_value}<nl>Alert.objects.filter(**kwargs)","out":"Djangoのモデルをフィルタリングするためにフィールドを渡すにはどうすればよいですか？"}
{"in":"for sub_list in my_list:<nl><tab> for dx in (0, -1):<nl><tab><tab>  while sub_list and sub_list[dx] == 0:<nl><tab><tab><tab><tab>sub_list.pop(dx)","out":"Pythonで多次元リストから先頭と末尾のゼロを削除する"}
{"in":"def groupByPrefix(strings):<nl><tab> stringsByPrefix = {}<nl><tab> for string in strings:<nl><tab><tab><tab><tab>prefix, suffix = map(str.strip, string.split(\"\/\", 1))<nl><tab><tab><tab><tab>group = stringsByPrefix.setdefault(prefix, [])<nl><tab><tab><tab><tab>group.append(suffix)<nl><tab> return stringsByPrefix","out":"複数の共通開始文字列を見つける"}
{"in":"def get_queryset(self, *args, **kwargs):<nl><tab> \"\"\"<nl><tab> Checks if currentuser = true is in the URL and filters this it.<nl><tab> \"\"\"<nl><tab> queryset = super(FilterMixin, self).get_queryset(*args, **kwargs)<nl><nl><tab> currentuser = self.request.QUERY_PARAMS.get('currentuser')<nl><tab> project = self.request.QUERY_PARAMS.get('project')<nl><nl><tab> if currentuser == \"true\":<nl><tab><tab>  queryset = queryset.filter(user=self.request.user)<nl><nl><tab> if project:<nl><tab><tab>  queryset = queryset.filter(project=project)<nl><nl><tab> return queryset","out":"Django Rest Framework のフィルタを使って、フィルタを連鎖させる方法。"}
{"in":"from random import choice<nl>random_function_selector = [foo, foobar, fudge]<nl><nl>print choice(random_function_selector)()","out":"関数をランダムに選択する"}
{"in":"import string<nl>chars = string.lowercase + string.uppercase<nl><nl>def identifier(x, chars):<nl><tab> output = []<nl><tab> base = len(chars)<nl><tab> while x:<nl><tab><tab>  output.append(chars[x % base])<nl><tab><tab>  x \/= base<nl><tab> return ''.join(reversed(output))<nl><nl>print identifier(1, chars)","out":"python 一意な文字列の作成"}
{"in":"python-ttk","out":"Tkinterに画像を入れる"}
{"in":"xx[xx['Business']==\"1\"]['Label'].tolist()","out":"pandasからリストを抽出する方法は？"}
{"in":"ticks = ax.get_xticks()<nl>ticks = np.union1d(ticks, [0.7])<nl>ax.set_xticks(ticks)<nl>ax.set_xticklabels(newlabels)","out":"ティックラベルの修正；ラベルに任意のティックを追加する方法："}
{"in":"dicResults =  {}<nl>for row in results:<nl><tab> dicResults[row[1]] = [row[0], row[2], row[3]]","out":"Python mysqldbのデータ"}
{"in":"ResultObj(*args)","out":"オブジェクトを組み合わせるためのデザインパターン"}
{"in":"from Package import specific_submodule","out":"パッケージから複数のモジュールをインポートするための好ましい方法"}
{"in":"foo = '\"MARY\",\"PATRICIA\",\"LINDA\",\"BARBARA\",\"ELIZABETH\",\"JENNIFER\",\"MARIA\",\"SUSAN\",\"MARGARET\",\"DOROTHY\",\"LISA\",\"NANCY\",\"KAREN\",\"BETTY\",\"HELEN\",\"SANDRA\",\"DONNA\",\"CAROL\"'<nl>output = foo.replace('\"','').split(\",\")","out":"Pythonです：文字列を要素に分割してリストで追加する"}
{"in":"re.sub(\"[^a-zA-Z0-9 -]\",\"\",'SEGA E-r. Ata{{r}}i<nl>')","out":"正規表現で英数字以外を除外する"}
{"in":"import urllib, urllib2, cookielib<nl><nl># cookie storage<nl>cj = cookielib.CookieJar()<nl>opener = urllib2.build_opener(<nl><tab> urllib2.HTTPCookieProcessor(cj),<nl><tab> urllib2.HTTPRedirectHandler<nl><tab> )<nl># Useragent<nl>opener.addheaders.append(('User-agent','Mozilla\/4.0'))<nl><nl>url = 'http:\/\/www.okcupid.com\/login'<nl>login_data = urllib.urlencode({<nl><tab> 'username':'myusername',<nl><tab> 'password':'mypassword',<nl><tab> })<nl><nl>req = urllib2.Request(url,login_data)<nl>resp = opener.open(req)<nl>the_page = resp.read()<nl><nl>print the_page","out":"プログラムによるOKCへのログイン"}
{"in":"import BeautifulSoup<nl><nl>fname = r'c:\\mydir\\beautifulSoup.html'<nl>soup = BeautifulSoup.BeautifulSoup(open(fname, 'r'))<nl><nl>items = []<nl>last_seen_date = None<nl>for el in soup.findAll('tr'):<nl><tab> daterow = el.find('td', {'class':'date'})<nl><tab> if daterow is None:<tab>  # not a date - get headline and link<nl><tab><tab>  headline = el.find('td', {'class':'headline'}).text<nl><tab><tab>  link = el.find('a').get('href')<nl><tab><tab>  items.append((last_seen_date, headline, link))<nl><tab> else:<tab><tab><tab><tab><tab><tab> # get new date<nl><tab><tab>  last_seen_date = daterow.text","out":"Pythonでhtml-table-datasetをループ処理する方法"}
{"in":"import sys<nl><nl>class Borg(object):<nl><tab> __shared_state = {}<nl><tab> def __init__(self, nombre):<nl><tab><tab>  self.__dict__ = self.__shared_state<nl><tab><tab>  self.nombre = nombre <nl><nl><tab> def instance_method_1(self):<nl><tab><tab>  print 'my instance vr::', self.nombre<nl><tab><tab>  panga = 'pangas'<nl><tab><tab>  print 'te copio con  ' <nl><tab><tab>  print panga<nl><tab><tab>  print self.nombre<nl><nl><nl>pingus = Borg('varString')<nl><nl><nl>print pingus.nombre<nl>pingus.instance_method_1()","out":"そのクラスからPythonインスタンスvarにアクセスする"}
{"in":"import subprocess <nl>try:<nl><tab> import nltk<nl><tab> nltkv = '{}.'.format(nltk.__version__)<nl><tab> print \"nltk is already installed, V : <nl>\", nltkv # mind the escape sequence<nl>except ImportError:<nl><tab> print \"Nltk is not installed, Let's start installing ...<nl>\"<nl><tab> subprocess.call('sudo pip install -U nltk', shell = True)<nl><tab> #sudo easy_install pip<nl>except:<nl><tab> print \"Some error occurred!<nl>\"","out":"インストールを確認し、すでにインストールされている場合はバージョンを印刷し、そうでない場合はそのパッケージをインストールします。"}
{"in":"from datetime import datetime<nl><nl>fmt = '%Y-%m-%d %H:%M:%S'<nl>d1 = datetime.strptime('2010-01-01 17:31:22', fmt)<nl>d2 = datetime.strptime('2010-01-03 17:31:22', fmt)<nl><nl>print (d2-d1).days * 24 * 60","out":"python 日付の差分（分"}
{"in":"sc = (\"\\x31\\xdb\"<tab><tab># xor %ebx, %ebx<nl><tab><tab>\"\\x31\\xc9\"<tab><tab># xor %ecx, %ecx<nl><tab><tab>\"???\")","out":"pythonで複数行の文字列代入にインラインコメントを追加する方法"}
{"in":"lst = [['a', 'b', 'a'], ['a', 'b', 'c'], ['a']]<nl><nl>def count(lst):<nl><tab> # declare dictionary that we are going to return<nl><tab> foo = {}<nl><tab> # iterate sublist<nl><tab> for sublist in lst:<nl><tab><tab>  # make sublist into unique element list<nl><tab><tab>  sublist = list(set(sublist))<nl><tab><tab>  for element in sublist:<nl><tab><tab><tab><tab># if element found in foo dic, increment<nl><tab><tab><tab><tab>if element in foo:<nl><tab><tab><tab><tab><tab> foo[element] += 1<nl><tab><tab><tab><tab># else, init with 1<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> foo[element] = 1<nl><tab> return foo<nl><nl>res = count(lst)<nl>print res","out":"pythonで特定の用語を持つサブリストをカウントする。"}
{"in":"hint = random.choice(list({a, b, c, d, e, f} - {killer, previous_guess}))","out":"ランダムな選択肢に例外を与えること"}
{"in":"from IPython import get_ipython<nl>ipython = get_ipython()<nl><nl>if '__IPYTHON__' in globals():<nl><tab> ipython.magic('load_ext autoreload')<nl><tab> ipython.magic('autoreload 2')","out":"スクリプト内でIPythonマジックを使ってモジュールを自動再読み込みする方法は？"}
{"in":"butn.onClick.AddListener(lambda item=item: dicbrowser(holderdict[item],0))","out":"Pythonでunityと組み合わせてDelegateする。"}
{"in":"sorted(results.iteritems(), key=lambda x: x[1]['Rating'])","out":"Pythonでデータをデータ構造として最適に保存する方法"}
{"in":"import wx<nl>from wx.lib.iewin import IEHtmlWindow<nl>a = wx.App(redirect=False)<nl>f = wx.Frame(None,-1,\"My Desktop Application\")<nl>browser = IEHtmlWindow(f)<nl>browser.Navigate(\"http:\/\/google.com\")<nl>f.Show()<nl>a.MainLoop()","out":"pythonによるWebベースのデスクトップアプリケーションの実装"}
{"in":"# Converts something like \"14\/Nov\/2012:09:32:46\"<nl># to \"2012-11-14:09:32:46\"<nl>_MONTHS = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]<nl>def convert(s):<nl>  p = s.split(':', 1)<nl>  t = p[0].split('\/')<nl>  return \"%s-%02d-%02d:\" % (t[2], _MONTHS.index(t[1]) + 1, int(t[0])) + p[1]","out":"Pythonでdatetimeに変換せずに2012\/11\/14から2012\/11\/14に文字列を切り替えるにはどうすればよいですか？"}
{"in":"from django.contrib import admin<nl><nl>from models import News, NewsLang<nl><nl>class NewsLangInline(admin.TabularInline):<nl><tab> model = NewsLang<nl><nl>class NewsAdmin(admin.ModelAdmin):<nl><tab> inlines = [NewsLangInline]<nl>admin.site.register(News, NewsAdmin)","out":"django-adminで複数のモデル版を作成する。"}
{"in":"strQuery = \"<queryxml><entity>Ticket<\/entity><query>\" + \\<nl><tab><tab><tab><tab><tab><tab><tab><tab>\"<condition><field>id<expression op=\"\"greaterthan\"\">\" + strCurrentID + \"<\/expression><\/field><\/condition>\" + strCriteria + \\<nl><tab><tab><tab><tab><tab><tab><tab><tab>\"<condition><field>EstimatedHours<expression op=\"\"isnull\"\"><\/expression><\/field><\/condition>\" + \\<nl><tab><tab><tab><tab><tab><tab><tab><tab>\"<\/query><\/queryxml>\"","out":"SuDSとPythonでQueryXMLを使う"}
{"in":"import subprocess<nl>subprocess.call([\"ssconvert\",\"sample.xlsx\",\"sample.csv\"],cwd=\"pathtoyourfile\") # pathtoyourfile must contain the xlsx and csv files","out":"pythonでサブプロセスを使ってssconvertコマンドを実行する方法"}
{"in":"import os<nl>if os.fork() == 0: exit()","out":"関数内のオブジェクトを表示し、ディスプレイを閉じた後、プログラムを終了させない方法？"}
{"in":"wavFile.writeframes(voiceSample.tostring())","out":"pythonでトリミングした波形のファイルを保存する方法は？"}
{"in":"def get_context_data(self,**kwargs):<nl><tab> context = super(DvStringUpdateView, self).get_context_data(**kwargs)<nl><tab> semlinks = []<nl><tab> obj = get_object_or_404(DvString,pk=context['object'].id)<nl><tab> if obj.resource_uri:<nl><tab><tab>  urilist = obj.resource_uri.splitlines()<nl><tab><tab>  attrlist = obj.sem_attr.splitlines()<tab><tab>  <nl><tab><tab>  for n in range(0,len(urilist)):<nl><tab><tab><tab><tab>semlinks.append(attrlist[n] + ' = ' + unquote(urilist[n]))<nl><nl><tab> context['semlinks'] = semlinks<nl><tab> context['ct_id'] = obj.ct_id<nl><tab> return context","out":"django-extensions の UUIDField はクラスベースのビューで利用できない。"}
{"in":"# python startup file <nl>import readline <nl>import rlcompleter <nl>import atexit <nl>import os <nl># tab completion <nl>readline.parse_and_bind('tab: complete') <nl># history file <nl>histfile = os.path.join(os.environ['HOME'], '.pythonhistory') <nl>try: <nl><tab> readline.read_history_file(histfile) <nl>except IOError: <nl><tab> pass <nl>atexit.register(readline.write_history_file, histfile) <nl>del os, histfile, readline, rlcompleter","out":"pythonインタプリタシェルで最後のコマンドを繰り返すには？"}
{"in":"similar_posts=qs.filter(state=post.state)","out":"DjangoのビューでNameErrorが発生する"}
{"in":"STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')","out":"コレクトスタティックが行えない"}
{"in":"person = db.ReferenceProperty(Person, collection_name=\"cars\")","out":"google-app-engine：オブジェクトのリストを別のクラスのプロパティとして持つにはどうすればよいですか？"}
{"in":"import logging<nl>from google.appengine.ext import ereporter<nl><nl>ereporter.register_logger()","out":"GAE Python - Ereporterがメールを送信しない。"}
{"in":"import win32com.client<nl>import sys # <- obsolete not used<nl>import os<nl>import glob # style guide one import per line<nl><nl><nl>Application = win32com.client.Dispatch(\"PowerPoint.Application\")<nl>Application.Visible = True<nl><nl>ppt_files = glob.glob('*.ppt')<nl><nl>for file in ppt_files:<nl><tab> file = os.path.abspath(file)<nl><tab> Presentation = Application.Presentations.Open(file)<nl><tab> for Slide in Presentation.Slides:<nl><tab><tab>  for Shape in Slide.Shapes:<nl><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab> Shape.TextFrame.TextRange.Font.Name = \"Arial\"<nl><tab><tab><tab><tab><tab> Shape.TextFrame.TextRange.Font.Size = \"12\"<nl><tab><tab><tab><tab><tab> Shape.TextFrame.TextRange.Font.Color.RGB = \"000000\"<nl><tab><tab><tab><tab>except:<nl><tab><tab><tab><tab><tab> pass<nl><tab> Presentation.Save()<nl><tab> Presentation.Close()<nl><nl>Application.Quit()","out":"Pythonです：アプリケーションが終了する間、for-loopを一時停止する"}
{"in":"sniff(filter = 'dst port 5555')","out":"scapyを使用して特定のポートのトラフィックをスニッフする。"}
{"in":"import pygame as pg<nl>from pygame.locals import *<nl><nl>SIZE = (800, 600)<nl>BGCOL = (128, 128, 128)<nl>STIMCOL = (80, 255, 80)<nl><nl>screen = pg.display.set_mode((SIZE), HWSURFACE | DOUBLEBUF)<nl>screen.fill(BGCOL)<nl><nl>surf = pg.Surface((200, 200), flags=HWSURFACE)<nl>surf.fill(BGCOL)<nl><nl>pg.draw.rect(surf, STIMCOL, (10, 20, 40, 50))<nl>pg.draw.rect(surf, STIMCOL,  (60, 70, 80, 90))<nl><nl>screen.blit(surf, (100, 100))<nl><nl>pg.display.flip()<nl><nl>running = True<nl>while running:<nl><tab> surf = pg.transform.rotate(surf, -1) # updating rotation on the surface<nl><tab> screen.blit(surf, (100, 100)) #bliting the resulting image every frame<nl><tab> pg.display.flip()","out":"pygameのオブジェクト（矩形または画像）のグループを回転させるにはどうすればよいですか？"}
{"in":"import sys, os<nl><nl>file_list = []<nl><nl>for f in os.listdir(sys.argv[1]):<nl><tab> file_list.append(f)<nl><nl>for i in range(len(file_list)):<nl><tab> prevName = file_list[i]<nl><tab> if prevName != 'stackoverflow.py':  # Mention .py file so that it doesnt get renamed<nl><tab><tab>  newName = '00' + file_list[i]<nl><tab><tab>  os.rename(prevName, newName)","out":"pythonを使って複数のファイルの名前を変更するにはどうすればよいですか？"}
{"in":"p=subprocess.Popen('du -sh \/tmp\/*', shell=True)","out":"ターミナルでのdu -shの動作と、pythonスクリプトからのdu -shの動作について教えてください。"}
{"in":"{{thing['attr'] if defined('thing') else ''}}","out":"ボトルのSimpleTemplate Engineのテンプレートで未定義値を扱う"}
{"in":"a.count(\"__TEXT__\")","out":"pythonでパターンのカウントを取得する"}
{"in":"class PublicationAdmin(admin.ModelAdmin):<nl><tab> list_display = ('title',)<nl><tab> search_fields = ('tags__title',)","out":"逆相関検索 Django 管理画面"}
{"in":"def __init__(self):<nl><tab> for parent_klass in inspect.getmro(self.__class__):<nl><tab><tab>  _d.update(getattr(parent_klass, 'd', {}))<nl><tab> _d.update(self.d)<nl><tab> self.d = _d","out":"をオーバーライドするのではなく、親クラスで定義された同名の辞書を子クラスで更新するようにします。"}
{"in":"mylist = range(0,20+1,5)<nl>f = open(\"test.txt\", \"w\")<nl>f.writelines(' '.join(map(str, mylist)))<nl>f.close()","out":"forループやリストを使ったPythonの構文、テキストファイルへの書き出し。"}
{"in":"import urllib2<nl><nl>url = \"http:\/\/www.cmegroup.com\/CmeWS\/mvc\/ProductSlate\/V1\/List\/500\/1?sortField=oi&sortAsc=false&venues=3&page=1&cleared=1&group=1&r=eSxQS2SI\"<nl>user_agent = 'Mozilla\/4.0 (compatible; MSIE 5.5; Windows NT)'<nl>headers = { 'User-Agent' : user_agent }<nl><nl>req = urllib2.Request(url, headers=headers)<nl><nl>response = urllib2.urlopen(req)<nl><nl>your_json = response.read()<nl>response.close()","out":"Pythonアクセスサーバー urlopen()"}
{"in":"sum(my_counter.itervalues())","out":"Pythonでカウンターの値をすべて合計する。"}
{"in":"class Manager(object):<nl><tab> def new_thread(self):<nl><tab><tab>  return MyThread(parent=self)<nl><tab> def on_thread_finished(self, thread, data):<nl><tab><tab>  print thread, data<nl><nl>class MyThread(Thread):<nl><tab> def on_thread_finished(self, thread, data):<nl><tab><tab>  pass<nl><tab> def __init__(self, parent=None):<nl><tab><tab>  self.parent = parent<nl><tab> def run(self):<nl><tab><tab>  # ...<nl><tab><tab>  self.parent and self.parent.on_thread_finished(self, 42)<nl><nl>mgr<tab> = Manager()<nl>thread = mgr.new_thread()<nl>thread.run()","out":"Pythonです：Pythonでコールバックメソッドの受け渡しと実行を行う方法"}
{"in":"from Tkinter import *<nl>from tkFileDialog import askopenfilename<tab><tab><nl><nl>value_list = []<nl><nl>def callback():<nl><tab> name = askopenfilename() <nl><tab> value_list.append(name)<nl><tab> print name<nl><nl>Button(text='File Open', command=callback).pack(fill=X)<nl>mainloop()<nl><nl># value_list[0] is filename","out":"Tkinterからメインプログラムへの変数の受け渡し"}
{"in":"Toy.objects.filter(toy_owners__parents=parent)","out":"複数の多対多のリレーションシップを通過させる Django ORM の方法"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>length = np.random.random(10)<nl>length.sort()<nl>time = np.random.random(10)<nl>time.sort()<nl>slope, intercept = np.polyfit(np.log(length), np.log(time), 1)<nl>print(slope)<nl>plt.loglog(length, time, '--')<nl>plt.show()","out":"Pythonです：matplotlibを使って描いたグラフの傾きを求めるには？"}
{"in":"def equal_float(a, b):<nl><tab> #return abs(a - b) <= sys.float_info.epsilon<nl><tab> return abs(a - b) <= chosen_value #see edit below for more info","out":"pythonでfloatが整数値と等価かどうかをチェックする。"}
{"in":"def outer():<nl><tab> a = [1]<nl><tab> def inner():<nl><tab><tab>  a[0] += 1<nl><tab><tab>  print a[0]","out":"pythonで内部関数から関数変数を変更する。"}
{"in":"class ClassB(gtk.Window):<nl><tab> def __init__(self, variable):<nl><tab><tab>  #Your code<nl><tab><tab>  self.variable = variable","out":"python\/gtkでクラスから変数を受け渡すには？"}
{"in":"import tkFileDialog<nl>import os<nl>import os.path<nl>import re<nl><nl>directory = tkFileDialog.askdirectory()<nl><nl>for dirpath, dirnames, filenames in os.walk(directory):<nl><tab> for filename in filenames:<nl><tab><tab>  path = os.path.join(dirpath, filename)<nl><nl><tab><tab>  with open(path) as file:<nl><tab><tab><tab><tab>contents = file.read()<nl><nl><tab><tab><tab><tab>print path[:30], contents.count('Tmp'), re.findall('Tmp\\d{5}', contents)","out":"1つのフォルダにある複数のテキストファイルで \"何か \"を数える"}
{"in":"scipy.misc.imread()","out":"pythonで画像を行列に変換する"}
{"in":"frame = MyFrame(logger)","out":"OSXのpy2app-frozen wxpythonアプリで早期にエラーを報告する方法、"}
{"in":"start()","out":"multiprocessing.Process から継承した Python クラスの値設定に関する問題"}
{"in":"Entry.objects.all()[0].image.thumbnail.relative_url","out":"Django - sorl-thumbnail - ビュー関数からサムネイル画像にアクセスする。"}
{"in":"from twisted.internet.protocol import ServerFactory<nl><nl>class LocalOnlyFactory(ServerFactory):<nl><tab> def buildProtocol(self, addr):<nl><tab><tab>  if addr.host == \"127.0.0.1\":<nl><tab><tab><tab><tab>return ServerFactory.buildProtocol(self, addr)<nl><tab><tab>  return None","out":"Python Twisted：IPアドレスでアクセスを制限する"}
{"in":"dataInSocket, _, _ = socket.select.select([sock], [], [])<nl>if dataInSocket:<nl><tab> data, addr = sock.recvfrom(MAX_MESS_LEN)<nl><tab> thread.start_new_thread(message_handler, (data, addr,))","out":"Pythonでrecvfrom()の呼び出しをキーボードで中断するにはどうすればよいですか？"}
{"in":"new_word = word[1:] + word[0] + pyg","out":"プロセスの順番に迷う"}
{"in":"def delete(head, value):<nl><tab> curr = head<nl><tab> prev = curr.next<nl><tab> while prev.next != head:<nl><tab><tab>  prev = prev.next<nl><nl><tab> if curr.value == value:<nl><tab><tab>  prev.next = curr.next<nl><nl><tab> curr = curr.next<nl><tab> prev = prev.next<nl><tab> while curr.value != value and curr != head:<nl><tab><tab>  curr = curr.next<nl><tab><tab>  prev = prev.next<nl><nl><tab> if curr.value == value:<nl><tab><tab>  prev.next = curr.next","out":"Pythonで循環リンクのノードを削除する別の方法"}
{"in":"os.system('ssh [...]')","out":"Pythonスクリプトから対話型SSHセッションを開始する。"}
{"in":"submenus = mainwindow.menuBar().findChildren(QAction)","out":"QT メニューをテキストに書き出す"}
{"in":"data[i, :, :, :] = arr.transpose(2, 1, 0)","out":"Pythonを使って画像を配列に格納する"}
{"in":"import sqlite3 as sq<nl>connection = sq.connect(\"test.db\")<nl>cursor = connection.cursor()<nl>cursor.execute(\"DROP TABLE IF EXISTS test\")<nl>cursor.execute(\"CREATE TABLE test (st TEXT)\")<nl>cursor.execute(\"INSERT INTO test VALUES ('testing')\")<nl>connection.commit() # !!!<nl>cursor.execute(\"SELECT * FROM test\")<nl>print(cursor.fetchall())<nl>cursor.close()<nl>connection.close()<nl>connection2 = sq.connect(\"test.db\")<nl>cursor2 = connection2.cursor()<nl>cursor2.execute(\"SELECT * FROM test\")<nl>print(cursor2.fetchall())","out":"SQLiteが使用間でデータを保存しない"}
{"in":"shared_items = set(x.items()) & set(y.items())<nl>print len(shared_items)","out":"Pythonで2つの辞書を比較する"}
{"in":"maxval = max(dict.iteritems(), key=operator.itemgetter(1))[1]<nl>keys = [k for k,v in dict.items() if v==maxval]","out":"pythonのdictでmax(value)に対応するKeyを取得する。"}
{"in":"for page in data[\"query\"][\"pages\"].values():<nl><tab> title = page[\"title\"]<nl><tab> langlinks = page[\"langlinks\"]<nl><tab> # do something with langlinks...","out":"JSONの不明な値の背後にある文字列に到達する。"}
{"in":"format(number, '03')","out":"pythonで数値を接頭辞0sでフォーマットされた文字列に変換する。"}
{"in":"url = 'https:\/\/www.googleapis.com\/appsmarket\/v2\/upgradableApp\/oldlisting\/newlisting\/mybeacon.biz'<nl><nl>consumer_key = 'key'<nl>consumer_secret = 'secret'<nl><nl>consumer = oauth.Consumer(consumer_key, consumer_secret)<nl><nl>client = oauth.Client(consumer)<nl><nl># Step 1: Get a request token. This is a temporary token that is used for<nl># having the user authorize an access token and to sign the request to obtain<nl># said access token.<nl><nl>resp, content = client.request(url, \"PUT\")","out":"Python AppengineアプリでGoogle Apps MarketplaceのUpgradeableApp APIを呼び出す"}
{"in":"import numpy as np<nl>a = np.ones((3,4,5))<nl>b = np.ones((3,4,5))<nl>c = np.concatenate((a[...,np.newaxis],b[...,np.newaxis]),axis=3)","out":"4次元の2つのnumpy配列を連結する。"}
{"in":"from django.db.models import Count<nl><nl>Product.objects.get(pk=1).offer_set.all().values('price').annotate(total=Count('price')).order_by('price')","out":"フィールドに最小値を持つレコードの数を数えるには？(Django)"}
{"in":"import re<nl>sentence = \"You are my favorite. Are you my friend? Are you an elephant?\"<nl>items = []<nl>for item in re.finditer(\"[Aa]re\", sentence, ):<nl><tab> items.append(item.start())","out":"python 配列からオブジェクトを1つ選ぶ"}
{"in":"temp_list = []<nl>prev_value = original_list[0][1]<nl><nl>for key, value in original_list:<nl><tab> if value == prev_value:<nl><tab><tab>  temp_list.append(key)<nl><tab> else:<nl><tab><tab>  do_something(temp_list)<nl><tab><tab>  print temp_list<nl><tab><tab>  temp_list = [key]<nl><tab> prev_value = value<nl><nl>do_something(temp_list)<nl>print temp_list<nl><nl># prints ['4', '3', '2']<nl># prints ['1', '6']","out":"Pythonの2Dリストを反復処理し、値を探し出す。"}
{"in":"test_dict = dict((x, dict()) for x in ['k1', 'k2'])","out":"Pythonの `dict.fromkeys` を使って各キーに新しい値を渡す。"}
{"in":"for x_entry, y_entry, label in zip(x,y,labels):<nl><tab><tab>  print label<nl><tab><tab>  self.map.plot(x_entry, y_entry, 'bo', markersize=10, picker=5, label=label)","out":"matplotlibでリストを使ったラベルを作る"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import sys,os,re<nl><nl>print ('Searcing for a line in \/etc\/pam.d\/common-password<nl>')<nl><nl>pass_file = open('\/root\/p_file\/common-password', 'r').readlines()<nl><nl>for i in pass_file:<nl><nl><tab> if re.search(r\"password<tab><tab>  required<tab><tab>  pam_unix2.so use_authok<nl>\", i):<nl><nl><tab><tab>  sys.exit(\"Sending exit code 0\")<nl><nl><tab> else:<nl><nl><tab><tab>  sys.exit(2)<nl><nl>if __name__=='__main__':<nl><tab> main(sys.argv)","out":"pythonを使ったファイル内の複数行のマッチング"}
{"in":"NRZ = [0,0,1,0,1,1,0,1]<nl>NRZS = []<nl><nl>state = NRZ[0]<nl>for bit in NRZ:<nl><tab> state ^= bit ^ 1<nl><tab> NRZS.append(state)","out":"PythonによるNRZ-S"}
{"in":"# Read rawImage from a file, but in reality will have it from TCPServer<nl>f = open('frame.png', \"rb\")<nl>rawImage = f.read()<nl>f.close()<nl><nl># Convert rawImage to Mat<nl>pilImage = Image.open(StringIO(rawImage));<nl>npImage = np.array(pilImage)<nl>matImage = cv.fromarray(npImage)<nl><nl>#show it<nl>cv.NamedWindow('display')<nl>cv.MoveWindow('display', 10, 10)<nl>cv.ShowImage('display', matImage)<nl>cv. WaitKey(0)","out":"python opencvで配列からraw pngを読み込むには？"}
{"in":"data = INPUT_LIST<nl><nl>class Item:<nl><tab> def __init__(self, _id, name, type, parent):<nl><tab><tab>  self._id = _id<nl><tab><tab>  self.name = name<nl><tab><tab>  self.type = type<nl><tab><tab>  self.parent = parent<nl><tab><tab>  self.children = []<nl><nl><tab> def get_dict(self):<nl><tab><tab>  return {<nl><tab><tab><tab><tab>'id': self._id,<nl><tab><tab><tab><tab>'name': self.name,<nl><tab><tab><tab><tab>'type': self.type,<nl><tab><tab><tab><tab>'children': [child.get_dict() for child in self.children]<nl><tab><tab>  }<nl><nl><nl>lookup = dict((item['id'], Item(item['id'], item['name'], item['type'], item['parent'] if 'parent' in item else None)) for item in data)<nl><nl>root = []<nl><nl>for _id, item in lookup.items():<nl><tab> if not item.parent:<nl><tab><tab>  root.append(item)<nl><tab> else:<nl><tab><tab>  lookup[item.parent].children.append(item)<nl><nl>dict_result = [item.get_dict() for item in root]","out":"JSON配列のループ処理とソート処理"}
{"in":"filename = os.path.join(\"C:\\path\\to\\Sales Packs\", filename)<nl>os.rename(filename, filename[0:11]+accName+\".xlsx\")","out":"フォルダ内のすべてのファイルのファイル名を、すでに持っているファイル名に基づいて変更する。"}
{"in":"os.system('clear')","out":"pythonで256を返す画面をクリアする"}
{"in":"import re<nl><nl>st='''\\<nl>The ancient Romans influenced countries and civilizations in the following centuries.  <nl>Their language, Latin, became the basis for many other European languages. They stayed in Roma for 3 month.'''<nl><nl>deletions=('and','in','the')<nl>repl={\"ancient\": \"old\", \"month\":\"years\", \"centuries\":\"years\"}<nl><nl>tgt='|'.join(r'\\b{}\\b'.format(e) for e in deletions)<nl>st=re.sub(tgt,'',st)<nl>for word in repl:<nl><tab> tgt=r'\\b{}\\b'.format(word)<nl><tab> st=re.sub(tgt,repl[word],st)<nl><nl><nl>print st","out":"txtファイルから一部の単語を削除し、他の単語を置き換える。"}
{"in":"import bs4<nl>import requests <nl><nl>response = requests.get('http:\/\/my.gwu.edu\/mod\/pws\/courses.cfm?campId=1&termId=201501&subjId=ACCY')<nl>soup = bs4.BeautifulSoup(response.text)  <nl><nl>for tr in soup.findAll('tr')[11:]:<nl><tab> stack = []<nl><tab> for td in tr.findAll('td'):<nl><tab><tab>  stack.append(td.text.strip())<nl><tab> print(\",\".join(stack))","out":"BeautifulSoupとRequestsでhtmlのセルデータを抽出する。"}
{"in":"L = L[-100:]","out":"リストを最大要素数までトリミングする"}
{"in":"for i in p:<nl><tab>print i.ip()","out":"python-libtorrent を使用してトレントのピアリストを取得する方法は？"}
{"in":"both = [ random.randint(0, 500) for i in range(100) ]<nl>odd = [ x for x in both if x % 2 == 1 ]<nl>even = [ x for x in both if x % 2 == 0 ]","out":"pythonで乱数値を生成する"}
{"in":"import numpy as np<nl>from enthought.mayavi import mlab<nl><nl>x, y, z = np.ogrid[-10:10:20j, -10:10:20j, -10:10:20j]<nl>s = np.sin(x*y*z)\/(x*y*z)<nl><nl>src = mlab.pipeline.scalar_field(s)<nl>mlab.pipeline.iso_surface(src, contours=[s.min()+0.1*s.ptp(), ], opacity=0.3)<nl>mlab.pipeline.iso_surface(src, contours=[s.max()-0.1*s.ptp(), ],)<nl><nl>mlab.show()","out":"matplotlib mplot3Dなどで3D配列のisosurfaceの3Dプロットを表示するにはどうしたらよいでしょうか？"}
{"in":"import numpy as np<nl>from matplotlib import pylab as plt<nl><nl>A = np.fromfile(filename, dtype='int16', sep=\"\")<nl>A = A.reshape([1024, 1024])<nl>plt.imshow(A)","out":"Pythonで生二値画像を読み込む"}
{"in":"import pylab as plt<nl>a=[0,1]<nl>b=[0,1]<nl>plt.plot(a,b,'g',linewidth=3.5, label = 'a')<nl>plt.rc('text', usetex=True)<nl>plt.legend(labelspacing = 1.0,loc=1,prop={'size':40})<nl><nl>plt.text(0.45,-0.08,'a',fontsize=50)<nl>plt.text(0.53,-0.08, 'N',fontsize = 20)","out":"同じラベルに複数のフォントサイズ Matplotlib"}
{"in":"from datetime import datetime, tzinfo, timedelta<nl><nl>timestamp = \"1322485986.672901000\"<nl><nl>class UTC(tzinfo):<nl><tab> def utcoffset(self, dt):<nl><tab><tab><tab>return timedelta(0)<nl><tab> def tzname(self, dt):<nl><tab><tab>  return \"UTC\"<nl><tab> def dst(self, dt):<nl><tab><tab>  return timedelta(0)<nl><nl><nl>d1 = datetime.fromtimestamp(float(timestamp), UTC())<nl>print d1","out":"文字列のタイムスタンプをPythonのdatetimeに変換する (was: How to properly convert char into float or double in Python)"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl># Specify data \/ labels<nl>y = [3198293, 189910]<nl>xlabels = ['transactional','promotional']<nl>bar_width = 0.90<nl><nl>x = np.arange(len(y))<nl><nl>fig, ax = plt.subplots()<nl>ax.bar(x, y, width=bar_width)<nl>ax.set_xticks(x + (bar_width\/2.0))<nl>ax.set_xticklabels(xlabels)<nl>plt.show()","out":"pythonでmatplotlibを使ってラベル付きの簡単な棒グラフを描くには？"}
{"in":"y = [x[x[:,3]==k] for k in np.unique(x[:,3])]","out":"列を基準にnumpy配列を分割するには？"}
{"in":"url_list = [\"cat\", \"dog\", \"mouse\"]<nl><nl>for url in url_list:<nl><tab> driver.get(\"https:\/\/www.google.com\/webhp?hl=en#hl=en&q=\" + url)<nl><tab> # do stuff","out":"ループ内のURLに（辞書から引いた）別の変数を挿入する"}
{"in":"def ons():<nl><tab> cs=StringVar<nl><tab> cs=\"\"<nl><tab> a=''<nl><tab> for i in range(listbox.size()):<nl><tab><tab>  if listbox.select_includes(i):<nl><tab><tab><tab><tab>cs +=listbox.get(i)+' ' #adding words ending with whitespace<nl><tab> listbox.delete(0,END) #deleting all the listbox content<nl><tab> for item in cs:<nl><tab><tab>  a=a+item<nl><tab><tab>  if item==' ': #full string passed<nl><tab><tab><tab><tab>listbox.insert(END,a) #insert selected item into listbox<nl><tab><tab><tab><tab>a=''#delete the string buffer","out":"tkinter リストボックスの非選択項目を複数削除する。"}
{"in":"def transform(s):<nl><tab> ''' Receives a GeoNode structure as nested lists and returns a Mesh.<nl><tab> '''<nl><tab> if isinstance(s, list):<nl><tab><tab> return merge_meshes([transform(e) for e in s])<nl><tab> else:<nl><tab><tab> assert isinstance(s, GeoNode)<nl><tab><tab> return geonode_to_mesh(s)","out":"pythonのクラスツリーの解析と文法の適用"}
{"in":"with open('test.csv', 'r') as file:<nl><tab> data = file.read().split('<nl>')<nl><nl>for row in range(1, len(data)):<nl><tab> third_col= data[x].split(',')<nl><tab> with open('t' + str(x) + '.txt', 'w') as output:<nl><tab><tab>  output.write(third_col[2])","out":"pythonを使用して、.csvファイルの行からデータを別々の.txtファイルに抽出する方法は？"}
{"in":"#you need to explicitly name the columns of the incoming parameter in the append statement<nl>df = DataFrame(columns=['col1', 'col2'])<nl>print df.append(Series([None]*2, index=['col1','col2']), ignore_index=True)<nl><nl><nl>#as an aside<nl><nl>df = DataFrame(np.random.randn(8, 4), columns=['A','B','C','D'])<nl>dfRowImproper = [1,2,3,4]<nl>#dfRowProper = DataFrame(arange(4)+1,columns=['A','B','C','D']) #will not work!!! because arange returns a vector, whereas DataFrame expect a matrix\/array#<nl>dfRowProper = DataFrame([arange(4)+1],columns=['A','B','C','D']) #will work<nl><nl><nl>print df.append(dfRowImproper) #will make the 0 named column with 4 additional rows defined on this column<nl><nl>print df.append(dfRowProper) #will work as you would like as the column names are consistent<nl><nl>print df.append(DataFrame(np.random.randn(1,4))) #will define four additional columns to the df with 4 additional rows<nl><nl><nl>print df.append(Series(dfRow,index=['A','B','C','D']), ignore_index=True) #works as you want","out":"Pandas DataFrameに行を追加すると0列が追加される。"}
{"in":"import sys<nl>states = []<nl>cities = []<nl>fname = sys.argv[1]<nl>f = open(fname, 'r')<nl>for line in f:<nl><tab> line = line.rstrip() # This will remove all the whitespaces at the end of the line<nl><tab> line = line.split(',')<nl><tab> states.append(line[0])<nl><tab> cities.append(line[1])<nl><nl>print states<nl>print cities<nl>f.close()","out":"テキストファイルをリストに変換する"}
{"in":"# Read file <nl>f = open('path_to_file.json')<nl>json_string = f.read()<nl>f.close()<nl><nl># Convert json string to python object<nl>import json<nl>data = json.loads(json_string)<nl><nl># Create model instances for each item<nl>items = []<nl>for item in data:<nl><tab># create model instances...<nl><tab>item = YourModel(*item)<nl><tab>items.append(item)<nl><nl># Create all in one query<nl>YourModel.objects.bulk_create(items)","out":"DjangoによるJSONファイルの読み込み"}
{"in":"import numpy as np<nl>from matplotlib import pyplot as plt<nl>x = np.random.random(50)<nl>y = np.random.random(50)<nl>a = np.random.random(50)<nl>b = np.random.random(50)<nl>s = c=zip(a, b, np.zeros(50))<nl>ax = plt.gca()<nl>print ax.get_position()<nl>plt.scatter(x,y,c = s)<nl>#adjust limits to make room for inset axes<nl>plt.xlim(xmax = 1.5)<nl>plt.ylim(ymax = 1.5)<nl>#create inset axes<nl>ax = plt.axes([.7, .675, .2, .2], axisbg='y')<nl>n = 20<nl>red = np.linspace(min(a), max(a), n)<nl>green = np.linspace(min(b), max(b), n)<nl>floats = np.linspace(0, 1, n)<nl>#make arrays of all possible values between 0 and 1<nl>X, Y = np.meshgrid(floats, floats)<nl>#stack the arrays with a third array of zeros<nl>Z = np.dstack((X, Y, np.zeros(X.shape)))<nl>Z = np.rot90(Z)<nl>red = np.round(red[::-1], 2)<nl>green = np.round(green, 2)<nl>plt.imshow(Z)<nl>ticks = np.arange(0, n, 6)<nl>plt.yticks(ticks, [red[i] for i in ticks])<nl>plt.xticks(ticks, [green[i] for i in ticks], rotation = 'vertical')<nl>plt.xlabel('Green')<nl>plt.ylabel('Red')<nl>plt.show()","out":"matplotlib 散布図 色を第3変数と第4変数の関数にする"}
{"in":"dic = {m : my_function(m) for m in my_list}","out":"辞書をforループで結合する"}
{"in":"def json_equal(json1,json2):<nl><nl><tab>number_of_items = len(json1)<nl><tab>for item in json1:<nl><tab><tab> for item2 in json2:<nl><tab><tab><tab>  if item[\"address\"] == item2[\"address\"]:<nl><tab><tab><tab><tab><tab>if item[\"amount\"] == item2[\"amount\"]:<nl><tab><tab><tab><tab><tab><tab> number_of_items -= 1<nl><tab><tab><tab><tab><tab><tab> break<nl><tab><tab><tab>  else:<nl><tab><tab><tab><tab><tab>continue<nl><tab>if number_of_items == 0:<nl><tab><tab> return True<nl><tab>else:<nl><tab><tab> return False","out":"Python 2つのjsonのリストが等しいかどうかをチェックする。"}
{"in":"a = [1,2,3,4]<nl>b = [1,2]<nl><nl>print any(x in a for x in b)<nl>True","out":"複数の値のリストメンバーシップをチェックする最も効率的な方法"}
{"in":"a = wd.execute_script(\"return checkdata('\" + code + \"');\")","out":"pythonでseleniumを使ってJavascriptの関数を実行する方法"}
{"in":"data= csv.reader(open('outfile.tsv','rb'), delimiter = \"\\t\")<nl>fields=data.next()<nl>for row in data:<nl><tab><tab><tab>tsid=row[0]<nl><tab><tab><tab>full_list.append(tsid)<nl>print [(g[0],len(list(g[1]))) for g in itertools.groupby(full_list)]","out":"snifferを使用してtsvの最初の行を削除する。"}
{"in":"import subprocess<nl>subprocess.Popen(\"C:\\ThisIsTheFolderIWantToNavigateTo\")","out":"Pythonを使ってプログラム的にmyComp\/explorerでローカルフォルダを開く方法はないでしょうか？"}
{"in":"re.sub(r\"[0-9]+[a-z]+\",\"\",str)","out":"Pythonで正規表現を使用して、数字の後に文字が続くトークンを削除する方法は？"}
{"in":"conn_string = \"host='localhost' dbname='my_database' user='postgres' password='secret'\"<nl>conn = psycopg2.connect(conn_string)","out":"postgresとsqliteで同等の接続"}
{"in":"print sys.exc_info()[1]","out":"Python Azure SDK Blobをアップロードする。"}
{"in":"namedict = ({\"first_name\":\"Joshua\", \"last_name\":\"Drake\"},<nl><tab><tab><tab><tab>{\"first_name\":\"Steven\", \"last_name\":\"Foo\"},<nl><tab><tab><tab><tab>{\"first_name\":\"David\", \"last_name\":\"Bar\"})<nl><nl>cur = conn.cursor()<nl>cur.executemany(\"\"\"INSERT INTO bar(first_name,last_name) VALUES (%(first_name)s, %(last_name)s)\"\"\", namedict)","out":"チャンクとして挿入されたリアルタイムデータの読み取り"}
{"in":"pygame.time.delay()","out":"システム待機中にpygameで音を鳴らすにはどうしたらいいでしょうか？"}
{"in":"cursor.execute('INSERT INTO actors(name,age) VALUES(%s, %s)' ,row)","out":"テーブルにデータが挿入されない"}
{"in":"from django.db import models<nl>from django.contrib.contenttypes.models import ContentType<nl><nl>class BaseModel(models.Model):<nl><tab> type = models.ForeignKey(ContentType,editable=False)<nl><tab> # other base fields here<nl><nl><tab> def save(self,force_insert=False,force_update=False):<nl><tab><tab>  if self.type_id is None:<nl><tab><tab><tab><tab>self.type = ContentType.objects.get_for_model(self.__class__)<nl><tab><tab>  super(BaseModel,self).save(force_insert,force_update)<nl><nl><tab> def get_instance(self):<nl><tab><tab>  return self.type.get_object_for_this_type(id=self.id)","out":"Djangoでマルチテーブルの継承設計を汎用化する"}
{"in":"#!\/usr\/bin\/env python<nl>import json<nl>import urllib2<nl><nl>try:<nl><tab> r = urllib2.urlopen(\"https:\/\/push.geckoboard.com\/v1\/send\/\" + widget_key,<nl><tab><tab><tab><tab><tab><tab><tab><tab>json.dumps(nested_dict))<nl>except IOError as e:<nl><tab> if hasattr(e, 'reason'):<nl><tab><tab> print \"connection error:\", e.reason<nl><tab> elif hasattr(e, 'code'):<nl><tab><tab> print \"http error:\", e.code<nl><tab><tab> print e.read()<nl><tab> else:<nl><tab><tab> print \"error:\", e<nl>else: # success<nl><tab> assert json.load(r)[\"success\"]","out":"GeckoboardのHighchartsプラグインで使えるようにpythonでJSONを出力する方法"}
{"in":"app.add_url_rule('\/example', view_func = example.Index.as_view('example_index'))<nl>app.add_url_rule('\/example\/<string:example_key>', view_func = example.Show.as_view('example_show'), methods=['GET'])","out":"Flaskルートクエリパラメータ"}
{"in":"output = np.empty(indices[0].shape)<nl>x_indices = indices[0]<nl>y_indices = indices[1]<nl>z_indices = indices[2]<nl><nl>x0 = x_indices.astype(np.integer)<nl>y0 = y_indices.astype(np.integer)<nl>z0 = z_indices.astype(np.integer)<nl>x1 = x0 + 1<nl>y1 = y0 + 1<nl>z1 = z0 + 1<nl><nl>#Check if xyz1 is beyond array boundary:<nl>x1[np.where(x1==input_array.shape[0])] = x0.max()<nl>y1[np.where(y1==input_array.shape[1])] = y0.max()<nl>z1[np.where(z1==input_array.shape[2])] = z0.max()<nl><nl>x = x_indices - x0<nl>y = y_indices - y0<nl>z = z_indices - z0<nl>output = (input_array[x0,y0,z0]*(1-x)*(1-y)*(1-z) +<nl><tab><tab><tab><tab> input_array[x1,y0,z0]*x*(1-y)*(1-z) +<nl><tab><tab><tab><tab> input_array[x0,y1,z0]*(1-x)*y*(1-z) +<nl><tab><tab><tab><tab> input_array[x0,y0,z1]*(1-x)*(1-y)*z +<nl><tab><tab><tab><tab> input_array[x1,y0,z1]*x*(1-y)*z +<nl><tab><tab><tab><tab> input_array[x0,y1,z1]*(1-x)*y*z +<nl><tab><tab><tab><tab> input_array[x1,y1,z0]*x*y*(1-z) +<nl><tab><tab><tab><tab> input_array[x1,y1,z1]*x*y*z)<nl><nl>return output","out":"SciPyを使わずにNumPy配列の3D補間を行う。"}
{"in":"from formencode import FancyValidator, Invalid<nl>from formencode.validators import Email<nl><nl>class EmailList(FancyValidator):<nl><tab> \"\"\" Takes a delimited (default is comma) string and returns a list of validated e-mails<nl><tab><tab>  Set the delimiter by passing delimiter=\"A_DELIMITER\" to the constructor.<nl><tab><tab>  Also takes all arguments a FancyValidator does.  <nl><tab><tab>  The e-mails will always be stripped of whitespace.<nl><tab> \"\"\"<nl><tab> def _to_python(self, value, state):<nl><tab><tab>  try:<nl><tab><tab><tab><tab>values = str(value).split(self.delimiter)<nl><tab><tab>  except AttributeError:<nl><tab><tab><tab><tab>values = str(value).split(',')<nl><tab><tab>  validator = formencode.ForEach(validators.Email())<nl><tab><tab>  validator.to_python(values, state)<nl><tab><tab>  return [value.strip() for value in values]","out":"チェーンFormEncodeバリデーター"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl># random data to stand in<nl>x1 = 0.8+0.1*np.random.rand(25)<nl>x2 = 0.3+0.2*np.random.rand(25)<nl># customise the marker properties<nl>plt.plot(x1, color='g', marker='s', mec='w', mfc='g', mew='3', ms=8)<nl>plt.plot(x2, color='b', marker='s', mec='w', mfc='b', mew='3', ms=8)<nl>plt.show()","out":"Matplotlibの場合：空白で囲まれたマーカ"}
{"in":"undoicon = QIcon.fromTheme(\"edit-undo\")","out":"PyQt\/PySideにデフォルトのアイコンはありますか？"}
{"in":"def readMatrix(file):<nl><tab> with open(file) as contents:<nl><tab><tab>  return [[int(item) for item in line.split()] for line in contents]","out":"文字列のリストを整数に変換するためにリスト内包を使おうとしている？"}
{"in":"urlpatterns = patterns('',<nl><tab> # ... the rest of your URLconf goes here ...<nl>) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)","out":"データベースからhtmlページに画像を表示させることができない"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>grid = np.random.rand(4, 4)<nl>x = ['P0', 'P1', 'P2', 'P4']<nl>y = ['C0', 'C1', 'C2', 'C4']<nl>plt.imshow(grid, interpolation='none')<nl>plt.xticks(range(len(x)), x, fontsize=12)<nl>plt.yticks(range(len(y)), y, fontsize=12)","out":"行列データをカスタムティックラベルでプロットする"}
{"in":"import socket<nl>import sys<nl>import time<nl><nl>class Tek_scope(object):<nl><nl><tab> def __init__(self, IPaddress, PortNumber = 4000):<nl><tab><tab>  self.s = socket.socket(socket.AF_INET , socket.SOCK_STREAM)<nl><tab><tab>  self.s.connect((IPaddress, PortNumber))<nl><tab><tab>  self.s.setblocking(True)<nl><tab><tab>  print \"Scope opened Successfully\"<nl><nl>scope1 = Tek_scope(\"10.1.10.15\") #Connects to the scope<nl><nl>scope1.s.send('*IDN?<nl>') #Sends the *IDN? command to the scope. <nl><nl>print scope1.s.recv(1024)","out":"Python：ソケットでデータを受け取る - [Errno 11] Resource temporarily unavailable"}
{"in":"def cb_check():<nl><tab> if random_cards.get():<nl><tab><tab>  randomize_stacks_checkbutton.config(state=DISABLED)<nl><tab> else:<nl><tab><tab>  randomize_stacks_checkbutton.config(state=NORMAL)<nl><nl>top=Tk()<nl>random_cards = IntVar() <nl>random_stacks = IntVar() <nl>flip_cards = IntVar() <nl>wildcard = IntVar()<nl><nl>randomize_cards_checkbutton = Checkbutton(top, text=\"Randomize cards\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>variable=random_cards, command=cb_check)<nl>randomize_cards_checkbutton.grid(row=0, column=0, sticky=W)<nl><nl>randomize_stacks_checkbutton = Checkbutton(top, text=\"Randomize stacks\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> variable=random_stacks, bg=\"lightblue\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> disabledforeground=\"gray\")<nl>randomize_stacks_checkbutton.grid(row=1, column=0, sticky=W)<nl><nl>top.mainloop()","out":"Tkinterの他のチェックボックスでチェックボックスを無効にする"}
{"in":"conn = sqlite3.connect('databaza.db')<nl>c = conn.cursor()<nl>conn.text_factory = str<tab> <nl>data3 = str(input('Please enter name: '))<nl>query = \"DELETE FROM Zoznam WHERE Name = '%s';\" % data3.strip()<nl>print(query)<nl>mydata = c.execute(query)","out":"テーブルからレコードを削除する方法は？"}
{"in":"import datetime<nl>from dateutil.parser import parse as parse_date<nl>from pandas import DataFrame<nl><nl>df = DataFrame([['2009-01-04 - 2009-01-10','Some Data'], <nl><tab><tab><tab><tab><tab> ['2009-01-11 - 2009-01-17','Some Data']])<nl>df.columns = ['week','data']<nl><nl>def generate_dates(date_range):<nl><tab> day1_str, day2_str = date_range.split(' - ')<nl><tab> day1, day2 = parse_date(day1_str), parse_date(day2_str)<nl><tab> delta = day1 - day2<nl><tab> return [day1 + datetime.timedelta(days=x) for x in range(0, abs(delta.days + 1))]<nl><nl>def create_rows_from_row(row):<nl><tab> dates = generate_dates(row['week'])<nl><tab> return [[d, row['data']] for d in dates]<nl><nl>def create_new_df(df):<nl><tab> rows = []<nl><tab> for idx in range(len(df)):<nl><tab><tab>  rows.extend(create_rows_from_row(df.ix[idx]))<nl><nl><tab> new_df = DataFrame(rows)<nl><tab> new_df.columns = ['week','data']<nl><tab> return new_df<nl><nl>create_new_df(df)","out":"日付範囲列を基準に日数列を生成する"}
{"in":"def derivs(l):<nl>  return [l[i + 1] - l[i] for i in range(len(l) - 1)]","out":"pythonで数値的なトレンドラインを計算する方法"}
{"in":"self.request.headers","out":"PythonでGoogle Appengineへの受信リクエストのHTTPヘッダーを確認するにはどうすればよいですか？"}
{"in":"requests.get()","out":"動画のストリーミングを開始せずに、Youtubeのページを取得する方法は？"}
{"in":"from django.db import DatabaseError<nl>from django.test import TestCase<nl>from django.test.client import Client<nl>import mock<nl><nl>class NoDBTest(TestCase):<nl><tab> cursor_wrapper = mock.Mock()<nl><tab> cursor_wrapper.side_effect = DatabaseError<nl><nl><tab> @mock.patch(\"django.db.backends.util.CursorWrapper\", cursor_wrapper)<nl><tab> def test_no_database_connection(self):<nl><tab><tab>  response = self.client.post('\/signup\/', form_data)<nl><tab><tab>  self.assertEqual(message, 'An error occured with the DB')","out":"データベース接続なしで django unittest"}
{"in":"import win32api<nl>from time import sleep<nl><nl>count = 0<nl>savedpos = win32api.GetCursorPos()<nl>while(True):<nl><tab> if count>20*5: # break after 5sec<nl><tab><tab>  break<nl><nl><tab> curpos = win32api.GetCursorPos()<nl><tab> if savedpos != curpos:<nl><tab><tab>  savedpos = curpos<nl><tab><tab>  print \"moved to \" + str(savedpos)<nl><nl><tab> sleep(0.05)<nl><tab> count +=1","out":"pythonで、Windowsで、マウスが動くまで待つにはどうしたらいいでしょうか？"}
{"in":"[z0] * len(seconds)","out":"定数値を持つPythonのリスト"}
{"in":"from dateutil.parser import parse<nl><nl>latest = max(data['posts'], key=lambda x: parse(x['date']))","out":"Pythonを使ってjson\/dictから最新のものだけを（日付で）抽出する。"}
{"in":"poi_id = serializers.UUIDField(format='hex_verbose')","out":"Django Rest Frameworkです：どのようにビュークラス内のモデルの1つのフィールドの値を操作するには？"}
{"in":"import csv<nl><nl>csv_file = open('D:\\eggs2.csv','rb')<nl>csv_reader = csv.reader(csv_file)<nl>for row in csv_reader:<nl><tab> print row[0]<nl><nl>csv_file.close()","out":"pythonを使用してcsvファイルのカンマを含む単一の値を読み取る方法"}
{"in":"data = ['K:C:192.168.1.3:myusername:mypassword', 'M:N:192.168.3.2:root:toor']<nl>for i in data:<nl><tab> r = str(i).strip(\":\")<nl><tab> if len(r) == 4:<nl><tab><tab>  print r[0] + \"<tab>||\" + ((28 - len(r[1])) \/ 2) * \" \" + r[1] + ((28 - len(r[1])) \/ 2) * \" \" + \"||\" + ((22 - len(r[2])) \/ 2) * \" \" + r[2] + ((22 - len(r[2])) \/ 2) * ' ' + \"||\" + ((22 - len(r[3])) \/ 2) * \" \" + r[3] + ((22 - len(r[3])) \/ 2) * \" \"<nl><tab> elif len(r) == 3:<nl><tab><tab>  print r[0] + \"<tab>||\" + ((28 - len(r[1])) \/ 2) * \" \" + r[1] + ((28 - len(r[1])) \/ 2) * \" \" + \"||\" + ((22 - len(r[2])) \/ 2) * \" \" + r[2] + ((22 - len(r[2])) \/ 2) * ' ' + \"||\"","out":"SyntaxError 無効な構文です。"}
{"in":"graph = facebook.GraphAPI(access_token)<nl>profile = graph.get_object('me')<nl>args = {'fields' : 'id,name,email', }<nl>profile = graph.get_object('me', **args)","out":"Facebook SDK for Python - ユーザーのメールを取得する。"}
{"in":"attrs_list = Entity.objects.filter(**filters).distinct().values_list('someattr', flat=True)<nl>a = Character.objects.filter(someotherattr__in=attrs_list)","out":"Python\/Djangoで2つのQuerySetを比較する。"}
{"in":"offset = -0<nl>print (\"In Command 3 - Brute force\")<nl>string = input(\"Please enter a string to Brute Force:\")<nl>while offset > -26:<nl><tab> offset = offset - 1<nl><tab> word = \"\"<nl><tab> for letter in string:<nl><tab><tab>  letter = (ord(letter))<nl><tab><tab>  letter = letter + offset<nl><tab><tab>  if letter > 126:<nl><tab><tab><tab><tab>letter - 95<nl><tab><tab>  elif letter < 32:<nl><tab><tab><tab><tab>letter + 32<nl><tab><tab>  output = (chr(letter))<nl><tab><tab>  word = word + output<tab><tab><tab><tab><nl><tab><tab>  choice = 0<nl><tab> print(\"Decryption: \"+word)","out":"for文の出力の前に付加する"}
{"in":"Timestaken4={}<nl><nl>for key,value in zip(NumberPlates,Timestaken2):<nl><tab> Timestaken4[key]=value<nl><nl>print(Timestaken4)","out":"ZIPのキーと値"}
{"in":"def OnInit(self):<nl><tab> # Check for a running instance for this user.  Do not instantiate if found.<nl><tab> if self.checkInstance():<nl><tab><tab>dbcon.cursor().callproc('post_mutex', (self.mutexname,))<nl><tab><tab>dbcon.commit()<nl><tab><tab>self.Cleanup()<nl><tab><tab>return False<nl><nl><tab> # Register for database events.<nl><tab> DataCache['dbListener'] = dbListener()<nl><nl><tab> return True","out":"wxpythonのイベントでprogram_startのようなものがあるのでしょうか？"}
{"in":"import os, shutil<nl><nl>dir1 = r'\/path\/to\/dir\/1'<nl>dir2 = r'\/path\/to\/dir\/2'<nl>copy_dest = r'\/path\/to\/copy\/dirs\/to'<nl><nl>dir1_folders = [dir for dir in os.listdir(dir1) if os.path.isdir(os.path.join(dir1, dir))]<nl>dir2_folders = [dir for dir in os.listdir(dir2) if os.path.isdir(os.path.join(dir2, dir))]<nl><nl>for dir in dir1_folders:<nl><tab> if dir in dir2_folders:<nl><tab><tab>  shutil.copytree(os.path.join(dir1, dir), os.path.join(copy_dest, dir))","out":"一致するフォルダを検索し、ファイルとサブフォルダをコピーします。"}
{"in":"l1 = ['a', 'b', 'c', 'd']<nl>l2 = ['c', 'd', 'e']<nl>set(l1).intersection(l2)<nl>set(['c', 'd'])","out":"Pythonで2つのリストで同じ要素の数を求める"}
{"in":"djang-nested-inline","out":"Django-adminで、foreignkeyのforeignkeyを同じページで表示する方法は？"}
{"in":"from bs4 import BeautifulSoup as Soup<nl><nl>with open(\"sample.xml\", \"r\") as f:<nl><tab> target_xml = f.read()<nl><nl># create a `Soup` object<nl>soup = Soup(target_xml, \"xml\")<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  <nl><nl># loop through all <driver> returned as a list and prints all <nl>for d in soup.find_all(\"driver\"):<nl><tab> print(d)","out":"Pythonで子ノードをxmlタグと一緒に印刷する。"}
{"in":"re.search(r'\\b' + re.escape(' '.join(query)) + r'\\b', ' '.join(line)) is not None","out":"python - 単語全体のみ文字列マッチ"}
{"in":"import pygit2<nl>repo = pygit2.Repository('.git')<nl>branch = repo.lookup_branch('new')<nl>ref = repo.lookup_reference(branch.name)<nl>repo.checkout(ref)","out":"pygit2でブランチをチェックアウトする方法とは？"}
{"in":"itemlist = dom.getElementsByTagName('filter-name')<nl>for item in itemlist:<nl><tab> if \"Filter1\" == item.childNodes[0].nodeValue:<nl><tab><tab>  #need to comment the whole node containing the filter-name<nl><tab><tab>  comment_node(item.parentNode)<nl>print dom.toxml() # verif","out":"Pythonでxmlセクションをコメントする"}
{"in":"#!\/usr\/bin\/python2.x","out":"Python - __future__ から with_statement をインポートできない。"}
{"in":"for i in range(len(a)):<nl><tab> if a[i] > max:<nl><tab><tab>  max = a[i]<nl><tab><tab>  maxIndex = i","out":"Python リスト内の最大値のインデックスを見つける"}
{"in":"names = list()<nl>a = open(sf, 'r')<nl>for row in a:<nl><tab> place = row.find(',')<nl><tab> names.append(row[:place])<nl>print(names)","out":"csvファイルから特定の文字列をリストに取り込む方法 - python 3.4"}
{"in":"import numpy as np<nl>x = np.random.rand(4)<nl>x = x.reshape(-1,1)<nl>xij = np.matrix(x.T - x)","out":"numpyでxi-xj行列をループなしで計算する（apiコールによる）。"}
{"in":"args = {'fields' : 'birthday,name' }<nl>friends = graph.get_object(\"me\/friends\",**args)","out":"Pythonを使用して友人の誕生日を取得する。"}
{"in":"global lat, lon, speed","out":"baseHTTPserverクラスの内部から変数が更新されない。"}
{"in":"if request.method == \"POST\":<nl><tab><tab>  form = XXXXForm(request.POST,request.FILES)<nl><tab><tab>  if form.is_valid():<nl><tab><tab><tab><tab>docfile=request.FILES['docfile']<nl><nl><tab><tab>  if isinstance(docfile, (InMemoryUploadedFile, TemporaryUploadedFile)):<nl><tab><tab><tab><tab>book = xlrd.open_workbook(file_contents=docfile.read(), formatting_info=True, on_demand=True)<nl><tab><tab>  else:<nl><tab><tab><tab><tab>book = xlrd.open_workbook(filename=docfile, formatting_info=True, on_demand=True)<nl><nl><tab><tab>  sheet = book.sheet_by_index(0)<nl><tab><tab>  new_csv_file = csv.writer(open('new_filename', 'w'))<nl><tab><tab>  # read file<nl><tab><tab>  for line in range(1, sheet.nrows):<nl><tab><tab><tab><tab>new_row = [request.session.get('uploader'), request.session.get('date')]<nl><tab><tab><tab><tab>new_row.extend(sheet.row_values(line))<tab><tab><tab><tab><tab> <nl><tab><tab><tab><tab>new_csv_file.writerow(new_row)","out":"django1.8- Excel をアップロードしてデータベースに挿入するときに、手動で情報を追加する方法。"}
{"in":"if x % 3 == 0:<nl><tab> print 'x is divisible by 3'","out":"Pythonで値が整数であるかどうかを判定する。"}
{"in":"for m in modules:<nl><tab> globals()[m] = __import__(m)","out":"pythonで配列からモジュールをインポートするには？"}
{"in":"print sorted(student_tuples, key=lambda t: (-t[2], t[0]))<nl># [('john', 'A', 15), ('dave', 'C', 12), ('peter', 'B', 12)]","out":"値が小さい順に並べ、2番目の値が大きくなるようにソートする方法"}
{"in":"EdgeFaces = {} # mapping from edge to adjacent faces<nl>for ThisFace in TheMesh.faces :<nl><tab> for ThisEdge in ThisFace.edge_keys :<nl><tab><tab>  if not ThisEdge in EdgeFaces :<nl><tab><tab><tab><tab>EdgeFaces[ThisEdge] = []<nl><tab><tab>  #end if<nl><tab><tab>  EdgeFaces[ThisEdge].append(ThisFace.edge_keys)<nl><tab> #end for<nl>#end for","out":"Blender Python APIで平面の境界を検出する。"}
{"in":"connect.execute(tobeexec, params);<nl>connect.commit()<nl>connect.close()","out":"Python sqlite3 データを保存する"}
{"in":"if x[3] is x[4]:<nl><tab> print \"What's the difference?\"","out":"Python - 同じオブジェクトを指す2つのリスト要素を区別するにはどうすればよいですか？"}
{"in":"title, author, news_id<nl>hi<tab>,<tab> max,<tab><tab> 1<nl>hello,<tab> max,<tab><tab> 1<nl>world,<tab>  me,<tab><tab> 1<nl>sup  ,<tab>  me,<tab><tab> 2","out":"appengineの検索で複数のフィールド名が表示される"}
{"in":"import datetime as dt<nl><nl>d = {0: \"(oh)\",<nl><tab>  1: \"one\",<nl><tab>  2: \"two\",<nl><tab>  3: \"three\",<nl><tab>  4: \"four\",<nl><tab>  5: \"five\",<nl><tab>  6: \"six\",<nl><tab>  7: \"seven\",<nl><tab>  8: \"eight\",<nl><tab>  9: \"nine\",<nl><tab>  10: \"ten\",<nl><tab>  11: \"eleven\",<nl><tab>  12: \"twelve\",<nl><tab>  13: \"thirteen\",<nl><tab>  14: \"fourteen\",<nl><tab>  15: \"fifteen\",<nl><tab>  16: \"sixteen\",<nl><tab>  17: \"seventeen\",<nl><tab>  18: \"eighteen\",<nl><tab>  19: \"nineteen\",<nl><tab>  20: \"twenty\",<nl><tab>  30: \"thirty\",<nl><tab>  40: \"forty\",<nl><tab>  50: \"fifty\",<nl><tab>  60: \"sixty\"}<nl><nl>def display_time(t):<nl><tab> Hour = d[int( t[0:2])] if t[0:2] != \"00\" else d[12]<nl><tab> Suffix = 'a.m.' if d[int( t[7:9])] == Hour else 'p.m.'<nl><nl><tab> if  t[3] == \"0\":<nl><tab><tab>  if  t[4] == \"0\":<nl><tab><tab><tab><tab>Minute = \"\"<nl><tab><tab>  else:<nl><tab><tab><tab><tab>Minute = d[0] + \" \" + d[int(t[4])]<nl><tab> else:<nl><tab><tab>  Minute = d[int(t[3])*10] + '-' + d[int(t[4])]<nl><tab> print 'The time is', Hour, Minute, Suffix<nl><nl>display_time(dt.datetime.now().strftime('%I %M %H'))<nl>display_time(\"07 45 19\")<nl>display_time(\"11 06 23\")<nl>display_time(\"00 00 00\")","out":"Python 現在の時刻（英語） Sentence"}
{"in":"def getBlocks(filepath):<nl><tab> with open(filepath) as f:<nl><tab><tab>  blocks = []<nl><tab><tab>  go = False<nl><tab><tab>  for line in f:<nl><tab><tab><tab><tab>if line.strip() == startDelimiter:<nl><tab><tab><tab><tab><tab> block = ''<nl><tab><tab><tab><tab><tab> go = True<nl><tab><tab><tab><tab>if go:<nl><tab><tab><tab><tab><tab> block += line<nl><tab><tab><tab><tab>if line.strip() == endDelimiter:<nl><tab><tab><tab><tab><tab> blocks.append(block)<nl><tab><tab><tab><tab><tab> block = ''<nl><tab><tab><tab><tab><tab> go = False<nl><tab><tab>  if block:<nl><tab><tab><tab><tab>blocks.append(block)<nl><tab> return blocks","out":"Pythonが特定の行のテキストを読む"}
{"in":"from django.core.urlresolvers import reverse<nl>from django.http import Http404<nl><nl>class RestrictStaffToAdminMiddleware(object):<nl><tab> \"\"\"<nl><tab> A middleware that restricts staff members access to administration panels.<nl><tab> \"\"\"<nl><tab> def process_request(self, request):<nl><tab><tab>  if request.path.startswith(reverse('admin:index')):<nl><tab><tab><tab><tab>if request.user.is_authenticated():<nl><tab><tab><tab><tab><tab> if not request.user.is_staff:<nl><tab><tab><tab><tab><tab><tab>  raise Http404<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> raise Http404","out":"Djangoで管理ページへのアクセスを制限するにはどうしたらいいですか？"}
{"in":"import csv<nl>log=open(\"sync_de.log\",'r')<nl>out=open(\"fn.csv\",'w')<nl>csv = csv.writer(out)<nl><nl>#  to store the list<nl>out_list = []<nl><nl>for eachline in log:<nl><tab># your code<nl><tab>if blabla:<nl><tab><tab>out_list.append([filename, start, end])<nl><nl># write the csv<nl>csv.writerows(out_list)","out":"Pythonを使ったBitTorrent Syncのログ解析"}
{"in":"csfont = {'fontname':'Comic Sans MS'}<nl>hfont = {'fontname':'Helvetica'}<nl><nl>plt.title('title',**csfont)<nl>plt.xlabel('xlabel', **hfont)<nl>plt.show()","out":"matplotlib (python)でフォントを変更する方法は？"}
{"in":"def foo(**kwargs):<nl><tab> pass<nl><nl>foo(**{ 'foo' : 123, 'bar' : 456 })","out":"kwargs`リストを生成する方法は？"}
{"in":"def replace_all(text, dic):<nl><tab> for i, j in dic.iteritems():<nl><tab><tab>  text = text.replace(i, j)<nl><tab> return text<nl><nl>f_dic = {'a':'d'}<nl>s_dic = {'1':'x'}<nl><nl>with open('file1.csv','r') as f:<nl><tab> text=f.read()<nl><tab> with open('file2.csv','w') as w:<nl><tab><tab>  text=replace_all(text,f_dic)<nl><tab><tab>  text=replace_all(text,s_dic)<nl><tab><tab>  print text<nl><tab><tab>  w.write(text)","out":"csvファイル内の複数の文字列を置換する"}
{"in":"from collections import defaultdict<nl><nl>def ordered(data, N):<nl><tab> edges = defaultdict()<nl><tab> for v1, v2 in data:<nl><tab><tab>  edges.setdefault(v1, []).append(v2)<nl><tab><tab>  edges.setdefault(v2, []).append(v1)<nl><nl><tab> visited = [False] * N<nl><tab> path = None<nl><tab> for v in range(N):<nl><tab><tab>  if not visited[v]:<nl><tab><tab><tab><tab>path = dfs(edges, visited, v)<nl><tab><tab><tab><tab>if path is not None: break<nl><tab> if path is not None:<nl><tab><tab>  return [[path[i], path[i + 1]] for i in range(len(path) - 1)]<nl><nl><nl>def dfs(edges, visited, v1, vp=None):<nl><tab> path = [v1]<nl><tab> if visited[v1]: return path<nl><tab> visited[v1] = True<nl><tab> for v2 in edges[v1]:<nl><tab><tab>  if v2 == vp: continue<nl><tab><tab>  path_child = dfs(edges, visited, v2, v1)<nl><tab><tab>  if path_child is not None: return path + path_child<nl><tab> return None<nl><nl>data = [[0, 7], [1, 8], [2, 9], [3, 0], [4, 1], [5, 2], [6, 3], [4, 7], [8, 5], [9, 6]]<nl>N = 10<nl>ord = ordered(data, N)<nl><nl>[[0, 7], [7, 4], [4, 1], [1, 8], [8, 5], [5, 2], [2, 9], [9, 6], [6, 3], [3, 0]]","out":"Nx2の整数型numpy配列から、行内の連続した要素にマッチするように効率的にグループ化する。"}
{"in":"for image in soup.findAll(\"img\"):<nl><tab><tab>  print \"Old Image Path: %(src)s\" % image<nl><tab><tab>  #Get file name<nl><tab><tab>  filename = image[\"src\"].split(\"\/\")[-1]<nl><tab><tab>  #Get full path name if url has to be parsed<nl><tab><tab>  parsedURL[2] = image[\"src\"]<nl><tab><tab>  image[\"src\"] = '%s\\%s' % (phonepath,filename)<nl><tab><tab>  #Old File path (local to computer)<nl><tab><tab>  #image[\"src\"] = '%s\\%s' % (out,filename)<nl><tab><tab>  print 'New Path: %s' % image[\"src\"]<nl><tab><tab>  #<tab><tab> print image<nl><tab><tab>  outpath = os.path.join(out, filename)<nl><nl><tab><tab>  #retrieve images<nl><tab><tab>  if parsedURL[2].lower().startswith(\"http\"):<nl><tab><tab><tab><tab>#urlretrieve(image[\"src\"], outpath)<nl><tab><tab><tab><tab>urlretrieve(parsedURL[2], outpath)<nl><tab><tab><tab><tab>print image[\"src\"].lower()<nl><tab><tab>  else:<nl><tab><tab><tab><tab>print \"HTTP INFO \" + urlparse.urlunparse(parsedURL)<nl><tab><tab><tab><tab>print \"HTTP INFO \" + image[\"src\"].lower()<nl><tab><tab><tab><tab>urlretrieve(urlparse.urlunparse(parsedURL), outpath) #Constructs URL from tuple (parsedURL)<nl><tab><tab><tab><tab>#print image[\"src\"].lower()","out":"ビューティフルスープライブラリーを使用してダウンロードした画像を開けない"}
{"in":"import csv<nl><nl>with open('filename.csv', 'rb') as f:<nl><tab> reader = csv.reader(f)<nl><tab> counter = 0<nl><tab> for row in reader:<nl><tab><tab>  if len(row) == 0:<nl><tab><tab><tab><tab>counter += 1<nl><tab><tab><tab><tab>print counter, row","out":"Pythonを使ったCSVファイルの特定列の取得"}
{"in":"df[1] = df[0].dt.to_period('M')","out":"pandasでタイムスタンプの列をピリオドに変換する"}
{"in":"from itertools import izip_longest<nl>def grouper(iterable, n, fillvalue=None):<nl><tab> \"Collect data into fixed-length chunks or blocks\"<nl><tab> # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx<nl><tab> args = [iter(iterable)] * n<nl><tab> return izip_longest(fillvalue=fillvalue, *args)<nl><nl><nl>with open('z.t') as f:<nl><tab> d = grouper(f, 4)<nl><tab> for x in d:<nl><tab><tab><tab><tab>print ','.join(y.rstrip() for y in x) <nl><nl>a,b,c,d,e,f,g,h<nl>i,j,k,l,m,n,o,p","out":"列数が変化するデータファイルの読み込み python"}
{"in":"import csv<nl>with open(\"input.csv\", \"rb\") as input, open(\"output.csv\", \"wb\") as output:<nl><tab> w = csv.writer(output)<nl><tab> for record in csv.reader(input):<nl><tab><tab>  w.writerow(tuple(s.remove(\"<nl>\") for s in record))","out":"ファイル内で引用されたすべてのテキストから改行を削除するにはどうすればよいですか？"}
{"in":"#!\/usr\/bin\/python<nl># -*- coding: utf-8 -*-<nl><nl>import serial<nl>import sys<nl>import time<nl><nl>port = \"\/dev\/serial\/by-id\/usb-FTDI_FT232R_USB_UART_AE01J6GZ-if00-port0\"<nl><nl>baudrate = 115200<nl><nl>if len(sys.argv) == 3:<nl><tab> ser = serial.Serial(sys.argv[1], sys.argv[2])<nl>else:<nl><tab> print \"# Please specify a port and a baudrate\"<nl><tab> print \"# using hard coded defaults \" + port + \" \" + str(baudrate)<nl><tab> ser = serial.Serial(port, baudrate)<nl><nl># enforce a reset before we really start<nl>#ser.setDTR(1)<nl>#time.sleep(0.25)<nl>#ser.setDTR(0)<nl><nl>while 1:<nl><tab> sys.stdout.write(ser.readline())<nl><tab> sys.stdout.flush()","out":"Arduinoプロジェクト（pySerial）からシリアルデータを読み込む。"}
{"in":"import urllib<nl>import json<nl><nl>response = urllib.urlopen(\"http:\/\/sncf.mobi\/infotrafic\/iphoneapp\/transilien\/?gare=BEC\")<nl>if response.getcode() == 200:<nl><tab> data = json.load(response)<nl><tab> for train in data[\"D\"]:<nl><tab><tab>  print \"Train number\", train[\"numerotrain\"], \"code\", train[\"codevoyageur\"]<nl>else:<nl><tab> print \"Failed to load data:\", response.getcode()","out":"文字が混在する文字列を順序付きリストに"}
{"in":"cursor.rowcount","out":"Pythonのsqlite UPDATEがうまくいったかどうかを判断するにはどうすればよいですか？"}
{"in":"#!\/usr\/bin\/env python3<nl><nl>import re<nl><nl>str=\"[class,'STOCK'],[symbol,'AAII'],[open,2.60],[high,2.70],[low,2.53],[close,2.60],[volume,458500],[date,'21-Dec-04'],[openClosePDiff,0.0],[highLowPDiff,0.067],[closeEqualsLow,'false'],[closeEqualsHigh,'false']\"<nl>str = re.sub('^\\[','',str)<nl>str = re.sub('\\]$','',str)<nl>array = str.split(\"],[\")<nl>for line in array:<nl><tab> print(line)","out":"Pythonで株価をトークンに分割する"}
{"in":"for k in myDict:<nl><tab> myDict[k] \/= 2","out":"dictの各値に対して?"}
{"in":"from pdb import set_trace<nl>driver = webdriver.Firefox()<nl>driver.get(\"google.com\")<nl>set_trace()<nl>driver.find_element_by_xpath(\"\/\/input[@id='gbqfq']\").send_keys(\"cats\" + Keys.RETURN)","out":"Pythonとseleniumの組み合わせ：既存ブラウザでの再実行"}
{"in":"import numpy as np<nl>row, col = 10, 5<nl>matrix = np.random.randint(2, size=(row,col))","out":"NUMPYを作成し、ランダムなバイナリデータで埋め尽くす。"}
{"in":"import sys<nl><nl>if len(sys.argv) != 2:<nl><tab> print 'Add an input file as parameter'<nl><tab> sys.exit(1)<nl><nl>print 'opening file: %s' % sys.argv[1]<nl><nl>with open(sys.argv[1]) as input, open('output', 'w+') as output:<nl><tab> for line in input:<nl><tab><tab>  if line is not None:<nl><tab><tab><tab><tab>if line == '<nl>':<nl><tab><tab><tab><tab><tab> pass<nl><tab><tab><tab><tab>elif 'OK' in line:<nl><tab><tab><tab><tab><tab> pass<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> new_line = line.split(' ', 7)<nl><tab><tab><tab><tab><tab> output.write('%s,%s,%s,%s \/ %s<nl>' % (new_line[1], new_line[2], new_line[3], new_line[4], new_line[6]))<nl><tab><tab><tab><tab><tab> # just for checking purposes let's print the lines<nl><tab><tab><tab><tab><tab> print '%s,%s,%s,%s \/ %s' % (new_line[1], new_line[2], new_line[3], new_line[4], new_line[6])","out":"Python - テキストファイル内の特定データの書式設定"}
{"in":"data['extras'] = base64.b64encode(zlib.compress(\"My string\".encode(\"utf-8\")))","out":"圧縮された文字列をjsonでダンプする方法は？"}
{"in":"word.ActiveDocument.Sections(1).Headers(win32.constants.wdHeaderFooterPrimary).Range.Text='test text'","out":"win32comでMS Wordのヘッダーを編集する"}
{"in":"class FavoriteEnroledTrainee(SessionMixin, View):<nl><tab> def get(self, request, *args, **kwargs):<nl><tab><tab>  print 'here'<nl>favorite_enroled_trainee = dajaxice_register(method='GET', name='company.favorite')(FavoriteEnroledTrainee.as_view())","out":"クラスベースビューのDajaxice"}
{"in":"from pylab import *<nl><nl>L1 = ['London', 'Paris', 'Tokio', 'Berlin', 'Barcelona', 'Reykjavik']<nl>pos = arange(len(L1))<nl>yticks(pos, L1)<nl><nl>I1 = [['London',0],['Paris',10],['Barcelona',23]]<nl>I2 = [['Paris',10],['Tokio',19],['Berlin',21],['Reykjavik',23]]<nl><nl>I1_y = [L1.index(el[0]) for el in I1]<nl>I1_x = [el[1] for el in I1]<nl><nl>I2_y = [L1.index(el[0]) for el in I2]<nl>I2_x = [el[1] for el in I2]<nl><nl>plot(I1_x, I1_y, 'o-')<nl>plot(I2_x, I2_y, 'x-')<nl>grid(True)<nl>savefig('countries.png')<nl>show()","out":"Pyplot <文字列,数値>のペアをグラフ行列にマッピングする。"}
{"in":"from math import log10, floor<nl><nl>def convert(self, x, ROUND=0):<nl><nl><tab> conv = []<nl><nl><tab> for _ in range(x.size[0]):<nl><tab><tab>  lst = x._data[_::x.size[0]].tolist()<nl><nl><tab><tab>  if ROUND is not 0:<nl><tab><tab><tab><tab>lst = [self.round_sig(elem, ROUND) if elem != 0 and<nl><tab><tab><tab><tab><tab><tab> elem == elem else elem for elem in lst]<nl><nl><tab><tab>  conv.append(lst)<nl><nl><tab> return conv<nl><nl>def round_sig(self, x, sig=2):<nl><tab> return round(x, sig-int(floor(log10(abs(x))))-1)","out":"matlab.doubleの配列をpythonの配列に変換する。"}
{"in":"VideoData.objects.annotate(<nl><tab><tab>  watches_count=models.Count('user_set')<nl><tab> ).order_by('-watches_count')[:10]","out":"Djangoで多対多の関係をアノテートする。"}
{"in":"myapp.show()<nl>print myapp.x<nl>if myapp.x == 1:<nl><tab> try :<nl><tab><tab>  s.connect((myapp.ip, myapp.port))<nl><tab><tab>  print 'connected'<nl><tab><tab>  myapp.x = 0<nl><tab> except :<nl><tab><tab>  print 'Unable to connect'<nl><tab><tab>  myapp.x = 0","out":"機能からの情報を受け取らない"}
{"in":"while True:<nl><tab> ans = input('Prompt ')<nl><tab> if ans:<nl><tab><tab>  break<nl><tab> print ('You need to type something')","out":"Python 入力がないと入力に失敗したと表示されるようにする方法"}
{"in":"shutil.copy(__file__, \"new_destination.py\")","out":"shutilを使って、計算をした後にpythonのファイルを勝手にコピーさせるにはどうしたらいいでしょうか？"}
{"in":"def main():<nl><tab> q = Queue.Queue()<nl><tab> for i in range(3):<nl><tab><tab>  t = threading.Timer(1, run_function, [q, i])<nl><tab><tab>  t.start()<nl><nl><tab> while True:<nl><tab><tab>  item = q.get()<nl><tab><tab>  save_to_disk(item)<nl><tab><tab>  q.task_done()<nl><nl>def run_function(q, i):<nl><tab> t = threading.Timer(1, run_function, [q, i])<nl><tab> t.start()<nl><tab> q.put(function_with_delay(i))","out":"複数の関数を毎秒実行し、その結果をファイルに書き込む。"}
{"in":"title = u\"Kl?ft skr?ms inf?r p? f?d?ral ?lectoral gro?e\"<nl>import unicodedata<nl>unicodedata.normalize('NFKD', title).encode('ascii','ignore')<nl>'Kluft skrams infor pa federal electoral groe'","out":"Unicodeの文字列をPythonの文字列（余分な記号を含む）に変換する。"}
{"in":"b = ['cat', 'dog', 'god', 'star', 'lap', 'act']<nl>array = []<nl>t = 0<nl>for i, value in enumerate(b):<nl><tab> t = i+1<nl><tab> while t<len(b):<nl><tab><tab>  if ''.join(sorted(value))==''.join(sorted(b[t])):<nl><tab><tab><tab><tab>array.extend([value, b[t]])<nl><tab><tab>  t+=1<nl>print array<nl>['cat', 'act', 'dog', 'god']","out":"Pythonで配列のアナグラムをフィルタリングする"}
{"in":"for y in range(10):<nl><tab> print<nl><tab> i = 10 - y<nl><tab> print ' ' * (y * 2),  # whitespaces<nl><tab> for x in range(i):<nl><tab><tab>  print x,<nl><tab><tab>  i = i - 1","out":"降順の範囲の複数行を表示する python の for ループ"}
{"in":"with open(r'C:\\path\\to\\logons.txt', 'r') as f:<nl><tab> for line in f:<nl><tab><tab>  data = line.split()<tab> # Splits on whitespace<nl><tab><tab>  print '{0[0]:<15}{0[1]:<15}{0[2]:<5}{0[3]:<15}{0[4]:>15}'.format(data)","out":"テキストファイルの列を揃える"}
{"in":"import pandas as pd<nl><nl>result = []<nl><nl>for i in range(1,31):<nl><tab> result.append(pd.DataFrame((find_peaks(df1['R'], df1['I {}'.format(i)])), index = None))<nl><tab> df2 = pd.concat(result)<nl><nl>print df2.head()<nl>df2.to_csv('Output.csv')","out":"Pythonでリストのリストをcsvに書き出す"}
{"in":"import scipy.io<nl>import numpy as np<nl>my_list = np.zeros((3,), dtype=np.object)<nl>my_list[:] = ['abc', 'def', 'ghi']<nl>scipy.io.savemat('test.mat', mdict={'my_list': my_list})","out":"PythonからMATLABへ：scipy.ioを使った文字列のリストの書き出し"}
{"in":"try:<nl>  new_list1.append(float(item))<nl>except (ValueError, TypeError):<nl>  pass","out":"リストの中でfloatに変換できない項目を削除するには、どのようなコードを書けばよいでしょうか。"}
{"in":"input='adId:4028cb901dd9720a011e1160afbc01a3;siteId:8a8ee4f720e6beb70120e6d8e08b0002;userId:5082a05c-015e-4266-9874-5dc6262da3e0'<nl><nl>result={}<nl>for pair in input.split(';'):<nl><tab> (key,value) = pair.split(':')<nl><tab> result[key] = value<nl><nl>print result['adId']<nl>print result['siteId']<nl>print result['userId']","out":"パイソンでパースする"}
{"in":"rfile.close()","out":"Pythonです：持続的な接続を持つスレッドHTTPサーバをシャットダウンする方法（別のスレッドからreadline()を殺す方法）？"}
{"in":"CYGWIN_KEY = \"SOFTWARE\\\\Cygwin\\\\setup\"<nl>hk_user = winreg.HKEY_CURRENT_USER<nl>key = winreg.OpenKey(hk_user, CYGWIN_KEY)<nl>root = winreg.QueryValueEx(key, \"rootdir\")[0]","out":"PythonスクリプトでCygwinのインストールパスを取得する。"}
{"in":"import threading,time<nl>def play1():<nl><tab> while time.time() <= start_time:<nl><tab><tab>  pass<nl><tab> threading.Thread(target=listen_to_audio).start()<nl>def play2():<nl><tab> while time.time() <= start_time:<nl><tab><tab>  pass<nl><tab> threading.Thread(target=play_audio).start()<nl>start_time=time.time()+20<nl>threading.Thread(target=play1).start()<nl>threading.Thread(target=play2).start()","out":"Pythonで2つのメソッドを同時に起動する"}
{"in":"model = QSqlQueryModel()<nl>model.setQuery(\"select some stuff\", db)<nl>while model.canFetchMore():<nl><tab> model.fetchMore()<nl>tableView.setModel(model)","out":"Qt - QTableView の垂直スクロールバーハンドルの動作を正常化する。"}
{"in":"entry = [VC_s, VC_i, VT_s]<nl>rowAdd = tempfile.next()<nl>ofile.writerow(rowAdd + entry)","out":"Pythonです：各行の各列にリストを書き込む"}
{"in":"class LoginHandler(tornado.web.RequestHandler):<nl><tab> def post(self):<nl><tab><tab>  email_address = self.get_argument('email', '')<nl><tab><tab>  password = self.get_argument('password', '')<nl><nl><tab><tab>  if not email_address:<nl><tab><tab><tab><tab>login_response = {<nl><tab><tab><tab><tab><tab> 'error': True, <nl><tab><tab><tab><tab><tab> 'msg': 'Please enter your email address.'<nl><tab><tab><tab><tab>}<nl><tab><tab>  elif not password:<nl><tab><tab><tab><tab>login_response = {<nl><tab><tab><tab><tab><tab> 'error': True, <nl><tab><tab><tab><tab><tab> 'msg': 'Please enter your password.'<nl><tab><tab><tab><tab>}<nl><tab><tab>  else:<nl><tab><tab><tab><tab>login_response = {<nl><tab><tab><tab><tab><tab> 'error': True, <nl><tab><tab><tab><tab><tab> 'msg': 'Thank You.'<nl><tab><tab><tab><tab>}<nl><nl><tab><tab>  self.write(login_response)","out":"トルネードサーバーへの投稿"}
{"in":"firststring = \"aaccddee\"<nl>secondstring = \"bb\"<nl>combinedstring = firststring[:2] + secondstring + firststring[2:]<nl>print(combinedstring)","out":"Pythonで大きな文字列の間に小さな文字列を追加する方法は？"}
{"in":"from bson.objectid import ObjectId<nl>[i for i in dbm.neo_nodes.find({\"_id\": ObjectId(obj_id_to_find)})]","out":"pymongoでmongodbのObjectIdで検索する。"}
{"in":"print ', '.join(jvm)","out":"Pythonでの出力形式"}
{"in":"import requests<nl>response = requests.get('https:\/\/docs.google.com\/spreadsheet\/ccc?key=0ArM5yzzCw9IZdEdLWlpHT1FCcUpYQ2RjWmZYWmNwbXc&output=csv')<nl>assert response.status_code == 200, 'Wrong status code'<nl>print response.content","out":"pythonでgoogle docsの公開スプレッドシートをcsvにダウンロードする。"}
{"in":"self.fields['author'].queryset = choices","out":"ModelMultipleChoiceFieldの選択肢を変更する方法"}
{"in":"im0 = ax0.imshow(im2, aspect='auto',extent=[-0.15,0.15,0,4])","out":"Matplotlib - 範囲の異なる2種類のカラーマップ。"}
{"in":"from fabric.context_managers import settings<nl>from fabfile import deployFiles, deployConfiguration<nl><nl>with settings(host_string='user@192.168.xx.xx'):<nl><tab> deployFiles()<nl><tab> deployConfiguration('master', 7)","out":"Pythonスクリプト内でFab Fileを起動する。"}
{"in":"df.C[df.B == 'x'] = df.C.shift(-1)","out":"iterrows()を使用せずにデータフレームの値を設定することはできますか？"}
{"in":"def build_tree(nodes):<nl><tab> # create empty tree to fill<nl><tab> tree = {}<nl><nl><tab> # fill in tree starting with roots (those with no parent)<nl><tab> build_tree_recursive(tree, None, nodes)<nl><nl><tab> return tree<nl><nl>def build_tree_recursive(tree, parent, nodes):<nl><tab> # find children<nl><tab> children  = [n for n in nodes if n.parent == parent]<nl><nl><tab> # build a subtree for each child<nl><tab> for child in children:<nl><tab> # start new subtree<nl><tab> tree[child.name] = {}<nl><nl><tab> # call recursively to build a subtree for current node<nl><tab> build_tree_recursive(tree[child.name], child, nodes)","out":"ツリーリストを階層化したdictに変換する。"}
{"in":"line = line.rstrip(\"<nl>\")","out":"Pythonで予期せぬ改行が表示される。"}
{"in":"def isCellNeighbor(c1, c2):<nl><tab>if abs(c1.x - c2.x) == 1: return True<nl><tab>if abs(c1.y - c2.y) == 1: return True<nl><tab>return False","out":"PythonによるDFSグラフ生成"}
{"in":"wx.EVT_ERASE_BACKGROUND","out":"wxpythonのパネルに背景用の画像を入れる。"}
{"in":"x=['#%d' % i for i in range(10)]<nl>['Hey!' if i%3 == 0 else b for  i,b in enumerate(x)]","out":"PythonでリストのN番目の要素をすべて割り当てる"}
{"in":"from django.db.models import Q<nl>from isbnlib import get_isbnlike, is_isbn10, is_isbn13, to_isbn10, to_isbn13<nl><nl>class Question_Admin(admin.ModelAdmin):<nl><tab> def get_search_results(self, request, queryset, search_term):<nl><tab><tab>  queryset, use_distinct = super(Question_Admin, self).get_search_results(request, queryset, search_term)<nl><tab><tab>  isbn = get_isbnlike(search_term, level='normal')<nl><tab><tab>  if isbn:<nl><tab><tab><tab><tab>if is_isbn10(isbn[0]):<nl><tab><tab><tab><tab><tab> converted = to_isbn13(isbn[0])<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> converted = to_isbn10(isbn[0])<nl><tab><tab><tab><tab>queryset |= self.model.objects.filter(Q(isbn=isbn[0]) | Q(isbn=converted))<nl><tab><tab>  return queryset, use_distinct","out":"Djangoのsearch_fieldsにカスタム関数を実装する。"}
{"in":"def f(x,y):<nl><tab> return np.minimum(np.minimum(np.minimum(x,x-y),x**2),y+1)<nl><nl>plt.figure()<nl><nl>x_ = np.linspace(-180, 180, num=200)<nl>y_ = np.linspace(-180, 180, num=200)<nl>x,y = np.meshgrid(x_, y_)<nl><nl>levels = f(x, y)<nl><nl>c = plt.contour(x, y, levels, 50)<nl>plt.colorbar()","out":"\"min \"を使った関数のレベルセット"}
{"in":"typ, data = imap_server.search(None, '(SUBJECT \"Whatever you are searching for\")')","out":"python imaplib gmailを解析する。"}
{"in":"post.user_key = shuffle(users)[0].key","out":"ndbのkeyPropertyを設定する方法"}
{"in":"scikits.timeseries","out":"Pandas DataFrameでnaをどう表現するか？"}
{"in":"from swab import Swab<nl>s = Swab('\/tmp\/.swab-test-data')<nl>s.addexperiment('button-size', ['default', 'larger'], 'order-completed')","out":"PythonでA\/Bスプリットテストを行うためのリソースはありますか？"}
{"in":"from selenium.webdriver.common.action_chains import ActionChains<nl><nl><nl>def hover(self):<nl><tab> wd = webdriver_connection.connection<nl><tab> element = wd.find_element_by_link_text(self.locator)<nl><tab> hov = ActionChains(wd).move_to_element(element)<nl><tab> hov.perform()","out":"Python Webdriverでマウスオーバーする方法"}
{"in":"def addAction(self, action):<nl><tab> # set the Choice in the cell<nl><tab> index = self.list.InsertStringItem(sys.maxint, '')<nl><tab> self.list.SetStringItem(index, self.columns['#'], str(index))<nl><tab> self.list.SetStringItem(index, self.columns['Action'], '')<nl><tab> self.list.SetStringItem(index, self.columns['Parameters'], '')<nl><nl><tab> item = self.list.GetItem(index, self.columns['Action'])<nl><tab> choice = wx.Choice(self.list, -1, name=action.name,<nl><tab><tab><tab><tab> choices=[availableAction.name for availableAction in self.availableActions])<nl><tab> choice.SetClientData(0, index)<nl><tab> choice.Bind(wx.EVT_CHOICE, self.onActionChange)<nl><tab> item.SetWindow(choice, expand=True)<nl><tab> self.list.SetItem(item)<nl><nl><tab> # set the third column's widgets<nl><tab> self.setItemParameters(index, action)<nl><nl><nl>def onActionChange(self, event):<nl><tab> action = copy.deepcopy(self.availableActionsDict[event.GetString()])<nl><tab> self.setItemParameters(event.GetEventObject().GetClientData(0), action)","out":"ultimatelistctrlで選択肢ウィジェットを使う(wxpython)"}
{"in":"forms.py","out":"django のフォームが html テンプレートに渡される方法"}
{"in":"import module1<nl>import unittest<nl><nl>class MyTest(unittest.TestCase):<nl><tab> def setUp(self):<nl><tab><tab>  # Replace othermod.function with our own mock<nl><tab><tab>  self.old_func1 = module1.func1<nl><tab><tab>  module1.func1 = self.my_new_func1<nl><nl><tab> def tearDown(self):<nl><tab><tab>  module1.func1 = self.old_func1<nl><nl><tab> def my_new_func1(self, x):<nl><tab><tab>  \"\"\"A mock othermod.function just for our tests.\"\"\"<nl><tab><tab>  return True<nl><nl><tab> def test_func1(self):<nl><tab><tab>  module1.func1(\"arg1\")","out":"pythonで関数を再定義するにはどうすればよいですか？"}
{"in":"class NoValue:<nl><tab> pass<nl><nl>if someValue is NoValue:<nl><tab> doSomething()","out":"Pythonで絶対にマッチしない変数を定義するにはどうしたらいいでしょうか？"}
{"in":"ser.baudrate = 115200","out":"デバイスに接続した状態でpySerialでボーレートを変更する？"}
{"in":"import subprocess<nl>script = \"~\/full_path_to_your_bash_script.sh\"<nl># Uncomment following line to ensure execution by bash and remove potential problems with permissions.<nl>#script = \"bash \"+script<nl># Commands to call (add some more if you remember any):<nl>commands = [<nl><tab> ['gnome-terminal', '-x', script],<nl><tab> # xterm is usually present:<nl><tab> ['xterm', '-e', script],<nl><tab> ['rxvt', '-e', script]<nl><tab> ]<nl>ok = 0<nl>for command in commands:<nl><tab> try:<nl><tab><tab>  subprocess.call(command)<nl><tab><tab>  ok = 1; break<nl><tab> except OSError, e:<nl><tab><tab>  if e.errno==2: continue # No such file or directory - skip non-existing terminal and try another<nl><tab><tab>  raise # Some other OSError occurred<nl><tab> except: raise<nl>if not ok: raise RuntimeError, \"No terminal available!\"","out":"Python subprocess.call はターミナルから実行すると bash スクリプトを実行するが、debian メニューから実行すると実行しない。"}
{"in":"def zip2tar(zipname, tarname):<nl><tab> zipf = zipfile.ZipFile(zipname, 'r')<nl><tab> tarf = tarfile.TarFile(tarname, 'w')<nl><tab> timeshift = int((datetime.datetime.now() -<nl><tab><tab><tab><tab><tab><tab><tab>datetime.datetime.utcnow()).total_seconds())<nl><tab> for zipinfo in zipf.infolist():<nl><tab><tab>  tarinfo = tarfile.TarInfo()<nl><tab><tab>  tarinfo.name = zipinfo.filename<nl><tab><tab>  tarinfo.size = zipinfo.file_size<nl><tab><tab>  tarinfo.mtime = calendar.timegm(zipinfo.date_time) - timeshift<nl><tab><tab>  if zipinfo.internal_attr & 1:<nl><tab><tab><tab><tab>tarinfo.mode = 0666<nl><tab><tab><tab><tab>tarinfo.type = tarfile.REGTYPE<nl><tab><tab>  else:<nl><tab><tab><tab><tab>tarinfo.mode = 0777<nl><tab><tab><tab><tab>tarinfo.type = tarfile.DIRTYPE <nl><tab><tab>  infile = zipf.open(zipinfo.filename)<nl><tab><tab>  tarf.addfile(tarinfo, infile)<nl><tab> zipf.close()<nl><tab> tarf.close()","out":"python 圧縮されたZIPを解凍されたTARに変換する。"}
{"in":"import networkx as nx<nl><nl># one of your examples<nl>g1 = nx.Graph([(1,3), (15,21), (1,10), (57,66), (76,85), (66,76)])<nl>print nx.connected_components(g1) # [[57, 66, 76, 85], [1, 10, 3], [21, 15]]<nl><nl># my own test case<nl>g2 =  nx.Graph([(1,2),(2,10), (20,3), (3,4), (4,10)])<nl>print nx.connected_components(g2) # [[1, 2, 3, 4, 10, 20]]","out":"python: リストをクラスタにマージする方法は？"}
{"in":"tag_dic[i] = None","out":"Pythonのforループで辞書に項目を追加する方法は？"}
{"in":"data1 = u'NAME: abc<nl>School Name: CD<nl>________________<nl>ENG: B<tab><nl>Mat: B<tab>'<nl><nl>import re<nl>from itertools import izip<nl>data2 = re.split(r'[:<nl>________________]+',data1)<nl>i = iter(data2)<nl>ans = dict(izip(i, i))","out":"python Unicode文字列分割\/json変換"}
{"in":"next_page_number = '1'<nl>print(next_page_number, type(next_page_number))  #output: 1, <class 'str'><nl># set str explicit or call int(next_page_number)<nl>if next_page_number == '1': <nl><tab> print('yes')<nl>else:<nl><tab> print('no')","out":"href内のテキストを選択する"}
{"in":"newlist = []<nl><nl>for i in filter_words:<nl><tab> if i not in skip_words:<nl><tab><tab>  newlist.append(i)","out":"2つのリストを比較し、不要な単語を削除する"}
{"in":"np.fft.ifft(x, axis=1)","out":"Python\/Numpyによる指定次元をまたぐ逆離散フーリエ変換"}
{"in":"data = \"\"\"<nl>1100.21 57.66<tab>1.8<nl>1157.88 57.79<tab>1.7<nl>1272.85 58.03<tab>1.67<nl>1330.34 58.22<tab>1.67<nl>1389.<tab>57.69<tab>1.7<nl>1590.<tab>57.01<tab>1.67<nl>1820.<tab>55.42<tab>1.6<nl>2049.<tab>59.35<tab>1.5<nl>2308.<tab>58.32<tab>1.56<nl>2596.<tab>57.28<tab>1.6<nl>2711.<tab>57.13<tab>1.368<nl>2826.<tab>55.61<tab>1.33<nl>2883.<tab>54.79<tab>1.315<nl>2940.<tab>53.78<tab>1.325<nl>3001.<tab>54.41<tab>1.3<nl>3117.<tab>55.93<tab>1.2495<nl>3291.<tab>57.15<tab>1.28<nl>3377.<tab>58.05<tab>1.25<nl>3522.<tab>58.41<tab>1.31<nl>3725.<tab>57.61<tab>1.31<nl>3899.<tab>53.55<tab>1.195<nl>4015.<tab>51.22<tab>1.178<nl>4188.<tab>50.89<tab>1.185\"\"\"<nl>data = np.array([line.split() for line in data.strip().split('<nl>')], dtype='f8')<nl>x, y, z = data[:, 0], data[:, 1], data[:, 2]<nl><nl>def obj(a):<nl><tab> z_hat = a[0]*y**a[1]*x**a[2]+a[3]*x**a[4]<nl><tab> return ((z-z_hat)**2).sum()<nl><nl>import scipy.optimize as opt<nl>print opt.minimize(obj, np.ones(5))","out":"Pythonで任意のユーザー定義目的関数にCMA-ES最適化を適用する方法とは？"}
{"in":"#! \/usr\/bin\/python<nl><nl>import sys<nl>import pycurl<nl><nl>class Test:<nl><tab> def __init__(self):<nl><tab><tab>  self.contents = ''<nl><nl><tab> def body_callback(self, buf):<nl><tab><tab>  self.contents = self.contents + buf<nl><nl>sys.stderr.write(\"Testing %s<nl>\" % pycurl.version)<nl><nl>t = Test()<nl>c = pycurl.Curl()<nl>c.setopt(c.URL, 'http:\/\/curl.haxx.se\/dev\/')<nl>c.setopt(c.WRITEFUNCTION, t.body_callback)<nl>c.perform()<nl>c.close()<nl><nl>print(t.contents)","out":"CURLと同等のpythonコードを実現する方法"}
{"in":"textfile=open('somefile.txt','r')<nl>text_list=[line.split(' ') for line in textfile]<nl>unique_words=[word for word in text_list if word not in unique_words]<nl>print(len(unique_words))","out":"Pythonで特定のディレクトリにあるテキストファイルのユニークワードを数えるにはどうすればよいですか？"}
{"in":"def get_vlan_iface():<nl><tab> while True:<nl><tab><tab>  vlan = raw_input (\"what VLAN ID do you want to add? \"),<nl><tab><tab>  iface = raw_input(\"what interface do you want to add the VLAN to? (e.g. eth10)\")<nl><tab><tab>  print \"So we are adding VLAN %r to interface %r\" % (vlan, interface)<nl><nl><tab><tab>  if raw_input(\"Are the details above correct? (Yes\/No)>\")[0].lower() == \"y\":<nl><tab><tab><tab><tab> return vlan,iface<nl><tab><tab>  print \"Please Fix Your Entries!\"<nl><nl>vlan,iface = get_vlan_iface()","out":"Pythonのwhileループでコードの特定のポイントに戻る。"}
{"in":"import subprocess<nl><nl>cmd = subprocess.Popen(['cd', '\/home\/time\/tmprcc;', 'ino', 'build;',<nl><tab><tab><tab><tab><tab><tab><tab><tab>'ino', 'upload;'], stdout=subprocess.PIPE)<nl><nl>while cmd.poll() is None:<nl><tab> new_output = cmd.stdout.readline()<nl><tab> do_something_function(new_output)","out":"os.systemの出力をWebアプリに送信する。"}
{"in":"scipy.signal.deconvolve()","out":"2次元配列のデコンボリューション"}
{"in":"d = g.degree_property_map(\"out\", weight)<tab># weight is an edge property map<nl>bins = linspace(d.a.min(), d.a.max(), 40)  # linear bins<nl>h = vertex_hist(g, d, bins)","out":"Pythonのgraph_toolで重み付けされた度数分布"}
{"in":"if len(x) == len(set(x)):<nl><tab> print \"all elements are unique\"<nl>else:<nl><tab> print \"elements are not unique\"","out":"リストのすべての要素が異なることを保証するための最もpythonicな方法は何ですか？"}
{"in":"import re<nl><nl>BAD_WORDS = [\"spam\", \"ham\"]<nl>BAD_WORDS_RE = re.compile(r\"\\b(%s)\\b\" % \"|\".join(BAD_WORDS))<nl><nl>for i, line in enumerate(open(\"file.txt\").readlines()):<nl><tab> words = set(BAD_WORDS_RE.findall(line))<nl><tab> if words:<nl><tab><tab>  print \"Found the following words on line %i: %s\" % (i + 1, \", \".join(words))<nl><tab><tab>  print line","out":"python django キーワードのリストに対してファイルを分析する。"}
{"in":"from PIL import Image<nl>import images2gif as i2g<nl>images = i2g.readGif('Animated.gif', False)<nl>watermark = Image.open(\"Watermark.gif\")<nl>for i in images: i.paste(watermark, (1, 1))<nl><nl>i2g.writeGif('Out.gif', images, 0.5) # You may wish to play with the timing, etc.<nl>exit()","out":"Python PILでGIFに透かしを入れる"}
{"in":"with open('your_file', 'rt') as filehandle:<nl>  lines = filehandle.readlines()[4:]<nl><nl>for line in lines:<nl><tab> print line<nl><tab> #do something","out":"pythonで特定の行から先を読み込む"}
{"in":"file = tkFileDialog.askopenfile(parent=root,mode='rb',filetypes=[('Subrip Subtitle File','*.srt')],title='Choose a subtitle file')<nl>abs_path = os.path.abspath(file.name)","out":"tkFileDialogを使ってファイルの絶対パスを取得する方法は？"}
{"in":"def getDocPrefixes(self, deviceId):<nl><tab> f = sq.sql.func.doc_codes(deviceId, type_=types.String)<nl><nl><tab> columns = [<nl><tab><tab>  sq.Column('name', types.String),<nl><tab><tab>  sq.Column('sufix', types.String)<nl><tab> ]<nl><nl><tab> with self.con.begin():<nl><tab><tab>  return [dict(x.items()) for x in self.con.execute<nl><tab><tab><tab><tab>(<nl><tab><tab><tab><tab><tab> select(columns).<nl><tab><tab><tab><tab><tab> select_from(f)<nl><tab><tab><tab><tab>).fetchall()]","out":"psqlをpostgresで使用した場合、sqlalchemyから「ゴースト」ROLLBACKが発生しますが、そうではありません。"}
{"in":"def Main():<nl><tab> Class_A_Input = int(raw_input('Enter Class A tickets sold: '))<nl><tab> total_profit(Class_A_Input)<nl><nl>def total_profit(Class_A_Tickets):<nl><tab> print (Class_A_Tickets * 15)<nl><tab> a = Class_A_Tickets * 15<nl><tab> b = str(a)<nl><tab> text_file = open('test.txt', 'w')<nl><tab> text_file.write(b)<nl><tab> text_file.close()<nl><nl>Main()","out":"Python - 関数をテキスト文書に送信する"}
{"in":"def fchar(ch,mi):<nl><tab> global numLi<nl><tab> fc=ch<nl><tab> li=\"\"<nl><tab> for c in infected[mi:]:<nl><tab><tab>  if fc==c :<nl><tab><tab><tab><tab>li+=fc<nl><tab><tab><tab><tab>mi = mi+1<nl><tab><tab>  else:<nl><tab><tab><tab><tab>break<nl><nl><tab> if mi<len(infected) :<nl><tab><tab>  return li+\" \"+fchar(infected[mi],mi)<nl><tab> else:<nl><tab><tab>  return li<nl><nl>infected =input(\"Enter DNA sequence<nl>\") ;#\"AAATTTTTTTTGCCCCCCA\"<nl>x=fchar(infected[0],0)<tab><tab><tab><nl>newSet = x.split(' ')<nl>print(newSet)","out":"Pythonで文字列を分割して、同じ文字だけを含むようにする方法"}
{"in":"option = 0<nl>comicdb = []<nl><nl>while option != 3:<nl><tab> print \"--------------------------\"<nl><tab> print \"1. Add a New Comic Book\"<nl><tab> print \"2. Print the Database\"<nl><tab> print \"3. Quit\"<nl><tab> option = int(raw_input(\"Pick an Option: \"))<nl><tab> if option == 1:<nl><tab><tab>  title = raw_input(\"Comic Book Title: \")<nl><tab><tab>  issue = int(raw_input(\"Issue Number: \"))<nl><tab><tab>  publisher = raw_input(\"Publisher: \")<nl><tab><tab>  temp_list = []<nl><tab><tab>  temp_list.append(title)<nl><tab><tab>  temp_list.append(issue)<nl><tab><tab>  temp_list.append(publisher)<nl><tab><tab>  comicdb.append(temp_list)<nl><tab><tab>  print comicdb","out":"リストに値を追加する"}
{"in":"pycassa.connect_thread_local()","out":"Pylonsアプリ内でCassandraに接続する方法とは？"}
{"in":"auth_token_key = request.get('auth_token_key')","out":"リダイレクトURLの情報を解析する"}
{"in":"def somestring(**kwargs):<nl>  return ', '.join('%s=%r' % x for x in kwargs.iteritems())","out":"辞書をキーワード引数の文字列に変換するにはどうすればよいですか？"}
{"in":"new_col_list = ['city','state','regions','country']<nl>for n,col in enumerate(new_col_list):<nl><tab> df[col] = df['location'].apply(lambda location: location[n])<nl><nl>df = df.drop('location',axis=1)","out":"pandasでタプルから複数のカラムへ"}
{"in":"for file in list_file:<nl>  outStat=\"path_for_sum_output\"<nl>  arcpy.Statistics_analysis(file,outStat, [[\"field_value\", \"SUM\"]])<nl>  rowsStat = arcpy.SearchCursor(outStat)<nl>  for row in rowsStat:<nl><tab>  sum=row.getValue('Sum_field_value')<nl><nl>  #formate name of file so the format match with field ID_old of the feature class<nl>  namelist=file.split('_')<nl>  myname=' '.join(namelist)<nl>  print myname <nl><nl>  fc='big_file'<nl>  cursor=arcpy.da.UpdateCursor(fc,['Sum_value'], \"ID_old = '\" +myname+ \"'\")<nl>  for row in cursor:<nl><tab><tab>row[0]= sum<nl><tab><tab>cursor.updateRow(row)<nl><tab><tab>print row","out":"python-in-arcmap, 行IDを使用してクエリを実行し、別のフィーチャクラスからフィールド値を検索する方法。"}
{"in":"datetime.strptime(str(newdate),\"%Y-%m-%d %H:%M:%S\")","out":"datetime型の時間を置き換える python"}
{"in":"class ProductFactory(factory.django.DjangoModelFactory):<nl><tab> FACTORY_FOR = Product <nl><nl><tab> name = \"test product\"<nl><tab> offer1 = factory.RelatedFactory(OfferFactory, 'product')<nl><tab> offer2 = factory.RelatedFactory(OfferFactory, 'product') # add a second offer<nl><tab> offer3 = factory.RelatedFactory(OfferFactory, 'product') # add a third offer<nl><tab> merchant1 = factory.RelatedFactory(MerchantFactory, 'product')<nl><tab> merchant2 = factory.RelatedFactory(MerchantFactory, 'product') # add a second merchant<nl><tab> merchant3 = factory.RelatedFactory(MerchantFactory, 'product') # add a third\"","out":"factory_boy: 複数の依存オブジェクトを追加"}
{"in":"if not os.path.exists(os.path.join(template_path, page)): <nl><tab> self.abort(404)","out":"特定のルートにマッチしたときに404を表示する"}
{"in":"super()","out":"python 同じメソッド名で異なるパスから複数の継承を行う。"}
{"in":"return Dept.objects.filter(employees_set__name='XYZ')","out":"python djangoで外部キーの逆引きをする。"}
{"in":"from BeautifulSoup import BeautifulStoneSoup<nl>soup = BeautifulStoneSoup(xml_string)<nl>whatyouwant = soup.find('second-tag')['status']","out":"XML Python ElementTreeを使用して多数の属性の中から1つを選択する。"}
{"in":"def download_paper(request, paper_pk):<nl><tab>  paper = get_object_or_404(Paper, pk=paper_pk) # get your model instance<nl><tab>  # also check permissions on paper, if necessary<nl><tab>  with paper.pdf_file_field.open(\"r\") as fd:<nl><tab><tab><tab>response = HttpResponse(fd.read(), content_type=\"application\/pdf\")<nl><tab><tab><tab>response['Content-Disposition'] = 'attachment; filename=\"%s\"' % paper.pdf_file_field.name<nl><tab><tab><tab>return response","out":"djangoのサイトに投稿されたドキュメントを再ダウンロードできるようにする必要があります。"}
{"in":"[i['x'] for i in a]","out":"パイソンを使って正しいことをするための最良の方法"}
{"in":"import matlplotlib<nl>matplotlib.use('TkAgg')","out":"Pythonでcolorbarを使ったグレイスケールのカラーマップを作成する。"}
{"in":"from logging import Handler<nl><nl>class DBHandler(Handler,object):<nl><tab> model_name = None<nl><nl><tab> def __init__(self, model=\"\"):<nl><tab><tab>  super(DBHandler,self).__init__()<nl><tab><tab>  self.model_name = model<nl><nl><tab> def emit(self,record):<nl><tab><tab>  # instantiate the model<nl><tab><tab>  try:<nl><tab><tab><tab><tab>model = self.get_model(self.model_name)<nl><tab><tab>  except:<nl><tab><tab><tab><tab>from logger.models import GeneralLog as model<nl><nl><tab><tab>  log_entry = model(level=record.levelname, message=self.format(record))<nl><nl><nl><tab><tab>  log_entry.save()<nl><nl><tab> def get_model(self, name):<nl><tab><tab>  names = name.split('.')<nl><tab><tab>  mod = __import__('.'.join(names[:-1]), fromlist=names[-1:])<nl><tab><tab>  return getattr(mod, names[-1])","out":"カスタムPythonデータベースロガー、循環インポートを有する。"}
{"in":"driver.find_element_by_xpath(\"\/\/option[@value='\" + state + \"']\").click()","out":"Pythonでxpathで変数を使う Selenium"}
{"in":"import curses<nl>oScreen = curses.initscr()<nl>curses.noecho()<nl>curses.curs_set(0)<nl>oScreen.keypad(1)<nl>oScreen.addstr(\"Woooooooooooooo<nl><nl>\",curses.A_BOLD)<nl>while True:<nl><tab> oEvent = oScreen.getch()<nl><tab> if oEvent == ord(\"q\"):<nl><tab><tab>  break<nl>curses.endwin()","out":"nanoのようなインターフェイスを持つPython端末アプリケーション"}
{"in":"ylabel('Soil Moisture Sensitivity,<nl>(0.01 K m$^3$ m$^{-3}$)', multialignment='center')","out":"matplotlibで線が途切れた軸ラベルを中央揃えする"}
{"in":"import sqlite3 as sql<nl><nl>con = sql.connect(r\"E:\\Users.db\")<nl>c = con.cursor()<nl>con.row_factory = sql.Row<nl>username = input(\"What is your username: \")<nl><nl>readdata = input(\"Select the message you wish to read: \")<nl>c.execute(\"SELECT Sender, Recipient, Subject, Message FROM Mail WHERE (Subject LIKE ?) AND<tab>(Recipient LIKE ?)\", (readdata, username))<nl><nl>component = c.fetchall()<nl><nl>for row in component:<nl><tab> (sent, rec, subject, msg) = tuple(row)<nl><tab> print()<nl><tab> print(\"Sender: \" + sent)<nl><tab> print(\"Recipient: \" + rec)<nl><tab> print(\"Subject: \" + subject)<nl><tab> print()<nl><tab> print(\"Message: \" + msg)","out":"pythonでsqliteテーブルから生データを読み込む"}
{"in":"from OpenGL.GL import *<nl>from OpenGL.GLUT import *<nl>from OpenGL.GLU import *<nl><nl>import math<nl><nl>def initFun():<nl><tab> glClearColor(1.0,1.0,1.0,0.0)<nl><tab> glColor3f(0.0,0.0, 0.0)<nl><tab> glMatrixMode(GL_PROJECTION)<nl><tab> glLoadIdentity()<nl><tab> gluOrtho2D(0,700,0,700)<nl><nl>def displayFun():<nl><tab> glClear(GL_COLOR_BUFFER_BIT)<nl><tab> glColor3f(0.0,0.0,1.0)<nl><tab> xpts=[]<nl><tab> ypts=[]<nl><tab> N=len(newlist)<nl><tab> for i in range(0,N):<nl><tab><tab>  xpts.append(700+100-float(newlist[i][4])*20)<nl><tab><tab>  ypts.append(700+1300-float(newlist[i][5])*20)<nl><nl><tab> glBegin(GL_POINTS)<nl><tab> for j in range(0,N):<tab><tab>  <nl><tab><tab>  glVertex2f(xpts[j],ypts[j])<nl><nl><tab> glEnd()<nl><tab> glFlush()<nl><nl>if __name__ == '__main__':<nl><tab> glutInit()<nl><tab> glutInitWindowSize(700,700)<nl><tab> glutCreateWindow(\"My Display\")<nl><tab> glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)<nl><tab> glutDisplayFunc(displayFun)<nl><tab> initFun()<nl><tab> glutMainLoop()","out":"OpenGlでプロットされた点間の距離をリサイズ、スケール、拡大するにはどうすればよいですか？"}
{"in":"s = raw_input(\"Octal?  \")<nl>digits = map(int, s)<nl>lookup = ['','x','w','wx','r','rx','rw','rwx']<nl>perms = [lookup[d] for d in digits]<nl>rights = ['{}={}'.format(*x) for x in zip('ugo', perms)]<nl>print ','.join(rights)","out":"Pythonでリスト処理を簡略化するには？"}
{"in":"import numpy as np<nl>import sklearn.tree<nl>clf = sklearn.tree.DecisionTreeClassifier()<nl>clf.fit(X,y)<nl>clf.tree_.apply(np.asfortranarray(X.astype(sklearn.tree._tree.DTYPE)))","out":"scikit-learnのDecisionTreeClassifierを使用してクラスタリングする。"}
{"in":"yy = numpy.tan(2*(x - numpy.pi\/2))<nl>threshold = 10000<nl>yy[yy>threshold] = numpy.inf<nl>yy[yy<-threshold] = numpy.inf<nl>ax.plot(x, yy, linewidth=1.2, color=\"black\")","out":"matplotlibでtanをグラフ化する。"}
{"in":"if 1: import views","out":"PyDevが特定のインポートを移動しないようにする"}
{"in":"imgsize = (int(self.viewport.cget('width')) - 1,int(self.viewport.cget('height')) - 1)<nl># limit the draggable mouse area to just the image dimensions<nl>if event.x < 4:<nl><tab> currentx = 4<nl>elif event.x > imgsize[0]:<nl><tab> currentx = imgsize[0]<nl>else:<nl><tab> currentx = event.x<nl>if event.y < 4:<nl><tab> currenty = 4<nl>elif event.y > imgsize[1]:<nl><tab> currenty = imgsize[1]<nl>else:<nl><tab> currenty = event.y","out":"Python tkinter: キャンバス内でマウスカーソルを制限する方法は？"}
{"in":"d = defaultdict(int)<nl>for lst in lists:<nl><tab>d[len(lst)] += 1","out":"pythonでリストのリストの統計情報を取得するには？"}
{"in":"c_solutions = [sol[c] for sol in solutions]","out":"Sympy - solve()の解の単一部品にアクセスする。"}
{"in":"from django.contrib.auth.decorators import login_required<nl>from django.shortcuts import render<nl><nl>from your_app.models import ToDo<nl><nl>@login_required<nl>def todos_for_user(request):<nl><tab> todos = ToDo.objects.filter(user=request.user)<nl><tab> return render(request, 'todos\/index.html', {'todos' : todos})","out":"django: 各ユーザーのデータを分離する"}
{"in":"L = [1,2,3,4,5,6,7,8,9,0]<nl>a = np.random.ranint(0,50,(35,10))<nl><nl># identify location of value in array that are in L<nl>ix = np.in1d(a.ravel(), L).reshape(a.shape)","out":"Python: リスト内のすべての要素の位置を、与えられた異なるリストで取得する高速な方法"}
{"in":"import subprocess<nl><nl>hostname = \"192.168.1.4\"<nl>output = subprocess.Popen([\"ping\",\"-c\",\"5\", hostname],stdout = subprocess.PIPE).communicate()[0]<nl><nl>if ('100% packet loss' in output):<nl><tab> print(\"Offline\")","out":"pythonを使ってローカルネットワークにpingを打つには？"}
{"in":"from Tkinter import *<nl><nl>root = Tk()<nl>t = Text(root)<nl>t.pack()<nl>t.insert(END, '''\\<nl>blah blah blah Failed blah blah<nl>blah blah blah Passed blah blah<nl>blah blah blah Failed blah blah<nl>blah blah blah Failed blah blah<nl>''')<nl>t.tag_config('failed', background='red')<nl>t.tag_config('passed', background='blue')<nl><nl>def search(text_widget, keyword, tag):<nl><tab> pos = '1.0'<nl><tab> while True:<nl><tab><tab>  idx = text_widget.search(keyword, pos, END)<nl><tab><tab>  if not idx:<nl><tab><tab><tab><tab>break<nl><tab><tab>  pos = '{}+{}c'.format(idx, len(keyword))<nl><tab><tab>  text_widget.tag_add(tag, idx, pos)<nl><nl>search(t, 'Failed', 'failed')<nl>search(t, 'Passed', 'passed')<nl><nl>#t.tag_delete('failed')<nl>#t.tag_delete('passed')<nl><nl>root.mainloop()","out":"キーワードを使ったTkinterのテキストハイライト（特定の行をハイライト"}
{"in":"def f(s, n):<nl><tab> return ' '.join(s.split()[:n])","out":"Pythonで単語数を切り詰めるにはどうすればよいですか？"}
{"in":"print sum(map(len,dic.itervalues()))","out":"dictの中のリスト内の変数の総量を取得するpythonicな方法はありますか？"}
{"in":"searchindexnodes = {}<nl>searchindexnodes[1036592] = 'Apparel'<nl>searchindexnodes[672123011] = 'Apparel'<nl>searchindexnodes[165796011] = 'Baby'","out":"Pythonでキーが未定義の配列を定義するにはどうすればよいですか？"}
{"in":"s = Sound() <nl>s.read('sound.wav') <nl>s.play()","out":"Pythonで音を鳴らす"}
{"in":"numpy.random.seed(42)","out":"同じランダムなnumpy配列を一貫して作成する。"}
{"in":"M = 20<nl>N = 20<nl><nl>a = np.random.normal(0, 1, (N, M))<nl>b = np.random.normal(0, 3, N)[:, None]<nl><nl>print np.var(a + b, axis=0)<nl>print np.var(a + b, axis=1)","out":"各軸に沿って異なる分散を持つランダムなガウス行列を生成する方法"}
{"in":"if charint >= 65 and charint <=90:<nl><tab><tab>  cipher_int = ((charint-65 + k) % 26)+65<nl><tab><tab>  code_char = chr(cipher_int)<nl><tab><tab>  print code_char,<nl><nl>elif charint >= 97 and charint <=122:<nl><tab> cipher_int = ((charint-97 + k) % 26)+97<nl><tab> code_char = chr(cipher_int)<nl><tab> print code_char,<nl><nl><nl>else:<nl><tab> print char,","out":"Pythonです：シーザー暗号、If文とelse文の両方が同時にTrue？"}
{"in":"boto.s3.key.Key","out":"botoのキーオブジェクトをDjangoのModelフィールドとして保存するにはどうしたらいいでしょうか？"}
{"in":"import win32api<nl>import win32con<nl>import ctypes<nl><nl>ctypes.windll.gdi32.AddFontResourceA(\"C:\\\\Users\\\\Username\\\\Desktop\\\\fontname.ttf\")<nl>win32api.SendMessage(win32con.HWND_BROADCAST, win32con.WM_FONTCHANGE)","out":"pythonでWindowsにTTFフォントをインストールする。"}
{"in":"df.groupby(['tags_0', 'gender']).gender.count().unstack().plot(kind='barh', legend=False, color=['r', 'g', 'b'])","out":"Pandasでグループ化された棒グラフの色を変更するにはどうすればよいですか？"}
{"in":"from numpy import array, dot<nl>dot(array([0.5, -1]), array([[1, 2, 3], [4, 5, 6]]))<nl># array([-3.5 -4. -4.5])","out":"Numpy- 行列の重み付けと合計を行う．"}
{"in":"# METHOD 1<nl>FA_dict1 = {d:2 for v in FA[0][u'child'] for d in v.values()}<nl>FA_dict1.update({FA[0][u'pdesc']: 2})<nl><nl><nl># METHOD 2<nl>from itertools import chain<nl>FA_dict = {d:2 for v in FA[0][u'child'] for d in chain(v.values(), [FA[0][u'pdesc']])}<nl><nl><nl># METHOD 3<nl>FA_DICT = {d:2 for v in FA[0][u'child'] for d in list(v.values())+[FA[0][u'pdesc']]}","out":"辞書理解におけるネストされたループ"}
{"in":"text = \"\"\" name = Kurradu<nl> image =<nl> image_size =<nl> producer = P. Kiran<nl> writer =<nl> starring = Varun Sandesh,Neha Sharma<nl> music = Achu<nl> cinematography = Sarvesh Murari<nl> editing =<nl> distributor =<nl> released = 12 November 2009<nl> studio =<nl> country = IND\"\"\"<nl><nl><nl>d = dict(map(str.strip, line.split('=', 1)) for line in text.splitlines())<nl><nl><nl># d is now:<nl><nl>{'cinematography': 'Sarvesh Murari',<nl> 'country': 'IND',<nl> 'distributor': '',<nl> 'editing': '',<nl> 'image': '',<nl> 'image_size': '',<nl> 'music': 'Achu',<nl> 'name': 'Kurradu',<nl> 'producer': 'P. Kiran',<nl> 'released': '12 November 2009',<nl> 'starring': 'Varun Sandesh,Neha Sharma',<nl> 'studio': '',<nl> 'writer': ''}","out":"テキストをdictに変換する"}
{"in":"text = 'According to James, \"we do not know\" the source of the problem, \"we are clueless\".'<nl>re.sub('\".+?\"', '', text)","out":"引用符の中のテキストをすべて削除するPython Reg式"}
{"in":"L = [('a', [[0],[1]]), ('b', [[2],[3]]), ('c', [[4],[5]])]<nl>prev = []<nl>for i,el in enumerate(L):<nl><tab> el_new = (el[0], prev + el[1])<nl><tab> prev += el[1]<nl><tab> L[i] = el_new","out":"python - 前方反復 \/ タプルのリストを拡張する"}
{"in":"class Nationality:<nl><tab><tab>  Poland='PL'<nl><tab><tab>  Germany='DE'<nl><tab><tab>  France='FR'<nl><nl><tab><tab>  def convertToCodeFromName(name):<nl><tab><tab><tab><tab><tab> return getattr( Nationality, name )<nl><nl><tab><tab>  def convertToNameFromCode(code):<nl><tab><tab><tab><tab><tab> lookFor = None<nl><nl><tab><tab><tab><tab><tab> for member in dir( Nationality ):<nl><tab><tab><tab><tab><tab><tab><tab><tab>if ( getattr( Nationality, member ) == code ):<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  lookFor = member<nl><tab><tab><tab><tab><tab> return lookFor<nl><nl>print( Nationality.convertToCodeFromName( \"Poland\" ) )<nl>print( Nationality.convertToNameFromCode( \"PL\" ) )","out":"PythonのEnumコンバータ"}
{"in":"return ['']","out":"uwsgiとwebsocketで接続を閉じる"}
{"in":"#!\/usr\/bin\/python26\/python","out":"異なるバージョンのpythonを実行するためにFast CGIを変更する。"}
{"in":"x = column_width - image_width<nl><nl>sheet.insert_bitmap(filepath_to_bmp, row, col, x)","out":"Python XLWT - セルの右上隅に整列した画像を挿入する"}
{"in":"# reset the `totalintron` for the current `exonnumber`<nl>totalintron = 0<nl><nl># only iterate `exonnumber - 1` (which is guaranteed to be len(y) - 1 at max)<nl>for index in range(exonnumber - 1):<nl><tab> first_max = max(y[index])<nl><tab> second_min = min(y[index + 1])<nl><tab> intron = second_min - first_max<nl><tab> # don???t print `intron`, we only care about the total<nl><tab> totalintron = totalintron + intron<nl><nl>print totalintron","out":"ループ内で合計する数値の量を指定する"}
{"in":"import re<nl>import json<nl>for line in logs:<nl><tab> for t in re.finditer(r\"\\{.*\\}\", line):<nl><tab><tab>  try:<nl><tab><tab><tab><tab>json.loads(t.group())<nl><tab><tab>  except ValueError:<nl><tab><tab><tab><tab>pass","out":"pythonを使用して生のテキストファイルからJSONオブジェクトを読み取る方法"}
{"in":"import parms<nl><nl>parms.foo<nl>parms.bar<nl>parms.baz","out":"パラメータの束を辞書としてインポートする？"}
{"in":"class TaskForm(forms.ModelForm):<nl><tab>class Meta:<nl><tab><tab>model = Task<nl><nl><tab>def __init__(self, *args, **kwargs):<nl><tab><tab>super(TaskForm, self).__init__(*args, **kwargs)<nl><tab><tab>self.fields['prerequisites'].queryset = Task.objects.filter(job=self.instance.job)","out":"Django: 自己へのManyToManyFieldのマッピングに「同じ親」制約を適用する。"}
{"in":"__init__.py","out":"models.pyからインポートする"}
{"in":"# reading from file:<nl>with open('cities.txt') as f:<nl><tab> lines = f.readlines()<nl><nl># pre-processing<nl>indices = {line.split()[0]: i for i, line in enumerate(lines)}<nl>distances = [line.split()[1:] for line in lines]<nl><nl>#user input:<nl>start = input(\"Please enter starting point: \")<nl>end = input(\"Now please enter ending point: \")<nl><nl># evaluation:<nl>distance = distances[indices[start]][indices[end]]<nl><nl># output:<nl>print(\"Distance between {start} and {end} is {distance} km.\".format(**locals()))","out":"Python 3: リストからリスト内の情報を取得する"}
{"in":"v = 8.836333333333339<nl>s = str(v)<nl>print s[:s.find('.')+3]<nl><nl># prints 8.83","out":"丸めずに表示する小数点以下の桁数を制限するにはどうしたらよいですか？"}
{"in":"def checkJson(jsonContents):<nl><tab> bodyFlag = True if \"body\" in jsonContents[\"objects\"][0][\"data\"] and jsonContents[\"objects\"][0][\"data\"][\"body\"] == \"Present\" else False<nl><tab> codeFlag = True if \"code\" in jsonContents[\"objects\"][0][\"data\"] and jsonContents[\"objects\"][0][\"data\"][\"code\"] == 200 else False<nl><nl><tab> return bodyFlag or codeFlag<nl><nl>print checkJson(result)","out":"キー\/バリューがJSONであるかどうかをチェックする。"}
{"in":"check = \"asdf\"<nl>checkLower = check.lower()<nl><nl>print any(checkLower == val.lower() for val in [\"qwert\", \"AsDf\"])<nl><nl># prints true","out":"Python：CaSEに関係なく、値がリストにあるかどうかをチェックする。"}
{"in":"from BeautifulSoup import BeautifulSoup<nl>soup = BeautifulSoup(open(\"file.html\",'r').read())<nl>cols = [header.string for header in soup.find('thead').findAll('th')]<nl>col_idx = cols.index('Username')<nl>col_values = [td[col_idx].string for td in [tr.findAll('td') for tr in soup.find('tbody').findAll('tr')]]<nl>print col_values","out":"BeautifulSoup 特定のカラムの値をすべて取得する。"}
{"in":"segment='sessions::condition::ga:pagePath=@error=PAYPAL'","out":"Python APIでこのGoogleアナリティクスのセグメントを設定する方法"}
{"in":"import os<nl>import sys<nl><nl><nl>def main():<nl><tab> if os.getpgrp() == os.tcgetpgrp(sys.stdout.fileno()):<nl><tab><tab>  print 'Running in foreground.'<nl><tab> else:<nl><tab><tab>  print 'Running in background.'<nl><nl><nl>if __name__ == '__main__':<nl><tab> main()","out":"pythonスクリプトがバックグラウンドプロセスとして実行されているかどうかを検出する方法"}
{"in":"x=int(a,2)<nl>num_bits = 10<nl>print x - (1 << num_bits)","out":"Python - 2の補数を実装するための最も効果的な方法？"}
{"in":"import csv<nl><nl>dictionary = {}<nl>with open('data.csv', 'r') as f:<nl><tab> reader = csv.DictReader(f)<nl><tab> for row in reader:<nl><tab><tab>  dictionary[row['Key']] = row['Value']","out":"エクセルからPython辞書"}
{"in":"res = {}<nl>for item in l:<nl><tab> res.setdefault(item['a'], []).append(item)","out":"Python: dictでリストアイテムをグループ化する。"}
{"in":"import sys<nl>import time<nl><nl>def spinning_cursor():<nl><tab> while True:<nl><tab><tab>  for cursor in '|\/-\\\\':<nl><tab><tab><tab><tab>yield cursor<nl><nl>spinner = spinning_cursor()<nl>for _ in range(50):<nl><tab> sys.stdout.write(spinner.next())<nl><tab> sys.stdout.flush()<nl><tab> time.sleep(0.1)<nl><tab> sys.stdout.write('\\b')","out":"pythonを使用して回転するコマンドラインカーソルを作成する方法は？"}
{"in":"import urllib2<nl>import lxml.etree<nl><nl>url = \"http:\/\/weather.yahooapis.com\/forecastrss?w=24260013&u=c\"<nl>doc = lxml.etree.parse( urllib2.urlopen(url) ).getroot()<nl>conditions = doc.xpath('*\/*\/yweather:condition',<nl><tab><tab><tab><tab><tab><tab><tab>  namespaces={'yweather': 'http:\/\/xml.weather.yahoo.com\/ns\/rss\/1.0'})<nl>try:<nl><tab> condition=conditions[0]<nl>except IndexError:<nl><tab> print('yweather:condition not found')<nl>print(condition.items())<nl># [('text', 'Fair'), ('code', '33'), ('temp', '16'), ('date', 'Wed, 19 May 2010 9:55 pm EDT')]","out":"Python feedparser with yahoo weather rss"}
{"in":"def get_line(x1, y1, x2, y2):<nl><tab> points = []<nl><tab> issteep = abs(y2-y1) > abs(x2-x1)<nl><tab> if issteep:<nl><tab><tab>  x1, y1 = y1, x1<nl><tab><tab>  x2, y2 = y2, x2<nl><tab> rev = False<nl><tab> if x1 > x2:<nl><tab><tab>  x1, x2 = x2, x1<nl><tab><tab>  y1, y2 = y2, y1<nl><tab><tab>  rev = True<nl><tab> deltax = x2 - x1<nl><tab> deltay = abs(y2-y1)<nl><tab> error = int(deltax \/ 2)<nl><tab> y = y1<nl><tab> ystep = None<nl><tab> if y1 < y2:<nl><tab><tab>  ystep = 1<nl><tab> else:<nl><tab><tab>  ystep = -1<nl><tab> for x in range(x1, x2 + 1):<nl><tab><tab>  if issteep:<nl><tab><tab><tab><tab>points.append((y, x))<nl><tab><tab>  else:<nl><tab><tab><tab><tab>points.append((x, y))<nl><tab><tab>  error -= deltay<nl><tab><tab>  if error < 0:<nl><tab><tab><tab><tab>y += ystep<nl><tab><tab><tab><tab>error += deltax<nl><tab> # Reverse the list if the coordinates were reversed<nl><tab> if rev:<nl><tab><tab>  points.reverse()<nl><tab> return points","out":"pythonで直線の全点を取得する。"}
{"in":"unknown = list(\"46X90157\")<nl>unknown = ''.join(unknown)<nl>for i in range(10):<nl><tab> print([int(i) for i in unknown.replace(\"X\", str(i))])","out":"pythonを使用してインデックスなしでリストに整数を挿入する方法は？"}
{"in":"root = etree.fromstring(xmlstr)","out":"python : zipされたxmlファイルをパースする方法は？"}
{"in":"if batch:<nl><tab><tab>  key =\"\"<nl><tab><tab>  key = '({})'.format(','.join(elem for elem in batch[0]))<nl><tab><tab>  print key<nl><tab><tab>  value ='({})'.format(','.join(\"'\"+str(eleme)+\"'\" for eleme in batch[0].values()))<nl><tab><tab>  print value<nl><tab><tab>  sqlWrite = []<nl><tab><tab>  sqlWrite.append(\"INSERT IGNORE INTO %s \" %writeTable)<nl><tab><tab>  sqlWrite.append(\"\".join(key))<nl><tab><tab>  sqlWrite.append(\" VALUES \")<nl><tab><tab>  sqlWrite.append(\"\".join(value))<nl><tab><tab>  sql=\"\".join(sqlWrite)<nl><tab><tab>  print sql<nl><tab><tab>  if batch:<nl><tab><tab><tab><tab>writeCur.executemany(sql, batch)<nl><tab><tab><tab><tab>cnx2.commit()","out":"pythonで動的なSQLクエリを構築し、挿入にexecutemany()を使用するにはどうすればよいですか？"}
{"in":"blobs = BlobInfo.all().fetch(500)<nl>for blob in blobs:<nl>  if not MyModel.all().filter(\"blob_ref =\", blob.key()).count(1):<nl><tab> blob.delete()","out":"アプリエンジンのblobstoreで、孤児となったblobを探し、削除することは可能ですか？"}
{"in":"import wx<nl><nl>def set_frame_display(frame, display_index):<nl><tab> display = wx.Display(display_index)<nl><tab> x, y, w, h = display.GetGeometry()<nl><tab> frame.SetPosition((x, y))<nl><nl>def main():<nl><tab> app = wx.PySimpleApp()<nl><tab> count = wx.Display_GetCount()<nl><tab> for index in range(count):<nl><tab><tab>  frame = wx.Frame(None, -1, 'Display %d of %d' % (index + 1, count))<nl><tab><tab>  set_frame_display(frame, index)<nl><tab><tab>  frame.Center()<nl><tab><tab>  frame.Show()<nl><tab> app.MainLoop()<nl><nl>if __name__ == '__main__':<nl><tab> main()","out":"wxpythonでデフォルトのwx.Displayを選択するにはどうすればよいですか？"}
{"in":"list_of_objects = [Object_1, Object_2, Object_3]<nl>[x.time for x in list_of_objects]","out":"pythonでオブジェクトの属性リストを作成する"}
{"in":"car1 = []<nl>car2 = []<nl>car3 = []<nl>car4 = []<nl>car5 = []<nl>cars = [car1,car2,car3,car4,car5]<nl>for i in range(5):<nl><tab> rand0m = randint(1,5)<nl><tab> cars[i].append(rand0m)","out":"forループの繰り返しで複数の変数を変更する方法"}
{"in":"example_instance = example(**{var_under_study: value})","out":"Pythonの変数名と同じ文字列に値を代入する。"}
{"in":"if not (args.process or args.upload):<nl><tab> parser.error('No action requested, add -process or -upload')","out":"Pythonのargparse：少なくとも1つの引数を必須にする"}
{"in":"import random<nl>def rand_sum(i, j):<tab> <nl><tab> sum_list = []<nl><tab> for rand_num in range(i, j+1):<nl><tab><tab>  sum_list.append(random.random()) # Check random docs for a function that returns<nl><tab> return sum(sum_list)<tab><tab><tab><tab><tab>  # a different set of randoms if this isn't <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  # appropriate","out":"pythonで乱数変数を生成し、それらをすべて合計する方法"}
{"in":"import pyodbc<nl><nl>DBfile = 'Exam_BackUp.mdb'<nl>conn = pyodbc.connect('FILEDSN='+DBfile)<nl>cursor = conn.cursor()<nl><nl># Do whatever you want with SQL selects, etc<nl><nl>cursor.close()<nl>conn.close()","out":"pythonでアクセスファイルを開く"}
{"in":"from models import MyModel<nl>try:<nl><tab> max_length = MyModel._meta.get_field('source_url').max_length<nl>except:<nl><tab> max_length = None","out":"Django モデルのフィールドオプションを読み込む"}
{"in":"verb, title, definition = myString.split (' ', 2)","out":"pythonの文字列\/スライス操作のヘルプが必要です。"}
{"in":"inds = {'EUR': [whatever],<nl><tab><tab>  'AFR': [foo],<nl><tab><tab>  'ASN': [other]}<nl><nl>foos = inds['EUR']","out":"変数名として文字列を設定する"}
{"in":"import sqlalchemy.types as types<nl><nl>class ChoiceType(types.TypeDecorator):<nl><nl><tab> impl = types.String<nl><nl><tab> def __init__(self, choices, **kw):<nl><tab><tab>  self.choices = dict(choices)<nl><tab><tab>  super(ChoiceType, self).__init__(**kw)<nl><nl><tab> def process_bind_param(self, value, dialect):<nl><tab><tab>  return [k for k, v in self.choices.iteritems() if v == value][0]<nl><nl><tab> def process_result_value(self, value, dialect):<nl><tab><tab>  return self.choices[value]","out":"SQLAlchemy - SQLAlchemyを使って「djangoの選択」をする方法とは？"}
{"in":"currentCommand = \"cmd \/c \" & Chr(34) & source_code_path & \" \" & variable1 & \" \" & variable2 & Chr(34)","out":"VBscriptからPythonスクリプトを引数で呼び出す。"}
{"in":"plt.close()","out":"Matplotlibのタイトルが古いタイトルの上に印刷される。"}
{"in":"popen = Popen(command_args, stdout=PIPE, stderr=PIPE)<nl>body_contents = popen.stdout().read()<nl>popen.terminate()<nl>popen.wait()<nl>r = HttpResponse(body_contents, mimetype='application\/pdf')","out":"Django で標準出力から pdf 応答を返す。"}
{"in":"requests.get(\"https:\/\/api.helpscout.net\/v1\/conversations\/{id}.json\", auth=('{API_KEY}','X'))","out":"Pythonを使用してHelpscout APIから.jsonをGETする。"}
{"in":"import re <nl><nl>def find_subs(line):<nl><tab> match = re.findall(\">([aA-zZ\\s]*)<\",line)<nl><tab> if len(match) != 0:<nl><tab><tab>  new_line = '<ul class=\"bar\">'<nl><tab><tab>  for m in match:<nl><tab><tab><tab><tab>new_line += \"<li>\"+m+\"<\/li>\"<nl><tab><tab>  new_line += \"<\/ul>\"<nl><tab><tab>  return new_line<nl><tab> else:<nl><tab><tab>  return None<nl><nl>line = \"<stats>Some line<br>Other line<\/stats>\"<nl>new = find_subs(line)<nl>print new","out":"XMLをサブエレメントに置き換える方法"}
{"in":"d = {}<nl>d['a']=[1,2,3]<nl>d['b']=[2,4,6]<nl><nl>zipped_list = zip(d['a'],d['b'])<nl>print map(lambda x: sum(x), zipped_list)","out":"ZIPで複数の辞書リストの要素を合計する"}
{"in":"platform.get_devices(device_type=cl.device_type.ALL)","out":"Sailfish：Gpuなしでコンピュータ上で動作させる方法"}
{"in":"import socket<nl><nl>UDP_IP = \"127.0.0.1\"<nl>UDP_PORT = 5005<nl><nl>sock = socket.socket(socket.AF_INET, # Internet<nl><tab><tab><tab><tab><tab>  socket.SOCK_DGRAM) # UDP<nl>sock.bind((UDP_IP, UDP_PORT))<nl><nl>while True:<nl><tab> data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes<nl><tab> print \"received message:\", data","out":"Pythonでnetcatリダイレクトを使用し、Ctrl Cコマンドを送信した後にデータを取得する。"}
{"in":"def perms(word):<nl><tab> stack = list(word)<nl><tab> results = [stack.pop()]<nl><tab> while len(stack) != 0:<nl><tab><tab>  c = stack.pop()<nl><tab><tab>  new_results = []<nl><tab><tab>  for w in results:<nl><tab><tab><tab><tab>for i in range(len(w)+1):<nl><tab><tab><tab><tab><tab> new_results.append(w[:i] + c + w[i:])<nl><tab><tab>  results = new_results<nl><tab> return results","out":"文字列の順列を求める」の反復解法"}
{"in":"for alb in l.songs:<nl><tab>if alb.album not in song_database:<nl><tab><tab> song_database[alb.album] = [alb.name]<nl><tab>else:<nl><tab><tab> song_database[alb.album].append(alb.name)","out":"pythonの辞書をループで構築する方法は？"}
{"in":"if length > 1: <nl><tab> listPlace = overlap[1] - 3<nl><tab> brick = bricklist[listPlace]<nl><tab> # Get the coordinates<nl><tab> bx1,by1,bx2,by2 = drawpad.coords(brick)<nl><tab> # Now delete it<nl><tab> drawpad.delete(brick)<nl><tab> if x1 <= bx1 or x2 >= bx2:<nl><tab><tab>  angle = -angle<nl><tab> if y1 <= by1 or by2 >= y2:<nl><tab><tab>  direction = -direction","out":"変数の座標を解凍する"}
{"in":"from django_extensions.db.fields.json import JSONField","out":"Djangoのモデルを通常のオブジェクトに変換する"}
{"in":"# create item widget<nl>item = QListWidgetItem()<nl>w = CustomItemWidget()<nl>w.setTitle = \"Title\"<nl>w.setDescription = \"Blah blah\"<nl># would have a QPixmap already cached<nl>w.setBadgeImage = preCreatedPixmaps['thisBadge']  <nl>listWidget.insertItem(item)<nl>listWidget.setItemWidget(item, w)","out":"QListViewのカスタムアイテム"}
{"in":"def prog_callback(param, current, total):<nl><tab> pct = 100 - ((total - current ) *100 )\/ (total) <nl><tab> print \"Progress: %s \" % pct<tab> <nl><nl><nl>datagen, headers = multipart_encode({<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"post\": \"1\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"skin\": \"xmlhttprequest\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"userlogin\": \"%s\" % username,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"password\": \"%s\" % password,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"item_type\": \"file\",<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"title\": \"%s\" % title.encode(\"utf-8\"),<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>\"description\": \"%s\" % description.encode(\"utf-8\"),<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"file\": filename<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> }, cb=prog_callback)<tab> <nl><nl>opener = register_openers()<nl><nl>req = urllib2.Request(UPLOAD_URL, datagen, headers)<nl>response = urllib2.urlopen(req)<nl>return response.read()","out":"Python HTTPConnectionのファイル送信をhttplibで行い、進捗を取得する。"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt <nl>from mpl_toolkits.mplot3d import Axes3D<nl>import matplotlib.tri as mtri<nl><nl>X = np.load('.\/mydatars.npy')<nl># My data points are strictly positive. This doesn't work if I don't center about the origin.<nl>X -= X.mean(axis=0)<nl><nl>rad = np.linalg.norm(X, axis=1)<nl>zen = np.arccos(X[:,-1] \/ rad)<nl>azi = np.arctan2(X[:,1], X[:,0])<nl><nl>tris = mtri.Triangulation(zen, azi)<nl><nl>fig = plt.figure()<nl>ax  = fig.add_subplot(111, projection='3d')<nl>ax.plot_trisurf(X[:,0], X[:,1], X[:,2], triangles=tris.triangles, cmap=plt.cm.bone)<nl>plt.show()","out":"pythonで2次元の表面から3次元の点のドローネ三角形分割？"}
{"in":"sorted_items = sorted(d.items(), key = lambda item : len(item[1]))<nl>newd = dict(sorted_items[-2:])","out":"辞書を値の長さでソートする"}
{"in":"def __init__(self, master, number_of_people, node_size):<nl><tab> a = 350<nl><tab> b = 140<nl><tab> ellipsePoints = [(a * cos(theta), b * sin(theta))<nl><tab><tab><tab><tab><tab><tab><tab>for theta in (pi*2 * i\/number_of_people for i in range(number_of_people))]<nl><tab> DisplayFrame = Canvas(root, bg=\"white\", width=725, height=320)<nl><tab> DisplayFrame.grid(row=0, columnspan=7, column=0, sticky='W', padx=5, pady=5)<nl><tab> for i in range(number_of_people):<nl><tab><tab><tab><tab>DisplayFrame.create_oval(ellipsePoints[i][0]+355, ellipsePoints[i][1]+155,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> ellipsePoints[i][0]+355+node_size, ellipsePoints[i][1]+155+node_size, fill=\"red\")","out":"楕円の軌道上に等間隔に円を配置するには？"}
{"in":"key = \"testtest12\"<nl>mapping = range(256)<nl><nl>keylen = len(key)<nl>maplen = len(mapping)<nl><nl>for i, v in enumerate(mapping):<nl><tab> c = ord(key[i % keylen])<nl><tab> t = (i + c) % maplen<nl><tab> mapping[i] = mapping[t]<nl><tab> mapping[t] = v","out":"ユーザー入力に基づく擬似ランダムテーブルの作成"}
{"in":"import sys<nl>sys.exit(\"Your error message\")","out":"Python whileループをエラーで終了させる"}
{"in":"param_table.write(param.h5, format='hdf5')","out":"3dアストロフィーのテーブルをファイルに書き込むには？"}
{"in":"lxml.html","out":"オートコンプリートの検索結果を取得する"}
{"in":"post_save.connect(create_user_profile, sender=User, <nl><tab><tab><tab><tab><tab><tab>  dispatch_uid=\"user_create_profile\")","out":"ユーザー登録がIntegrityErrorにつながる"}
{"in":"start_times = node.xpath(\"\/\/t:chapter\/start_time\/text()\", <nl><tab><tab><tab><tab><tab><tab> namespaces={'t':'http:\/\/example.com\/namespace'})","out":"名前空間を含むXPATHを、親要素に基づいて検索する。"}
{"in":"# change variable name and values to what you need<nl>connection.execute(\"SET SESSION query_cache_type = OFF\")","out":"SQLAlchemy: SQLAlchemyを使用してMySQLサーバーのシステム変数を変更する方法は？"}
{"in":"user_agent_string = self.request.headers['user-agent']","out":"Python\/AppEngineの場合：クライアントのブラウザ情報を取得する"}
{"in":"def _free_places(self):<nl><tab> places = 0<nl><tab> for r in self.rooms:<nl><tab><tab>  x = r.beds - ((r.tenant).size())<nl><tab><tab>  places = places + x<nl><tab> return places<nl>free_places = property(_free_places)","out":"djangoでリレーションをナビゲートするモデルメソッドを宣言し、呼び出すにはどうすればよいですか？"}
{"in":"for c in cols:<nl><tab> if not re.match(r'^[A-Za-z][A-Za-z0-9$_-]+$', c):<nl><tab><tab><tab><tab>print \"Argument is not a valid column name :\", c<nl><tab><tab><tab><tab>sys.exit()","out":"Pythonでpsycopg2を使って適切なSQLリクエストを行う。"}
{"in":"top_score_id = sorted_tuple[0][0]","out":"Python - 辞書とタプル、sorted()の後にキーを取得する。"}
{"in":"def pictures_2png(file):<nl><tab> buffer = StringIO()<nl><tab> Image.open(file).save(buffer, \"PNG\")<nl><tab> return InMemoryUploadedFile(buffer, None, 'test.png', 'image\/png', buffer.len, None)","out":"pngに画像をアップロードする"}
{"in":"gurl = 'http:\/\/toolbarqueries.google.com\/tbr?client=navclient-auto&ch=%s&features=Rank&q=info:%s' % (hsh,urllib.quote(URL))","out":"ローカルに保存されたgoogle検索結果のページランク"}
{"in":"d = collections.defaultdict(list)<nl>for element in rootElement.iter():<nl><tab> d[element.tag].append(element.text)","out":"Pythonでタグが入れ子になっているXMLデータを解析する"}
{"in":"class Episode(models.Model):<nl><tab> episode_num = models.IntegerField()<nl><tab> def __unicode__(self):<nl><tab><tab>  return 'episode {}'.format(self.episode_num)<nl><nl>Episode.objects.order_by('episode_num')","out":"djangoで名前順のソートをする"}
{"in":"def fetchFuction():<nl><tab> QtGui.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor))<nl><tab> # if incase function failed then restore it<nl><tab> try:<nl><tab><tab>  yourFetchFucn()<nl><tab><tab>  QtGui.QApplication.restoreOverrideCursor()<nl><tab> except:<nl><tab><tab>  QtGui.QApplication.restoreOverrideCursor()","out":"PyQt4で、関数が0を返すまでボタン(またはメインウィンドウ全体)を無効化する方法"}
{"in":"import requests<nl><nl>url = 'http:\/\/url.com'<nl>query = {'field': value}<nl>res = requests.post(url, data=query)<nl>print(res.text)","out":"Pythonスクリプトを使用してWebサーバーにデータを投稿する。"}
{"in":"from random import randint<nl>from time import sleep<nl><nl>sleep(randint(10,100))","out":"Googleに送信するクエリの間にランダムな遅延を追加してブロックされないようにする方法（python"}
{"in":"from django.db.models import Count<nl>Image.objects.annotate(Count(\"person\")).order_by(\"person__count\")","out":"Django の queryset の _set による順序付け。"}
{"in":"import os<nl>for i in \"abc\":<nl><tab> os.system (\"mkdir \"+i)<nl><tab> for j in range (5):<nl><tab><tab><tab><tab>os.system (\"touch \"+str(i)+\"\/\"+str(j)+\".txt\")","out":"ファイル＆フォルダのループの作成"}
{"in":"from contextlib import closing<nl>with closing( conn.cursor() ) as cursor:<nl><tab> cursor.execute(\"INSERT INTO...\")","out":"MySQLdbを使った複数回の実行"}
{"in":"querystring['param2']","out":"pythonで解析されたクエリ文字列の値を取得するにはどうすればよいですか？"}
{"in":"import random<nl><nl>def WeightedPick(d):<nl><tab> r = random.uniform(0, sum(d.itervalues()))<nl><tab> s = 0.0<nl><tab> for k, w in d.iteritems():<nl><tab><tab>  s += w<nl><tab><tab>  if r < s: return k<nl><tab> return k<nl><nl>def Test():<nl><tab> k = {'A': 68, 'B': 62, 'C': 47, 'D': 16, 'E': 81}<nl><tab> results = {}<nl><tab> for x in xrange(10000):<nl><tab><tab>  p = WeightedPick(k)<nl><tab><tab>  results[p] = results.get(p, 0) + 1<nl><tab> print results<nl><nl>Test()","out":"(Python)アルゴリズムで、比例\/重みに基づいてランダムにキーを選択します。"}
{"in":"response=self.app.post('\/test_function', <nl><tab><tab><tab><tab><tab><tab><tab>  data=json.dumps(dict(foo='bar')),<nl><tab><tab><tab><tab><tab><tab><tab>  content_type = 'application\/json')","out":"ユニットテストでJSONを使ったリクエストを送信する方法"}
{"in":"site-packages\/reportlab\/platypus\/doctemplate.py","out":"canvasで画像を描き、SimpleDocTemplateを使用する。"}
{"in":"count = len(set(d[\"code\"] for d in li))","out":"リスト内のユニークな要素を効率よくチェックするにはどうすればよいですか？"}
{"in":"scipy.io.wavfile","out":".wavファイルへの書き込み"}
{"in":"df1['age'] = now - datetime.strptime(df1['dob'], \"%m%d%Y\")","out":"日付から年齢を計算するPandas"}
{"in":"key=lambda x: abs(x._norm - number)","out":"数値に最も近いインスタンスに基づいてオブジェクトのリストをソートする python"}
{"in":"yourstring= '\"ABC\", \"XYZ,MNO\", \"KLM\"<nl>\"ABC\", \"MN\"<nl>\"ABC\", \"123\", \"10\", \"OPPA GANGNAM STYLE\", \"LADY\"'<nl><nl>import csv<nl>import StringIO<nl><nl>class MyDialect(csv.Dialect):<nl><tab> strict = True<nl><tab> skipinitialspace = True<nl><tab> quoting = csv.QUOTE_ALL<nl><tab> delimiter = ','<nl><tab> quotechar = '\"'<nl><tab> lineterminator = '<nl>'<nl><nl><nl>b=StringIO.StringIO(yourstring)<nl>r=csv.reader(b,MyDialect())<nl><nl>for i in r:<nl><tab> print len(i), ':',' @ '.join(i)","out":"Python - csvを行のように読む\/パースする方法は？"}
{"in":"# Create a temporary list to hold new x values<nl>result = []<nl><nl>for x, y in zip(list_x, list_y):<nl><tab>  # Populate the new list<nl><tab>  result.append(f(x, y))<nl><nl># Name your new list same as the old one<nl>list_x = result","out":"Pythonのリストをforループで初期化する"}
{"in":"CACHES = {<nl><tab> 'default': {<nl><tab><tab>  'BACKEND': 'django.core.cache.backends.dummy.DummyCache',<nl><tab>}<nl>}","out":"djangoで開発用にキャッシュを無効にする方法は？"}
{"in":"import re<nl>testString = r'this, is a test \"one\" it should only return the first item \\\"two\\\" and not the second'<nl>pattern = r'(?<!\\\\)\"([^\"]*)(?<!\\\\)\"'<nl><tab><tab><tab> # ^^^^^^^<tab><tab>  ^^^^^^^<nl>print re.findall(pattern, testString)","out":"pythonでreを使用して、エスケープされた引用符ではなく、引用符の中にある項目を検索する。"}
{"in":"from datetime import date<nl>import random<nl><nl>start_date = date.today().replace(day=1, month=1).toordinal()<nl>end_date = date.today().toordinal()<nl>random_day = date.fromordinal(random.randint(start_date, end_date))","out":"Pythonが現在の年の日付をランダムに選択する"}
{"in":"with open('file') as f:<nl><tab> print(f.read().count(sequence))","out":"ファイル中の文字列の完全一致数を調べる python"}
{"in":"import re<nl>reValidIPv4 = re.compile(r\"\"\"<nl><tab> # Match a valid IPv4 in the wild.<nl><tab> (?:<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  # Group two start-of-IP assertions.<nl><tab><tab>^<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  # Either the start of a line,<nl><tab> | (?<=\\s)<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  # or preceeded by whitespace.<nl><tab> )<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # Group two start-of-IP assertions.<nl><tab> (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)<tab> # First number in range 0-255 <nl><tab> (?:<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  # Exactly 3 additional numbers.<nl><tab><tab>\\.<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # Numbers separated by dot.<nl><tab><tab>(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)  # Number in range 0-255 .<nl><tab> ){3}<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # Exactly 3 additional numbers.<nl><tab> (?=$|\\s)<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab># End IP on whitespace or EOL.<nl><tab> \"\"\", re.VERBOSE | re.MULTILINE)<nl><nl>text = \"10.0.0.1.1 but 127.0.0.256 1.1.1.1\"<nl>l = reValidIPv4.findall(text)<nl>print(l)","out":"正規表現による有効なIPアドレスの検索"}
{"in":"import os<nl>open(os.path.join(os.path.dirname(__file__), 'Directory', 'input.txt'))","out":"相対パスからテキストファイルを取得する方法は？"}
{"in":"from twisted.web.util import Redirect<nl>fooDotComResource.putChild(\"bar\", Redirect(\"http:\/\/foobar.com\/bar\"))","out":"Twistedのサブディレクトリを別ドメインにリダイレクトする。"}
{"in":"print('<tab><tab>  %-40s%s' % (self.serverrqs()*int(self.nbpro), self.servernbrqs()))","out":"python pprintや他のモジュールでデータを整列させる方法"}
{"in":"import web<nl><nl>urls = (<nl><tab> '\/(.*)', 'hello'<nl>)<nl>app = web.application(urls, globals())<nl><nl>class hello:<tab><tab>  <nl><tab> def GET(self, name):<nl><tab><tab>  if not name: <nl><tab><tab><tab><tab>name = 'world'<nl><tab><tab>  return 'Hello, ' + name + '!'<nl><nl>if __name__ == \"__main__\":<nl><tab> app.run()","out":"参入障壁の低いPythonのWebフレームワーク"}
{"in":"os.system(\"cat * | grep -r -i -c 'Error' '%s' > '%s'\" % (dir, errors_file))","out":"複数のファイルに対して、ある単語の出現回数を書き出し、その結果を別のファイルに書き出す場合の最適な方法は何か"}
{"in":"pt = (2, 2)<nl>distance = 1<nl>mask = (indices[0] - pt[0]) ** 2 + (indices[1] - pt[1]) ** 2 <= distance ** 2<nl>result = my_array[mask]","out":"インデックスに基づくnumpy配列のフィルタリングはどうすればよいですか？"}
{"in":"line1 = file1.readline()<nl>line2 = file2.readline()<nl>while file1_not_at_end and file2_not_at_end:<nl><tab> if line1 < line2:<nl><tab><tab>  file3.write(line1)<nl><tab><tab>  line1 = file1.readline()<nl><tab> else:<nl><tab><tab>  file3.write(line2)<nl><tab><tab>  line2 = file2.readline()<nl><nl> # merge file 1 into file 3<nl> # merge file 2 into file 3","out":"Python - メモリに読み込まずにファイルの先頭行を読み込んで削除する"}
{"in":"import unittest<nl>class TestNothing(unittest.TestCase):<nl><tab> def test_0010_test_nothing(self):<nl><tab><tab>  self.assertEqual(200, 200)","out":"unittest- TypeError: このコンストラクタは引数を取らない。"}
{"in":"a=2<nl>s = np.random.zipf(a, 1000)<nl>result = (s\/float(max(s)))*1000<nl><nl>print min(s), max(s)<nl>print min(result), max(result)","out":"Pythonで範囲nのZipf分布から値を作成する方法は？"}
{"in":"get_by_id()","out":"標準的なデータストアのインデックスを使用するか、独自のインデックスを構築する。"}
{"in":"sizer = wx.BoxSizer(wx.VERTICAL)<nl>sizer.Add(widget1, 0, wx.EXPAND)<nl>sizer.Add(widget2, 1)","out":"wxPythonです：BoxSizerのアイテムが水平方向に拡大せず、垂直方向にしか拡大しない。"}
{"in":"dict['a'][:,1]","out":"Pythonでdictのキーの列を使用するには？"}
{"in":"from chef import autoconfigure, Client<nl>api = autoconfigure()<nl>Client.delete('notcool.my.com')<nl>Client.create('cool.my.com')","out":"PyChefを使って「knife client delete」「knife client create」を行うには？"}
{"in":"def update_weights(w,x,y, learning_rate):<nl><tab> inner_product = 0.0<tab> <nl><tab> for f_ in range(len(x)):<nl><tab><tab>  inner_product += (w[f_] * x[f_])<nl><tab> dloss = inner_product - y<nl><tab> for f_ in range(len(x)):<nl><tab><tab>  w[f_] += (learning_rate * (-x[f_] * dloss))<nl><tab> return w","out":"SGD-何回か繰り返すと損失が大きくなる。"}
{"in":"import matplotlib.pyplot as plt<nl><nl>fig, ax = plt.subplots()<nl>x = [0, 0.2, 0.4, 0.6, 0.8]<nl>y = [0, 0.5, 1, 1.5, 2.0]<nl>colors = ['k']*len(x)<nl>ax.scatter(x, y, c=colors, alpha=0.5)<nl>ax.set_xlim((0,2))<nl>ax.set_ylim((0,2))<nl>x0,x1 = ax.get_xlim()<nl>y0,y1 = ax.get_ylim()<nl>ax.set_aspect(abs(x1-x0)\/abs(y1-y0))<nl>ax.grid(b=True, which='major', color='k', linestyle='--')<nl>fig.savefig('test.png', dpi=600)<nl>plt.close(fig)","out":"matplotlibの散布図を正方形にする方法は？"}
{"in":"def partitionIndexes(totalsize, numberofpartitions):<nl><tab> # Compute the chunk size (integer division; i.e. assuming Python 2.7)<nl><tab> chunksize = totalsize \/ numberofpartitions<nl><tab> # How many chunks need an extra 1 added to the size?<nl><tab> remainder = totalsize - chunksize * numberofpartitions<nl><tab> a = 0<nl><tab> for i in xrange(numberofpartitions):<nl><tab><tab>  b = a + chunksize + (i < remainder)<nl><tab><tab>  # Yield the inclusive-inclusive range<nl><tab><tab>  yield (a, b - 1)<nl><tab><tab>  a = b","out":"ほぼ同じ大きさの塊の指標を得る"}
{"in":"age = int(input(\"Thank you \" + name + \", please enter your name to continue.\"))","out":"Pythonプログラムの構文エラーについて"}
{"in":"import os<nl>import sys<nl><nl><nl>filename = 'logo.txt'<nl># Use join instead of hard-coding file separators<nl>path = os.path.join(os.getcwd(), filename)<nl># You need to specify some kind of delimiter so you know<nl># where the logo ends. I couldn't think of a better way to<nl># only print part of the file.<nl>delimiter = '------'<nl><nl><nl>with open(path, 'r') as f:<nl><tab> for line in f:<nl><tab><tab>  if delimiter in line:<nl><tab><tab><tab><tab>sys.stdout.write('Press any key to continue...')<nl><tab><tab><tab><tab>raw_input()<nl><tab><tab>  else:<nl><tab><tab><tab><tab>sys.stdout.write(line)","out":"pythonでテキストファイルを開き、最初に見える部分のみを画面に書き出すにはどうすればよいでしょうか？"}
{"in":"import wx<nl><nl>TIMER_ID = 100<nl><nl>class Frame(wx.Frame):<nl><tab> def __init__(self, title):<nl><tab><tab>  wx.Frame.__init__(self, None, title=title, size=(350,200))<nl><tab><tab>  self.timer = None<nl><tab><tab>  self.Bind(wx.EVT_LEFT_DCLICK, self.OnDoubleClick)<nl><tab><tab>  self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)<nl><nl><tab> def OnDoubleClick(self, event):<nl><tab><tab>  self.timer.Stop()<nl><tab><tab>  print(\"double click\")<nl><nl><tab> def OnSingleClick(self, event):<nl><tab><tab>  print(\"single click\")<nl><tab><tab>  self.timer.Stop()<nl><nl><tab> def OnLeftDown(self, event):<nl><tab><tab>  self.timer = wx.Timer(self, TIMER_ID)<nl><tab><tab>  self.timer.Start(200) # 0.2 seconds delay<nl><tab><tab>  wx.EVT_TIMER(self, TIMER_ID, self.OnSingleClick)<nl><nl><nl><nl>app = wx.App(redirect=True)<nl>top = Frame(\"Hello World\")<nl>top.Show()<nl>app.MainLoop()","out":"wxpythonでマウスのダブルクリックとシングルクリックを区別する方法"}
{"in":"with open (\"my.ini\", \"r\") as myfile:<nl><tab> my_config = myfile.read()<nl><nl>lines = my_config.splitlines(True)<nl>replacements = {\"path_jamjs\": {\"changeUsername\": \"Te\"},<nl><tab><tab><tab><tab><tab> \"path_php\": {\"changeUsername\": \"TeS\"}}<nl><nl>for path, reps in replacements.items():<nl><tab> for i, line in enumerate(lines):<nl><tab><tab>  if line.startswith(path + ':'):<nl><tab><tab><tab><tab>for key, value in reps.items():<nl><tab><tab><tab><tab><tab> line = line.replace('[' + key + ']', value)<nl><tab><tab><tab><tab>lines[i] = line<nl><nl>result = ''.join(lines)","out":"特定の行に特定の正規表現を適用する方法"}
{"in":"recordList = []","out":"pythonでdefaultdictのリストを作成する。"}
{"in":"import win32com.client<nl>objShell = win32com.client.Dispatch(\"WScript.Shell\")<nl>allUserDocs = objShell.SpecialFolders(\"AllUsersDesktop\")<nl>print allUserDocs","out":"Pythonでシステムフォルダの位置を検索する"}
{"in":"sysconfig.get_config_var('SO')","out":"python distutils: コンパイルされた拡張機能の名前にアクセスする。"}
{"in":"import math<nl>import pygame<nl>from pygame.locals import *<nl><nl>radar = (100,100)<nl>radar_len = 50<nl>x = radar[0] + math.cos(math.radians(angle)) * radar_len<nl>y = radar[1] + math.sin(math.radians(angle)) * radar_len<nl><nl># then render the line radar->(x,y)<nl>pygame.draw.line(screen, Color(\"black\"), radar, (x,y), 1)","out":"行を回転させるpygame"}
{"in":"import re<nl>f=open('test.file.here', 'r')<nl><nl>pattern = re.compile(\"^[^\\s]*ello[^\\s]*\\sWorld[^\\s]*$\")<nl><nl>for line in f:<nl>  if pattern.match(line):<nl><tab> print line,<nl><nl>f.close()","out":"Pythonでワイルドカードを使った検索語を作成するにはどうすればよいですか？"}
{"in":"def f(x,y):<nl><tab> '...some code...'<nl><tab> single_value = array[x,y] # = dependent array (e.g. DEM)<nl><tab> '...some code...'<nl><tab> return z<nl><nl>x = np.arange(array.shape[0])<nl>y = np.arange(array.shape[1])<nl>xx, yy = np.meshgrid(x,y, sparse=True)<nl><nl>f_vec = np.vectorize(f) # vectorization of function f<nl><nl>tp_vec = f_vec(xx,yy).T","out":"更新しました：各セルに（ベクトル化された）関数を適用し、グリッドを補間する。"}
{"in":"one = np.ascontiguousarray(a['one'])<nl>one.ctypes.data_as(ctypes.POINTER(ctypes.c_double))","out":"ctypes カスタムdtypeを持つnumpy配列へのポインタ。"}
{"in":"from sklearn.cluster import KMeans<nl>import numpy as np<nl>x = np.random.random(13876)<nl><nl>km = KMeans()<nl>km.fit(x.reshape(-1,1))  # -1 will be calculated to be 13876 here","out":"Scikit-learnです：1次元配列でKMeansを実行するには？"}
{"in":"'^(aby|xyz)_.*?(?<!_Result)\\.csv$'","out":"特定の文字列で終わっていないファイルをマッチさせる"}
{"in":"axs = df_month.plot(secondary_y=['C'], mark_right=False)<nl><nl>for ax in axs:<nl><tab> ax.right_ax.set_ylim((0,50)) # Set the y limits to 0 to 50","out":"Pandasのgroupby関数でSecondary_yの範囲を指定する。"}
{"in":"time.struct_time","out":"ユニバーサルフィードパーサーを使ったRSSの日付取得方法"}
{"in":"class ProducerProcess(Process):<nl><nl><tab> def __init__(self, q, **kwargs):<nl><tab><tab>  Process.__init__(self,)<nl><tab><tab>  self.q = q<nl><nl><tab> def run():<nl><tab><tab>  res = do_stuff()<nl><tab><tab>  q.put(res)<nl><nl>class ConsumerProcess(Process):<nl><nl><tab> def __init__(self, q, **kwargs):<nl><tab><tab>  Process.__init__(self,)<nl><tab><tab>  self.q = q<nl><nl><tab> def run():<nl><tab><tab>  while True:<nl><tab><tab><tab><tab>args = q.get(block=True) # wait until there is an item in the queue<nl><tab><tab><tab><tab>do_stuff(*args) # do stuff here<nl><nl><nl>q = Queue()<nl>p1 = ProducerProcess(q, **your_args)<nl>p2 =ConsumerProcess(q, **extra_args)<nl>p2.start()<nl>p1.start()<nl># join the processes p1.join() p2.join() or use JoinableQueue depending what you need","out":"相互通信のためのプロセスリスニングを心がける"}
{"in":"subprocess.call('echo -e \"root (hd0,1)<nl>find \/boot\/grub\/menu.lst<nl>setup (hd0)<nl>quit\" | grub --batch', shell=True)","out":"Pythonのサブプロセスで長いbashのシーケンスを実行する方法"}
{"in":"mystring = \"a1234f\"<nl>data = list(mystring)","out":"Pythonの文字列からバイトを読み込む"}
{"in":"sql.execute(connection, \"\"\"<nl>INSERT INTO blah VALUES %s;\"\"\" % (<nl><tab> \", \".join(\"(%d)\" % hid for hid in hids)))","out":"カーソルから一時テーブルを作成する"}
{"in":"columns = ['Facility', 'Category', 'ID', 'Part', 'Text']<nl><nl># It's always a good idea to sort after creating a MultiIndex like this<nl>df = df.set_index(columns).sortlevel()<nl>df1 = df1.set_index(columns).sortlevel()<nl><nl># You don't have to use Yes here, anything will do<nl># The boolean True might be more appropriate<nl>df['MatchingFlag'] = \"Yes\"<nl>df1['MatchingFlag'] = \"Yes\"<nl><nl># Add them together, matching rows will have the value \"YesYes\"<nl># Non-matches will be nan<nl>result = df + df1<nl><nl># If you'd rather not have NaN's <nl>result.loc[:,'MatchingFlag'] = result.loc[:,'MatchingFlag'].replace('YesYes','Yes')<nl>result.loc[:,'MatchingFlag'] = result['MatchingFlag'].fillna('No')","out":"Pandas 2つのデータフレームを比較し、一致するものにフラグを立てる"}
{"in":"import os<nl><nl>sep = \" \"<nl><nl>with open(\"inline-t.txt\", \"rb+\") as fd:<nl><tab> seekpos = fd.tell()<nl><tab> line = fd.readline()<nl><tab> while line:<nl><tab><tab>  print line<nl><tab><tab>  next = raw_input(\">>> \")<nl><tab><tab>  if next == \":q\":<nl><tab><tab><tab><tab>break<nl><tab><tab>  if next:<nl><tab><tab><tab><tab>values = line.split(sep)<nl><tab><tab><tab><tab>newval = values[0] + sep + next + '<nl>'<nl><tab><tab><tab><tab>if len(newval) == len(line):<nl><tab><tab><tab><tab><tab> fd.seek(seekpos)<nl><tab><tab><tab><tab><tab> fd.write(newval)<nl><tab><tab><tab><tab><tab> fd.flush()<nl><tab><tab><tab><tab><tab> os.fsync(fd)<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> remaining = fd.read()<nl><tab><tab><tab><tab><tab> fd.seek(seekpos)<nl><tab><tab><tab><tab><tab> fd.write(newval + remaining)<nl><tab><tab><tab><tab><tab> fd.flush()<nl><tab><tab><tab><tab><tab> os.fsync(fd)<nl><tab><tab><tab><tab><tab> fd.seek(seekpos)<nl><tab><tab><tab><tab><tab> line = fd.readline()<nl><tab><tab>  seekpos = fd.tell()<nl><tab><tab>  line = fd.readline()","out":"Pythonでユーザー入力からファイルを一行ずつインタラクティブに編集する。"}
{"in":"from django.test.client import Client<nl>client = Client()<nl>resp = client.put('\/employee\/2\/', data={'email': 'here@there.com'}, follow=True)<nl>#... etc","out":"Django RESTブラウザインタフェース"}
{"in":"for key1 in dict:<nl><tab> for key2 in dict[key1]:<nl><tab><tab> dict[key1][key2]['time'] = 'newTime'","out":"同じキーを異なる項目で反復処理する python辞書"}
{"in":"comma_separated_float_list_re = re.compile('^([-+]?\\d*\\.?\\d+[,\\s]*)+$')<nl>validate_comma_separated_float_list = RegexValidator(<nl><tab><tab><tab><tab>  comma_separated_float_list_re, <nl><tab><tab><tab><tab>  _(u'Enter only floats separated by commas.'), 'invalid')<nl><nl>class CommaSeparatedFloatField(CharField):<nl><tab> default_validators = [validators.validate_comma_separated_float_list]<nl><tab> description = _(\"Comma-separated floats\")<nl><nl><tab> def formfield(self, **kwargs):<nl><tab><tab>  defaults = {<nl><tab><tab><tab><tab>'error_messages': {<nl><tab><tab><tab><tab><tab> 'invalid': _(u'Enter only floats separated by commas.'),<nl><tab><tab><tab><tab>}<nl><tab><tab>  }<nl><tab><tab>  defaults.update(kwargs)<nl><tab><tab>  return super(CommaSeparatedFloatField, self).formfield(**defaults)","out":"Djangoです：浮動小数点数のリストを格納するためのモデルフィールド？"}
{"in":"from pyramid.wsgi import wsgiapp<nl><nl># Enable TileStache tile server<nl>import TileStache<nl>tile_app = TileStache.WSGITileServer('tilestache\/tilestache.cfg', autoreload=False)<nl><nl>@wsgiapp<nl>def tileserver(environ, start_response):<nl><nl><tab> return tile_app(environ, start_response)","out":"Pyramidの中からwsgiアプリを提供する方法は？"}
{"in":"wd = webdriver.Firefox()<nl>wd.implicitly_wait(3)<nl><nl>def get_items(items):<nl><tab> print len(items)<nl><tab> wd.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")<nl><tab> # len(items) and len(wd.find_elements-by...()) both always seem to return the same number<nl><tab> # if I were to start the loop with while True: it would work, but of course... never end<nl><nl><tab> sleep(5) #seconds<nl><tab> while len(wd.find_elements_by_class_name('stream-item')) > len(items):<nl><tab><tab>  items = wd.find_elements_by_class_name('stream-item')<nl><tab><tab>  print items<nl><tab><tab>  wd.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")<nl><tab> return items<nl><nl>def test():<nl><tab> get_page('http:\/\/twitter.com\/')<nl><tab> get_items(wd.find_elements_by_class_name('stream-item'))","out":"Selenium: スクロール中に読み込まれるデータを取得する。"}
{"in":"def foo(vals):<nl><tab> def f(p,x):<nl><tab><tab>  result=0<nl><tab><tab>  for i,(av,ap) in enumerate(zip(vals,p)):<nl><tab><tab><tab><tab>result+=av*ap*(x**i)<nl><tab><tab>  return result<nl><tab> return f<nl><nl>print(foo([50])([2],3))<nl># f(p,x)=50*2<nl># 100<nl>print(foo([50,60])([2,3],4))<nl># f(p,x)=50*2+60*3*x<nl># 820","out":"Pythonによる動的な関数構築"}
{"in":"print [procinfo for procinfo in procinfos]","out":"シンプルなpythonのdictがあるのですが、dictの代わりにジェネレータの参照が出力されるのはなぜでしょうか？"}
{"in":"dataset = mydata['data']<nl>for data in dataset:<nl><tab>url = data['images']['standard_resolution']['url']","out":"インスタグラムのjsonを反復処理する"}
{"in":"import numpy as np<nl>import matplotlib<nl>import mplh5canvas<nl><nl>matplotlib.use('module:\/\/mplh5canvas.backend_h5canvas')<nl><nl>import matplotlib.cbook as cbook<nl>import matplotlib.image as image<nl>import matplotlib.pyplot as plt<nl><nl><nl>fig = plt.figure()<nl><nl>ax = fig.add_subplot(111)<nl><nl>ax.plot(np.random.rand(20), '-o', ms=20, lw=2, alpha=0.7, mfc='orange')<nl><nl>ax.grid()<nl><nl>plt.show(open_plot=True)","out":"Python tkinterのウィンドウをブラウザに埋め込むには？"}
{"in":"import lxml.html<nl>page = lxml.html.parse('http:\/\/www.google.com').getroot()<nl>print page.xpath('\/\/a\/@href')","out":"pythonでhtmlページに対してxpathを実行する方法は？"}
{"in":"a=input('Enter the list of tuples')<nl>b=[]<nl>for i in range(len(a)):<nl><tab> b.append(sum(a[i]))","out":"Pythonで、タプルのリストが与えられたとき、含まれるタプルの要素の和を要素とするリストを生成する。"}
{"in":"try:<nl><tab> return self.object[row][column]<nl>except IndexError:<nl><tab> return \"error\"","out":"pythonで2Dリスト"}
{"in":"with open('test.txt') as infile, open('test_2.txt', 'w') as outfile:<nl>  for line in infile:<nl><tab> if not line.startswith(\"I want\"):<nl><tab><tab>outfile.write(line.strip())","out":"テキストファイルから行を正しく削除できない"}
{"in":"faces[:,:,0,4] = 1<nl><nl>faces[:,:,0,4] = (1, 1, 1)","out":"Python\/Numpyの場合：インデックス範囲に値を設定する"}
{"in":"for r in Table1.objects.using('schema1').filter(column1=val1,column2=val2).values('column3').distinct('column3'):<nl><tab> ltest.append(r['column3'])<nl>for r in lookupTable(type).objects.using('schema1').filter(column3__in=ltest).values('column4').distinct('column4'):<nl><tab> lTemp.append(r['column4'])","out":"Django、ValueQuerySetで不正なDOUBLE値：' \\x00' を切り捨てる。"}
{"in":"django.db.transaction.enter_transaction_management(using='primary')<nl>django.db.transaction.managed(True, using='primary')<nl><nl>i = 0 <nl>for record in records:<nl><tab> i += 1<nl><tab> r = PrimaryDBModel(**record)<nl><tab> r.save() # This will no be committed until the end.<nl><tab> if not i % 100:<nl><tab><tab>  SecondaryDBModel.update()<nl><tab><tab>  status = SecondaryDBModel(id=123)<nl><tab><tab>  status.current_row = i<nl><tab><tab>  status.save() # This will committed immediately.<nl><nl>django.db.transaction.commit(using='primary')<nl>django.db.transaction.leave_transaction_management(using='primary')","out":"Django ORMによる選択的トランザクション管理"}
{"in":"class WNode(object):<nl><nl><tab> def __init__(self,w):<nl><tab><tab>  self._w=w<nl><tab><tab>  self._content=[]<nl><nl><tab> def find(self, x):<nl><tab><tab>  if self._w == x:<nl><tab><tab><tab><tab>return self<nl><tab><tab>  else:<nl><tab><tab><tab><tab>y = None<nl><tab><tab><tab><tab>for i in self._content:<nl><tab><tab><tab><tab><tab> y = i.find(x)<nl><tab><tab><tab><tab><tab> if y:<nl><tab><tab><tab><tab><tab><tab>  break<nl><tab><tab><tab><tab>return y<nl><tab><tab>  return None<nl><nl>if __name__ == '__main__':<nl><tab> r = WNode(1)<nl><tab> r._content = [WNode(2), WNode(3), WNode(4)]<nl><tab> for i in xrange(1, 6):<nl><tab><tab>  print('find({}) = {}'.format(i, r.find(i)))","out":"Pythonでツリーからノードを検索して返す"}
{"in":"datelist =  ['2014-05-06', '2014-05-07', '2014-05-08', '2014-05-09', '2014-05-10',<tab> '2014-05-11', '2014-05-12', '2014-05-13']<nl><nl>import matplotlib<nl>from matplotlib import pyplot<nl>from matplotlib import dates<nl>import datetime<nl><nl>converted_dates = map(datetime.datetime.strptime, datelist, len(datelist)*['%Y-%m-%d'])<nl>x_axis = (converted_dates)<nl>formatter = dates.DateFormatter('%Y-%m-%d')<nl><nl><nl>y_axis = range(0,8)<nl>pyplot.plot( x_axis, y_axis, '-' )<nl>ax = pyplot.gcf().axes[0] <nl>ax.xaxis.set_major_formatter(formatter)<nl>pyplot.gcf().autofmt_xdate(rotation=25)<nl>pyplot.show()","out":"matplotlib 文字列から日付への変換"}
{"in":"A = [100,100,100,100]<nl>Scale = 1<nl><nl>B= []<nl>for idx, val in enumerate(A):<nl><tab> B.append( (val*idx)\/(len(A)-1) * Scale)","out":"Pythonを使ったラインでのポイント"}
{"in":"browser.execute_script(<nl><tab> \"arguments[0].style.setProperty('display', 'block', 'important');\",<nl><tab> browser.find_element_by_xpath(\"\/\/div\")<nl><tab> )","out":"pythonのseleniumがcssを!importantで送信する。"}
{"in":"def process_element(catalog, *args, **kwargs):<nl><tab> for child in catalog.getchildren():<nl><tab><tab>  print(child.text)","out":"Python xml : itemに含まれるすべての要素をリストアップする"}
{"in":"filehandle = open(PATH)<nl><nl>r = session.post(URL_IMPORT, data={},files = {'sync_config_import':filehandle})","out":"Pythonリクエストapi"}
{"in":"df.loc[[i for j, i in enumerate(df.index) if j % 10 == 0]]","out":"Pandas Python：10ステップごとにデータフレームの値を取得する方法は？"}
{"in":"class DBExamplestart(Examplestart):<nl><tab> variable = ndb.KeyProperty(kind=DBUser, default=ndb.Key(DBUser, 776))<nl><tab> statement = ndb.StringProperty(indexed=False, default='First')","out":"ndbモデルへの値のハードコーディング"}
{"in":"COLUMN_VARIABLES = ['provider', 'language','subtype']<nl>data = {}<nl><nl>for variable in COLUMN_VARIABLES:<nl><tab> data[variable] = node.xpath(\"\/\/%s\/text()\"%variable)[0]","out":"pythonで長い変数リストを定義する"}
{"in":"def SAD_singleton(cls):<nl><tab> class tmp(object):<nl><tab><tab>  def __init__(self):<nl><tab><tab><tab><tab>self.c = None<nl><tab> instances = tmp()<nl><tab> def getinstance():<nl><nl><tab><tab>  if instances.c is None:<nl><tab><tab><tab><tab>instances.c = cls()<nl><nl><tab><tab>  return instances.c<nl><tab> return getinstance","out":"python クロージャ ローカル変数"}
{"in":"def weightedL2(a,b,w):<nl><tab> q = a-b<nl><tab> return np.sqrt((w*q*q).sum())","out":"重みのあるユークリッド距離"}
{"in":"if button.CanSetTransparent():<nl><tab> button.SetTransparent(100)","out":"WXPythonでの個々のウィジェットの不透明度"}
{"in":"sys.modules","out":"どのPythonモジュールがインポートされているかを調べる"}
{"in":"import math<nl><nl>def getDistance(lat1,lon1,lat2,lon2):<nl><tab> # This uses the haversine formula, which remains a good numberical computation,<nl><tab> # even at small distances, unlike the Shperical Law of Cosines.<nl><tab> # This method has ~0.3% error built in.<nl><tab> R = 6371 # Radius of Earth in km<nl><nl><tab> dLat = math.radians(float(lat2) - float(lat1))<nl><tab> dLon = math.radians(float(lon2) - float(lon1))<nl><tab> lat1 = math.radians(float(lat1))<nl><tab> lat2 = math.radians(float(lat2))<nl><nl><tab> a = math.sin(dLat\/2) * math.sin(dLat\/2) + \\<nl><tab><tab>  math.cos(lat1) * math.cos(lat2) * math.sin(dLon\/2) * math.sin(dLon\/2)<nl><nl><tab> c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))<nl><nl><tab> d = R * c * 0.621371 # Converting km to miles with \"* 0.621371\"<nl><nl><tab> return d","out":"pythonを使ったgpsトラックポイントからの移動距離の計算"}
{"in":"from string import ascii_lowercase<nl>for character in ascii_lowercase:<nl><tab> c = character","out":"pythonでFor文を使う 3x"}
{"in":"import sys<nl>from cx_Freeze import setup, Executable<nl><nl># Dependencies are automatically detected, but it might need fine tuning.<nl>build_exe_options = {\"includes\": [\"tkinter\"]}<nl><nl># GUI applications require a different base on Windows (the default is for a<nl># console application).<nl>base = None<nl>if sys.platform == \"win32\":<nl><tab> base = \"Win32GUI\"<nl><nl>setup(<nl><tab> name = \"simple_Tkinter\",<nl><tab> version = \"0.1\",<nl><tab> description = \"Sample cx_Freeze Tkinter script\",<nl><tab> options = {\"build_exe\": build_exe_options},<nl><tab> executables = [Executable(\"the timer.py\", base = base)])<nl><nl>setup(  name = \"guifoo\",<nl><tab><tab>  version = \"0.1\",<nl><tab><tab>  description = \"My GUI application!\",<nl><tab><tab>  options = {\"build_exe\": build_exe_options},<nl><tab><tab>  executables = [Executable(\"guifoo.py\", base=base)])","out":"cx_freezeでtkinterインターフェイス用の.exeファイルを作成する。"}
{"in":"def gettext(request):<nl>  if request.method == 'POST':<nl><tab> form = UploadFileForm(request.POST, request.FILES)<nl><tab> if form.is_valid():<nl><tab><tab>  f = request.FILES['file']<nl><tab><tab>  for chunk in f.chunks():<nl><tab><tab><tab><tab>text = chunk<nl><tab><tab><tab><tab>text = preprocessing(text)<nl><tab><tab>  return render(request, 'ecs\/index.html', {'text': text, 'form': form})<tab><tab><nl><tab> else:<nl><tab><tab>  form = UploadFileForm()<nl>return render_to_response('ecs\/index.html', {'form': form})","out":"Q: Django - views.pyで他の関数からデータを返すには？"}
{"in":"raw_input()","out":"コマンドプロンプトからプログラムが実行されない"}
{"in":"import csv<nl><nl>with open(\"organizationTest.txt\",\"rU\") as f:<nl><tab><tab>  reader = csv.reader(f)<nl><tab><tab>  for row in reader:<nl><tab><tab><tab><tab>_, created = Company.objects.get_or_create(<nl><tab><tab><tab><tab><tab> Name=row[0].decode('latin-1').encode('utf8'),<nl><tab><tab><tab><tab><tab> Site=row[1].decode('latin-1').encode('utf8'),<nl><tab><tab><tab><tab><tab> )","out":"アプリケーションをユニコードに切り替える"}
{"in":"const.py","out":"Djangoでモデルとビューの定数を定義するにはどうしたらいいでしょうか？"}
{"in":"TK.Tk()","out":"TkinterでPILを使うにはどうすればよいですか？"}
{"in":"entry_count = Topic.objects.values('title').annotate(Count('entry')).order_by('-entry__count')","out":"Djangoで、特定のクラスに関連する投稿をアノテーションし、カウントする。"}
{"in":"import cv<nl><nl>capture = cv.CaptureFromFile(filename)<nl>while Condition1:<nl><tab> # Need a frame to get the output video dimensions<nl><tab> frame = cv.RetrieveFrame(capture) # Will return None if there are no frames<nl><tab> # New video file<nl><tab> video_out = cv.CreateVideoWriter(output_filenameX, CV_FOURCC('M','J','P','G'), capture.fps, frame.size(), 1)<nl><tab> # Write the frames<nl><tab> cv.WriteFrame(video_out, frame)<nl><tab> while Condition2:<nl><tab><tab>  frame = cv.RetrieveFrame(capture) # Will return None if there are no frames<nl><tab><tab>  cv.WriteFrame(video_out, frame)","out":"動画分割のためのpythonライブラリ"}
{"in":"b = [range(x) for x in a]","out":"別のリストの数字に基づくリストのリスト"}
{"in":"subprocess.call(['lp', 'foo.png'])","out":"UbuntuでpythonとPILライブラリを使用してプリンタに接続し、png画像を印刷する方法。"}
{"in":"a=np.zeros((982,5)) <nl>b=np.random.randint(0,100,(491,5)) # your 491 row matrix<nl>a[::2] = b","out":"Numpy配列で、0を交互に挿入する。"}
{"in":"from flask import Flask<nl>app = Flask(__name__)<nl>data_loader = lambda: range(10) # this function should load your data from some external store<nl>@app.route(\"\/\")<nl>def main():<nl><tab> body = \"<nl>\".join([\"<p>%s<\/p>\" % datum for datum in data_loader()])<nl><tab> page = \"\"\"<html><body>%s<nl><tab><tab><tab><tab>  <script>setTimeout(function(){<nl><tab><tab><tab><tab><tab>  window.location.reload(1);<nl><tab><tab><tab><tab>}, 5000);<\/script><\/body><\/html>\"\"\" % body<nl><tab> return page<nl><nl><nl>if __name__ == \"__main__\":<nl><tab> app.run()","out":"pythonスクリプトからHTMLにデータを渡す"}
{"in":"import gdb<nl><nl>res = []<nl>res.append(gdb.execute(\"call factorial(4)\", False, True))<nl>res.append(gdb.execute(\"call factorial(5)\", False, True))<nl>print res","out":"GDB、pythonスクリプトで関数から戻り値を取得する。"}
{"in":"from PIL import Image<nl><nl>im = Image.open(\"test.png\")<nl>im.save(\"test-600.png\", dpi=(600,600) )","out":"プログラムによる画像解像度の変更"}
{"in":"from user.models import *<nl>for u in User.query.all():<nl><tab> # \\u2013 is unicode for en-dash<nl><tab> if u\"\\u2013\" in u.occupation:<nl><tab><tab>  # replace with normal hyphen<nl><tab><tab>  u.occupation = u.occupation.replace(u\"\\u2013\", \"-\")<nl><tab><tab>  db.session.commit()","out":"FlaskでSQLAlchemyを使って全行で文字を置換する。"}
{"in":"SELECT {} FROM a_table.format(','.join(parameter_list))","out":"SELECT文で1つ以上のカラムを選択するためのパラメータの使用方法"}
{"in":"def flip_member(x):<nl><tab> if x == 1:<nl><tab><tab>  x += 1<nl><tab> else:<nl><tab><tab>  x -= 1<nl><tab> return x","out":"特定のコード行を再利用する"}
{"in":"word = 'lake1!'<nl>new_word = ''<nl>for char in word:<nl><tab> if char.isalpha():<nl><tab><tab>  new_word += char","out":"文字列からアルファベット以外の文字を削除する"}
{"in":"C = [ A[x] for x in range(len(A)) if B[x] ]","out":"リストコンフリクション"}
{"in":"print \"%.2f\" % (99990 \/ 100.0)","out":"整数の最後の2桁の前に小数を配置する。"}
{"in":"def ints(filename):<nl><tab><tab>  \"\"\"A function that takes the filename of a file as an input arguement, computs and returns a list of<nl><tab><tab>  integers of all the numbers in the file.\"\"\"<nl><tab><tab>  a = []<nl><tab><tab>  f = open(filename, \"r\")<nl><tab><tab>  lines = f.readlines()<nl><tab><tab>  f.close()<nl><tab><tab>  for line in lines:<nl><tab><tab><tab><tab>for character in line:<nl><tab><tab><tab><tab><tab> try:<nl><tab><tab><tab><tab><tab><tab>  a.append(int(character))<nl><tab><tab><tab><tab><tab> except ValueError:<nl><tab><tab><tab><tab><tab><tab>  pass<nl><tab><tab>  return a","out":"pythonでファイルを読み込んで操作する"}
{"in":"#my python3 script<nl>import subprocess<nl>subprocess.call([\"python2\", \"python2scipt.py\"])","out":"インタプリタのバージョンが異なるpythonからpythonスクリプトを実行する方法は？"}
{"in":"from bs4 import BeautifulSoup<nl>soup = BeautifulSoup('<html><body><a>bbb<\/a><\/body><\/html')<nl>soup.find('a')","out":"PythonでHTMLのデータフィールドを抽出する"}
{"in":"from subprocess import *<nl>from time import sleep<nl><nl>for i in range(2, 4):<nl><tab> x = Popen('python' + str(i) + ' --version', shell=True, stdout=PIPE, stdin=PIPE, stderr=STDOUT)<nl><tab> while x.poll() == None:<nl><tab><tab>  sleep(0.025)<nl><tab> print('Exit code of ' + str(i) + ' is:',x.poll())<nl><tab> x.stdout.close()<nl><tab> x.stdin.close()","out":"システムにインストールされているPythonの全バージョンを一覧表示する方法は？"}
{"in":"def accuracy(classifier, gold):<nl><tab> results = classifier.classify_many([fs for (fs,l) in gold])<nl><tab> correct = [l==r for ((fs,l), r) in zip(gold, results)]<nl><tab> if correct:<nl><tab><tab>  return float(sum(correct))\/len(correct)<nl><tab> else:<nl><tab><tab>  return 0","out":"NLTKを使ったアスペクトベースのセンチメント？"}
{"in":"with open('newfile.txt','w') as fileinput:<nl><tab> for start, end in searchPFAM(fname):<nl><tab><tab>  print start, end  <nl><tab><tab>  if start <= end:<nl><tab><tab><tab><tab>while start <= end:<nl><tab><tab><tab><tab><tab> result = makeList[start]<nl><tab><tab><tab><tab><tab> fileinput.write(result)<nl><tab><tab><tab><tab><tab> start += 1","out":"出力ファイルのデータが、本来出力されるべき結果をすべて出力していない。"}
{"in":"output=subprocess.Popen((\"certutil.exe -view -restrict  \\\"NotAfter<=now+30:00,NotAfter>=now+00:00\\\"\" ),stdout=subprocess.PIPE).stdout","out":"サブプロセスを使って、引数を二重引用符で囲んだアプリケーションをPython内部から呼び出すにはどうすればよいですか？"}
{"in":"def get_number(values):<nl><tab> total = 0<nl><tab> for val in reversed(values):<nl><tab><tab>  total = (total << 8) + val<nl><tab> return total","out":"Python の整数のリストを 16 進数に変換する。"}
{"in":"from PySide import QtGui<nl>fname, _ = QtGui.QFileDialog.getOpenFileName(None, 'Choose file','.')","out":"Enthought Canopyで動作するコードのファイルダイアログが必要です。"}
{"in":"ff = webdriver.Firefox()<nl>ff.implicitly_wait(10) # seconds","out":"Selenium webdriver find_element_by_xpath に時間がかかる。"}
{"in":"(input_img == 255).all(axis=2)","out":"opencv \/ Numpyを使ってpythonでカラー画像の白画素を探す"}
{"in":"from django.db import models<nl>from django.contrib import admin<nl><nl>class Employee(models.Model):<nl><tab> lastname = models.CharField(\"Last\", max_length=64)<nl><tab> firstname = models.CharField(\"First\", max_length=64)<nl><tab> middlename = models.CharField(\"Middle\", max_length=64)<nl><tab> clocknumber = models.CharField(max_length=16)<nl><nl><tab> def _get_full_name(self):<nl><tab><tab>  \"Returns the person's full name.\"<nl><tab><tab>  return '%s, %s %s' % (self.lastname, self.firstname, self.middlename)<nl><tab> full_name = property(_get_full_name)<nl><nl><nl><tab> class Meta:<nl><tab><tab>  ordering = ['lastname','firstname', 'middlename']<nl><nl>class EmployeeAdmin(admin.ModelAdmin):<nl><tab> list_display = ('clocknumber','full_name')<nl><tab> fieldsets = [(\"Name\", {\"fields\":((\"lastname\", \"firstname\", \"middlename\"), \"clocknumber\")}),<nl>]<nl><nl>admin.site.register(Employee, EmployeeAdmin)","out":"Djangoのモデルに計算フィールドを追加する方法"}
{"in":"import random<nl><nl>lst = ['!','-','=','~','|']<nl>string = 'Hello world. Hello world.'<nl><nl><nl>print ''.join('%s%s' % (x, random.choice(lst) if random.random() > 0.5 else '') for x in string)","out":"Python(パイソン)ランダムな位置で文字を他の文字の間に挿入する"}
{"in":"for i in data['topartists']['artist']:<nl><tab> print (i['name'])","out":"Python jsonからすべてを表示する"}
{"in":"hasht = \\<nl>{<nl><tab> \"A\" : [\"B\", \"D\", \"E\"],<nl><tab> \"B\" : [\"C\"],<nl><tab> \"C\" : [\"D\", \"E\"], <nl><tab> \"D\" : [\"C\", \"E\"], <nl><tab> \"E\" : [\"B\"]<nl>}<nl><nl>def recursive(start, finish):<nl><tab> paths=[]<nl><tab> def recursive_helper(path, finish):<nl><tab><tab>  for i in hasht[path[-1]]:<nl><tab><tab><tab><tab>if i == finish:<nl><tab><tab><tab><tab><tab> paths.append(path + [i])<nl><tab><tab><tab><tab><tab> continue<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> recursive_helper(path + [i], finish)<nl><tab> recursive_helper([start], finish)<nl><tab> return paths<nl><nl>print recursive(\"C\", \"C\")","out":"グラフを再帰的に生成する - Python"}
{"in":"cursor.execute(\"update Gps_table set longitude=?,latitude=? where gps_id=1\", s1, s2)","out":"pyodbcを使用してSQLデータベーステーブルの複数のcloumsを更新することができません。"}
{"in":"print root11.__repr__()","out":"python 複雑な数の印刷結果がシェル出力と異なる。"}
{"in":"comment = Comment.objects.create(**params)","out":"djangoでメソッドを通して新しいコメントを投稿する方法は？"}
{"in":"import fileinput<nl><nl>for fl, line in zip(li, fileinput.input(['a.txt'], inplace=True)):<nl><tab> print(line.strip() + '\\t' + str(fl))","out":"Python - 既存のタブ区切りファイルに列を追加する"}
{"in":"print \"<tr><td>Review <\/td><td><input type=\\\"textarea\\\" name=\\\"Review\\\" cols=\\\"50\\\" rows=\\\"5\\\" \/>\"<nl>print \"\"\"<nl><tab> Enter some text...<nl><tab> <\/textarea><nl><tab> <br \/><nl><nl>\"\"\"","out":"HTML Python 正しい構文"}
{"in":"# weapon.py<nl>class Weapon:<nl><tab> def __init__(self, name, dmg):<nl><tab><tab>  self.name = name<nl><tab><tab>  self.dmg  = dmg<nl><nl><tab> def attack(self, target):<nl><tab><tab>  target.health -= self.dmg<nl><nl># fighter.py<nl>class Fighter:<nl><tab> def __init__(self, name, weapon=None):<nl><tab><tab>  self.name<tab>= name<nl><tab><tab>  self.weapon = weapon<nl><nl><tab> def attack(self, target):<nl><tab><tab>  if self.weapon is None:<nl><tab><tab><tab><tab># punch him<nl><tab><tab><tab><tab>target.health -= 2<nl><tab><tab>  else:<nl><tab><tab><tab><tab>self.weapon.attack(target)","out":"Pythonで他のクラスからメソッドを呼び出す"}
{"in":"class Category(models.Model):<nl><tab>name = models.CharField(max_length=30, unique=True)<nl><nl><tab>def __unicode__(self):<nl><tab><tab>  return self.name","out":"djangoのセレクトボックスでオプションの名前を変更するにはどうすればよいですか？"}
{"in":"plt.savefig('test.png',  bbox_inches='tight', pad_inches=0.1)","out":"Python - matplotlibのサブプロットにおけるサイズの問題"}
{"in":"import pandas as pd<nl><nl>data = []<nl>for line in open('temp.text'):<nl><tab> if line.startswith('\/media\/'):<nl><tab><tab>  path = line[:-1]<nl><tab> else:<nl><tab><tab>  rights = line.split()[1]<nl><tab><tab>  owner = re.match('.*.CN=([^.]+).*', line).groups()[0]<nl><tab><tab>  row = {'path': path, 'right': rights, 'owner': owner}<nl><tab><tab>  data.append(row)<nl>df = pd.DataFrame(data)<nl>df[df.owner=='Dog']","out":"パンダのDFとRE - 一致するYを見つけ、次にXの最後の出現箇所を見つける"}
{"in":"data = request.body.read()","out":"bottle python put データに対するpostに相当する。"}
{"in":"fin = open(\"foo1.txt\")<nl>G={}<nl>for line in fin: # load data, create adj lists<nl><tab> lst = line.split()<nl><tab> lst = [int(x) for x in lst]<nl><tab> G[lst[0] ]=lst[1:]<nl>print(G)","out":"pythonでファイルを読み込んでリストを作成すると、空リストになる。"}
{"in":"def range_sum(nums, sum=0):<nl><tab> if not nums:<nl><tab><tab>  return sum<nl><tab> sum += nums.pop()<nl><tab> return range_sum(nums, sum)","out":"Python - 整数のリストを作成し、再帰を使用してそれらを加算します。"}
{"in":"from sklearn.metrics import f1_score","out":"Sklearnをポジティブに偏らせる 多項式NBの場合"}
{"in":"for node in entry:<nl><tab> video_title = node.getElementsByTagName('title')[0].firstChild.nodeValue<nl><tab> print video_title","out":"Pythonを使用してYouTubeのXMLを解析する方法は？"}
{"in":"def get_name(line):<nl><tab> return line[1:].rsplit('|', 1)[-1].strip()<nl><nl>with open('input.txt') as f, open('output.txt', 'w') as fout:<nl><tab> name = ''<nl><nl><tab> # Phase 1: Find unavailable sequence<nl><tab> unavailable = set()<nl><tab> for line in f:<nl><tab><tab>  if line.startswith('>'):<nl><tab><tab><tab><tab>name = get_name(line)<nl><tab><tab>  else:<nl><tab><tab><tab><tab>if 'Sequence unavailable' in line:<nl><tab><tab><tab><tab><tab> unavailable.add(name)<nl><nl><tab> # Phase 2: Filter avilable sequence<nl><tab> f.seek(0)<nl><tab> keep = False<nl><tab> for line in f:<nl><tab><tab>  if line.startswith('>'):<nl><tab><tab><tab><tab>name = get_name(line)<nl><tab><tab><tab><tab>keep = name not in unavailable<nl><tab><tab>  if keep:<nl><tab><tab><tab><tab>fout.write(line)","out":"テキストファイルから特定の行を削除する"}
{"in":"[Toplevel][1]","out":"複数のTkinterウィンドウを持つチェックボタン"}
{"in":"# Get a cursor for the entire collection<nl>docs = db.collection.find()<nl><nl>for doc in docs:<nl><tab> # Get all documents that have a common element<nl><tab> related_docs = db.collection.find({\"$or\": [<nl><tab><tab>  {\"color\": doc[\"color\"]},<nl><tab><tab>  {\"name\": doc[\"name\"]},<nl><tab><tab>  {\"age\": doc[\"age\"]},<nl><tab><tab>  ]})<nl><nl><tab> # Record the relationships in whatever structure you're using<nl><tab> for related_doc in related_docs:<nl><tab><tab>  store_relationship(doc, related_doc)","out":"rdflibを利用してDBの全関係を取得する。"}
{"in":"from math import sqrt<nl>from joblib import Parallel, delayed<nl>import multiprocessing<nl><nl>if __name__ == '__main__':<nl><tab> test = Parallel(n_jobs=2)(delayed(sqrt)(i ** 2) for i in range(10))<nl><tab> print(test)","out":"joblib を使った Python の単純な並列計算"}
{"in":"re.findall(r\"vcxproj.*?\\{(.*?)\\}\", text)","out":"記号間のマッチパターン、与えられたパターンの後に"}
{"in":"num = 12345678<nl>first_four = int(str(num)[:4])<nl>last_four = int(str(num)[4:])<nl>middle_two = int(str(num)[3:5])","out":"数値変数の最後の数値を取得するにはどうすればよいですか？"}
{"in":"if user not in data:<nl><tab> data[user] = []<nl>data[user].append({'item': row[0], 'time': row[1]})","out":"Pythonで連想配列の追加を行う。"}
{"in":"def makePlayFair(key, alpha):<nl><nl><nl><tab> letters = []<nl><tab> for letter in key + alpha:<nl><tab><tab>  if letter not in letters:<nl><tab><tab><tab><tab>letters.append(letter)<nl><nl><tab> box = []<nl><tab> for line_number in range(5):<nl><tab><tab>  box.append( letters[line_number * 5: (line_number+1) * 5])","out":"私のpythonメソッドが正しく動作しない、リストのアイテムをスキップする（playfair cipher)"}
{"in":"def right_justify(s):<nl><tab> print \"%70s\" % s","out":"は、先頭のスペースが十分にある文字列を表示しますか？"}
{"in":"def depluralise(plurals, plural_endings):<nl><tab> new_list = []<nl><tab> for plural, plural_ending in zip(plurals, plural_endings):<nl><tab><tab>  if plural.endswith(plural_ending):<nl><tab><tab><tab><tab>if plural_ending == '':<nl><tab><tab><tab><tab><tab> new_list.append(plural)<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> new_list.append(plural[:-len(plural_ending)])<nl><tab> return new_list <nl><nl><nl>plural_string = \"cell phones|sheep|oxen\"<nl>plurals = plural_string.split('|')<nl>plural_endings_string = \"s,,en\"<nl>plural_endings = plural_endings_string.split(',')<nl><nl>print depluralise(plurals, plural_endings)<nl><nl>plurals = ['children', 'brothers', 'fish', 'penguins']<nl>plural_endings = ['ren', 's', '', 's']<nl><nl>print depluralise(plurals, plural_endings)","out":"Python - 2番目のリストの要素の終わりから1番目のリストの要素を「引き算」する。要素は整数ではなく文字列"}
{"in":"hour_list = [int(t[:2]) for t in time_new]","out":"時間のTypeErrorヒストグラム"}
{"in":"for i in tree.get_children():<nl><tab> tree.delete(i)","out":"Tkinterでツリービュー全体をクリアする方法"}
{"in":"import glob<nl>import pandas as pd<nl><nl>combined = []<nl>for filepath in glob.glob('path\/to\/your\/files\/*.exp'):<nl><tab> combined.append(pd.read_table(filepath, sep='\\t', header=None))<nl>combined = pd.concat(combined, ignore_index=True)","out":"Pythonデータのカラム数が可変、複数の.expファイル"}
{"in":"line = 5<nl>print (line-1) * \" \" + \"* \"<nl>for i in xrange(1,line-1):<nl><tab> print (line-i-1)* \" \" +  \"*\" + (2*i -1)*\" \" + \"* \"<nl>print (line) * \"* \"","out":"Python 2.7を使った三角形の作り方"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import re<nl><nl>if __name__ == \"__main__\":<nl><tab> lines = {' foo<tab><tab>(bar)<tab> '}<nl><tab> parens_regex = re.compile(r'\\(.*?\\)')  # Non-greedy<nl><tab> space_regex =  re.compile(r'\\s+')<nl><nl><tab> for line in lines:<nl><tab><tab>  print 'Before: \"%s\"' % line<nl><tab><tab>  line_tmp = parens_regex.sub('', line)  # Before space-regex so we also collapse space around parens<nl><tab><tab>  line_tmp = space_regex.sub(' ', line_tmp)<nl><tab><tab>  line_tmp = line_tmp.strip()<nl><tab><tab>  print 'After: \"%s\"' % line_tmp  # Prints: \"foo\"","out":"空白文字と括弧内のテキストを削除 - 私の作業コードをよりエレガントにする"}
{"in":"import pyPdf<nl><nl>def getPDFContent(path):<nl><tab> content = \"\"<nl><tab> # Load PDF into pyPDF<nl><tab> pdf = pyPdf.PdfFileReader(file(path, \"rb\"))<nl><tab> # Iterate pages<nl><tab> for i in range(0, pdf.getNumPages()):<nl><tab><tab>  # Extract text from page and add to content<nl><tab><tab>  content += pdf.getPage(i).extractText() + \"<nl>\"<nl><tab> # Collapse whitespace<nl><tab> content = \" \".join(content.replace(\"\\xa0\", \" \").strip().split())<nl><tab> return content<nl><nl>for f in filelist:<nl><tab> print keyword in getPDFContent(f)","out":"400以上のPDFファイルからキーワードを検索する方法は？"}
{"in":"import urllib2<nl>req = urllib2.urlopen(\"http:\/\/en.wikipedia.org\/w\/api.php?action=parse&page=China&format=json&prop=text\")<nl>content = req.read()<nl># content in json - use json or simplejson to get relevant sections.","out":"Pythonでwikipediaのページをパースするには？"}
{"in":"create_upload_url()","out":"BlobstoreアップロードハンドラーからユーザーのIPを取得する方法は？"}
{"in":"newlist = [sublist[:2] for sublist in mylist]","out":"リストのリスト内の各リストの要素の範囲を返す。"}
{"in":"print \"mysqldump database\",<nl>for i in range(n):<nl><tab> print \"shard_\"+str(2*i),","out":"特定のMySQLテーブルをあるマシンから別のマシンへ自動的に移動させる方法は？"}
{"in":"df.index = df.index.to_datetime()","out":"Pythonによるインデックスの曜日によるデータフレーム行の選択"}
{"in":"#!\/usr\/bin\/env python<nl>from pylab import *<nl><nl>def f(t):<nl><tab> s1 = cos(2*pi*t)<nl><tab> e1 = exp(-t)<nl><tab> return multiply(s1,e1)<nl><nl>t1 = arange(0.0, 5.0, 0.1)<nl>t2 = arange(0.0, 5.0, 0.02)<nl>t3 = arange(0.0, 2.0, 0.01)<nl><nl>figure(figsize=(4, 4))<nl>sub1 = subplot(211)<nl>l = plot(t1, f(t1), 'bo', t2, f(t2), 'k--', markerfacecolor='green')<nl>grid(True)<nl>title('A tale of 2 subplots')<nl>ylabel('Damped oscillation')<nl><nl>## I ADDED THIS<nl>autoAxis = sub1.axis()<nl>rec = Rectangle((autoAxis[0]-0.7,autoAxis[2]-0.2),(autoAxis[1]-autoAxis[0])+1,(autoAxis[3]-autoAxis[2])+0.4,fill=False,lw=2)<nl>rec = sub1.add_patch(rec)<nl>rec.set_clip_on(False)<nl><nl>subplot(212)<nl>plot(t3, cos(2*pi*t3), 'r.')<nl>grid(True)<nl>xlabel('time (s)')<nl>ylabel('Undamped')<nl><nl>savefig('test.png')","out":"matplotlib でサブプロットの周囲に境界線を引く"}
{"in":"# define a class object (your class may be more complicated than this...)<nl>class A(object):<nl><tab> pass<nl><nl># a class method takes the class object as its first variable<nl>def func(cls):<nl><tab> print 'I am a class method'<nl><nl># you can just add it to the class if you already know the name you want to use<nl>A.func = classmethod(func)<nl><nl># or you can auto-generate the name and set it this way<nl>the_name = 'other_func' <nl>setattr(A, the_name, classmethod(func))","out":"pythonでクラスのメソッドを動的に作成するにはどうすればよいですか？"}
{"in":"if m:  #only execute this if a match was found<nl><tab>print m.group()  #m.group() is the portion of the string that matches your regex.","out":"Pythonで文字列の1桁目を取得する"}
{"in":"import shutil<nl><nl>path = input(\"Enter path to delete\")<nl><nl>shutil.rmtree(path);","out":"ファイル削除プログラムを作ろうとしています"}
{"in":"class RegisterView(generic.CreateView):<nl><tab> model = User<nl><tab> form_class = forms.RegisterForm<nl><tab> template_name = 'register.html'<nl><tab> success_url = reverse_lazy('platforms')<nl><nl><tab> def get(self, request, *args, **kwargs):<nl><tab><tab>  if request.user is not None:<nl><tab><tab><tab><tab>return redirect('home')<nl><tab><tab>  # register logic<nl><tab><tab>  return render(request, 'register.html', data)<nl><nl><tab> def form_valid(self, form):<nl><tab><tab>  response = super(RegisterView, self).form_valid(form)<nl><tab><tab>  user = authenticate(username=form.instance.username, password=form.cleaned_data['password'])<nl><tab><tab>  login(self.request, user)<nl><tab><tab>  return response","out":"クラスビューにロジックを追加する方法"}
{"in":"[x[1] for x in elements]","out":"Pythonでタプルのリストからn番目の要素を抽出する方法は？"}
{"in":"test_rec[(test_rec.age==1) & (test_rec.sex==1)]","out":"pythonで配列に複数のインディケータを使用する。"}
{"in":"temp_input=raw_input()  #taking the input<nl>lst=temp_input.split(\";\") # splitting the input and saving in a list<nl>for i in lst: # iterating through the list<nl><tab> parse(i) # calling parse() with single list element","out":"リストの値を関数で送る"}
{"in":"import os<nl><nl>direc = os.getcwd() # Get current working directory<nl>ext = '.txt' # Select your file delimiter<nl><nl>file_dict = {} # Create an empty dict<nl><nl># Select only files with the ext extension<nl>txt_files = [i for i in os.listdir(direc) if os.path.splitext(i)[1] == ext]<nl><nl># Iterate over your txt files<nl>for f in txt_files:<nl><tab> # Open them and assign them to file_dict<nl><tab> with open(os.path.join(direc,f)) as file_object:<nl><tab><tab>  file_dict[f] = file_object.read()<nl><nl># Iterate over your dict and print the key\/val pairs.<nl>for i in file_dict:<nl><tab> print i, file_dict[i]","out":"Pythonでフォルダからファイルをdictに変換する。"}
{"in":"import cgi<nl>escaped = cgi.escape(unescaped)","out":"Pythonで'<'と'>'を自動変換する"}
{"in":"def find_convergence(iterable, count):<nl><tab> current_count = 0<nl><tab> last = None<nl><nl><tab> for i, x in enumerate(iterable):<nl><tab><tab>  if x == last:<nl><tab><tab><tab><tab>current_count += 1<nl><nl><tab><tab><tab><tab>if current_count == count:<nl><tab><tab><tab><tab><tab> return i - count + 1<nl><tab><tab>  else:<nl><tab><tab><tab><tab>last = x<nl><tab><tab><tab><tab>current_count = 1","out":"python - 次の10個の項目の繰り返しが始まる項目のインデックス。"}
{"in":"from multiprocessing import Pool<nl>from multiprocessing import cpu_count<nl><nl><nl>def handle_tiff(some_file):<nl><tab> data_open = gdal.Open(some_file)<nl><tab> data_array = data_open.ReadAsArray().astype(np.float32) <nl><tab> return data_array<nl><nl>tiff_files = glob.glob('*.tif') <nl>p = Pool(cpu_count()- an_integer)<nl>all_data = p.map(handle_tiff, tiff_files)","out":"ディスクからのデータの読み込みを高速化し、さらに処理するためにnumpy配列に変換するためのソリューションがあれば教えてください。"}
{"in":"import active_directory<nl><nl>homeMDB = \"CN=UBER MAILBOX,CN=InformationStore,CN=UBERMAILSERVER,\"\\<nl><tab><tab>  \"CN=Servers,CN=Administrative Groups,CN=UBERORG,\"\\<nl><tab><tab>  \"CN=Microsoft Exchange,CN=Services,CN=Configuration,\"\\<nl><tab><tab>  \"DC=uber,DC=org,DC=uk\"<nl><nl>user=active_directory.find_user(\"captain.awesomeface\")<nl>user.CreateMailbox(homeMDB)<nl><nl><nl>user.Properties[\"mail\"].Value = \"captain.awesomeface@uberorg.com\";<nl><nl>user.SetInfo()","out":"pythonからExchangeメールボックスを作成する"}
{"in":"# Import pyplot and dates from matplotlib<nl>import matplotlib.pyplot as plt<nl>import matplotlib.dates as mdates<nl># Set date format and major locator of x-axis<nl>plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y%m%d'))<nl>plt.gca().yaxis.set_major_locator(mdates.DayLocator())<nl># Actually plot the data<nl>plt.plot([x[0] for x in rows],[y[1] for y in rows])<nl># Fix ticklabels so they don't overlap in the figure<nl>plt.gcf().autofmt_xdate()","out":"datetime.dateオブジェクトをfloatにパースする方法"}
{"in":"import subprocess<nl>sp = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)<nl>output, _ = sp.communicate()<nl>print \"Status:\", sp.wait()<nl>print \"Output:\"<nl>print output","out":"出力コマンドを変数やファイルにリダイレクトする？"}
{"in":"def checkNextID(ID):<nl><tab> global numOfRuns, curRes, lastResult<nl><tab> while ID < lastResult:<nl><tab><tab>  try:<nl><tab><tab><tab><tab>numOfRuns += 1<nl><tab><tab><tab><tab>if numOfRuns % 10 == 0:<nl><tab><tab><tab><tab><tab> time.sleep(3) # sleep every 10 iterations<nl><tab><tab><tab><tab>if isValid(ID + 8):<nl><tab><tab><tab><tab><tab> parseHTML(curRes)<nl><tab><tab><tab><tab><tab> ID = ID + 8<nl><tab><tab><tab><tab>elif isValid(ID + 18):<nl><tab><tab><tab><tab><tab> parseHTML(curRes)<nl><tab><tab><tab><tab><tab> ID = ID + 18<nl><tab><tab><tab><tab>elif isValid(ID + 7):<nl><tab><tab><tab><tab><tab> parseHTML(curRes)<nl><tab><tab><tab><tab><tab> ID = ID + 7<nl><tab><tab><tab><tab>elif isValid(ID + 17):<nl><tab><tab><tab><tab><tab> parseHTML(curRes)<nl><tab><tab><tab><tab><tab> ID = ID + 17<nl><tab><tab><tab><tab>elif isValid(ID+6):<nl><tab><tab><tab><tab><tab> parseHTML(curRes)<nl><tab><tab><tab><tab><tab> ID = ID + 6<nl><tab><tab><tab><tab>elif isValid(ID + 16):<nl><tab><tab><tab><tab><tab> parseHTML(curRes)<nl><tab><tab><tab><tab><tab> ID = ID + 16<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> ID = ID + 1<nl><tab><tab>  except Exception, e:<nl><tab><tab><tab><tab>print \"somethin went wrong: \" + str(e)","out":"Python: Pythonオブジェクトの呼び出し時に最大再帰深度を超えた。"}
{"in":"def get_ffmpeg_bin():<nl><tab> ffmpeg_dir = helper_functions.get_ffmpeg_dir_path()<nl><tab> FFMPEG_BIN = os.path.join(ffmpeg_dir, \"ffmpeg.exe\")<nl><tab> return FFMPEG_BIN<nl><nl><nl>def split_vid_from_path(video_file_path, start_time, end_time):<nl><tab> ffmpeg_binary =  get_ffmpeg_bin()<nl><tab> output_file_name = get_next_file_name(video_file_path)<nl><tab> pipe = sp.Popen([ffmpeg_binary,\"-v\", \"quiet\", \"-y\", \"-i\", video_file_path, \"-vcodec\", \"copy\", \"-acodec\", \"copy\",<nl><tab><tab><tab><tab><tab>  \"-ss\", start_time, \"-t\", end_time, \"-sn\", output_file_name ])<nl><nl><nl><tab> pipe.wait()<nl><tab> return True<nl><nl><nl>sample_vid = os.path.join(get_sample_vid_dir_path(), \"Superman-01-The_Mad_Scientist.mp4\")<nl>split_vid_from_path(sample_vid, \"00:00:00\", \"00:00:17\")","out":"Python 動画編集 -- 動画のトリミング方法"}
{"in":"import os<nl>os.path.abspath(file_csv.name)","out":"django でアップロードされたファイルのローカルパスを取得する。"}
{"in":"arrow.get(s, 'YYYY\/M\/D HH:mm:ss').replace(tzinfo=dateutil.tz.gettz(tz))","out":"Arrowを使ってタイムゾーンを含む文字列から日付と時刻を解析する。"}
{"in":"random.randint(a, b)","out":"pygameを使ってスプライトをランダムな場所にスポーンさせるにはどうしたらいいですか？"}
{"in":"layout = g.layout_reingold_tilford(mode=\"in\", root=0)","out":"ルートノードを頂点とするツリー状のグラフをプロットする。"}
{"in":"{{ some_date|date:\"j-M\" }}","out":"django テンプレート 日付 フィルター フォーマット 文字列 質問"}
{"in":"class Blog(Module):<nl><tab> def _get_posts(self):<nl><tab><tab>  return Post.objects.filter(module=self)<nl><tab> posts = property(_get_posts)","out":"継承・子オブジェクトでrelated_nameをオーバーライドするにはどうすればよいですか？"}
{"in":"for (name, amount) in cursor: <nl><tab> print(\"{}\".format(name)+ \"\\t\\t\\t\" + \"{:>5}\".format(\"$\"+ \"{:.0f}\".format(amount).strip()))","out":"金額表示で、余白だけでなく、数字の横に「$」を付けて右寄せにするにはどうすればよいですか？"}
{"in":"for x in xrange(5):<nl><tab> item = QTableWidgetItem()<nl><tab> item.setText(\"blah blah\")<nl><tab> self.tableWidget.setItem(n, 0, item)","out":"PyQt - QTableWidgetのsetTextメソッドがAttributeErrorになる。"}
{"in":"import scipy.cluster.vq as spa<nl>print spk.kmeans2(dataset, 5)[0]  # for code<nl>print spk.kmeans2(dataset, 5)[1]  # for label","out":"Pythonでreturn関数を表示する方法"}
{"in":"import ctypes<nl>from ctypes import *<nl><nl>winmm= windll.winmm<nl>print 'waveInGetNumDevs=',winmm.waveInGetNumDevs()","out":"pythonを使用して、1つのマイクがアクティブであるかどうかを確認する方法は？"}
{"in":"from scipy import linalg, mat, dot<nl>a = mat([-0.711,0.730])<nl>b = mat([-1.099,0.124])<nl><nl>c = dot(a,b.T)\/linalg.norm(a)\/linalg.norm(b)","out":"2つの行列のコサイン類似度を計算する - Python"}
{"in":"from itertools import groupby<nl>from operator import itemgetter<nl>dict(((u, sum(row['score'] for row in rows)) for u, rows in<nl><tab> groupby(sorted(d, key=itemgetter('alias')), key=itemgetter('alias'))))<nl># {'2133232': 158, 'u234243': 416}","out":"辞書の一覧で、キーとなる値に対して比較を行うにはどうしたらよいですか？"}
{"in":"import csv<nl><nl>bottle_list = []<nl><nl># Read all data from the csv file.<nl>with open('a.csv', 'rb') as b:<nl><tab> bottles = csv.reader(b)<nl><tab> bottle_list.extend(bottles)<nl><nl># data to override in the format {line_num_to_override:data_to_write}. <nl>line_to_override = {1:['e', 'c', 'd'] }<nl><nl># Write data to the csv file and replace the lines in the line_to_override dict.<nl>with open('a.csv', 'wb') as b:<nl><tab> writer = csv.writer(b)<nl><tab> for line, row in enumerate(bottle_list):<nl><tab><tab><tab>data = line_to_override.get(line, row)<nl><tab><tab><tab>writer.writerow(data)","out":"PythonのCSVモジュールでcsvファイルの特定の行を上書きする"}
{"in":"user.save()","out":"djangoのモデルにおける継承とデータの保存"}
{"in":"import re<nl>pattern = re.compile('prod\/([\\d_]+)\/x\/blah')<nl>query<tab>= \"http:\/\/www.example.com\/blah\/prod\/4_2343_234\/x\/blah.html\"<nl>result  = pattern.search(query).group(1)<nl>print result","out":"動的なURLから値を取得する"}
{"in":"import urllib2<nl>import time<nl>url = 'Roblox url'<nl>data = urllib2.urlopen(url)<nl>time.sleep(10)<nl>data = data.read()","out":"Python - Urllib2 データをスクレイピングするためにページがロードされるのを待つ。"}
{"in":"import serial, time, struct<nl><nl>ser = serial.Serial(\"\/dev\/ttyAMA0\", 9600)<nl><nl><nl><nl>while True:<nl><nl><tab> count = 0<nl><tab> AValue = []<nl><tab> for ch in ser.read():<nl><tab><tab>  if ch == \"<nl>\":<nl><tab><tab><tab><tab>AValue = []<nl><tab><tab><tab><tab>time.sleep(0.1)<nl><nl><tab> while count < 4:<nl><tab><tab>  for ch in ser.read():<nl><tab><tab><tab><tab>AValue.append(ch)<nl><tab><tab><tab><tab>count += 1","out":"Raspberry piのUART受信データ（PIN 10, RX）をTkinter Windowに表示する方法。"}
{"in":"print \"text : \", repr(singleTweetJson[index])","out":"json pythonを使ったunicodedツイートのパージング"}
{"in":"class MySpinBox(QtGui.QSpinBox):<nl><tab> def __init__(self, *args):<nl><tab><tab> QtGui.QSpinBox.__init__(self, *args)<nl><nl><tab><tab> self.setRange(0,9999)<nl><nl><tab> def textFromValue(self, value):<nl><tab><tab> return \"%04d\" % value","out":"PyQt4 QSpinBoxの値形式"}
{"in":"import pandas as pd<nl>s = pd.Series({'a':1, 'b':2, 'c':3})<nl>s.values # a numpy array","out":"辞書をnumpyの配列に変換するPythonicな方法"}
{"in":"import json <nl>payload = json.dumps({\"on\":True})","out":"Python 'requests'を使ってJSON booleanを送信する。"}
{"in":"from subprocess import Popen<nl>Popen('gdb a.out', shell=True).communicate()<nl>print 'test'","out":"コンソールウィンドウの制御をサブプロセスに渡す"}
{"in":"bufsize = 0<nl>f = open('file.txt', 'w', bufsize)","out":"pythonはどれくらいの頻度でファイルにフラッシュしますか？"}
{"in":"def load_binary(file):<nl><tab> with open(file, 'rb') as file:<nl><tab><tab>  return file.read()","out":"Python HTTPサーバーで画像をエンコードして送信する方法は？"}
{"in":"for book in books:<nl><tab><tab>  print \"%d\/%d\" % (curr, total)<nl><tab><tab>  if book.cover_url != \"\":<nl><tab><tab><tab><tab>new_path = string.replace(book.cover_url.path, \"app-old\/\", \"\")<nl><tab><tab><tab><tab>book.cover_url = new_path<nl><tab><tab><tab><tab>book.save()<nl><tab><tab>  curr+=1","out":"ImageFieldに新しい `path` 値を設定する。"}
{"in":"os.path.dirname(__file__)","out":"Python スクリプトが別の場所から実行される場合、その場所を参照する。"}
{"in":"f = open('your_file.txt')<nl>lines = f.readlines()<nl>res = [x for x in lines if str(year) in x.split()[1]]<nl>print res","out":"関数を使用してテキストファイルから特定のデータを取得する。パイソン3"}
{"in":"frame = wx.Frame( None, title=\"Hello wxPython\", style = wx.CLOSE_BOX | wx.CAPTION | wx.RESIZE_BORDER )","out":"wxpython : 背景画像とボタンを追加する。"}
{"in":"threads = Thread.objects.all()[:30]<nl>threads_by_pk = dict((t.pk, t) for t in threads)<nl># Extra info about threads that the user have visited<nl>visited_threads = VisitedThread.objects.filter(pk__in=threads_by_pk.keys(), user=request.user)<nl><nl># I want to loop the visited_threads and add info to thread in threads with new info<nl>for visited_thread in visited_threads:<nl><tab> thread = threads_by_pk[visited_thread.pk]<nl><tab> thread.has_unread_post = thread.post_count > visited_thread.post_count","out":"object_listの一部のオブジェクトをループ\/変更するための最良の方法"}
{"in":"dont_start_with_these = ('10.', '172.16.', '172.31.', '192.168')<nl><nl>filtered_ip = [ip for ip in fil2 if not ip[0].startswith(dont_start_with_these)]","out":"ネストしたリストからポートを持つプライベートIPをフィルタリング\/削除\/除外する。"}
{"in":"# Safe since everything in the namespace begins with 'Q'<nl>from PyQt4.QtGui import *<nl><nl>class MyMessageBox(QMessageBox):<nl><nl><tab> # This is a much better way to extend __init__<nl><tab> def __init__(self, *args, **kwargs):<tab><tab><tab><tab><nl><tab><tab>  super(MyMessageBox, self).__init__(*args, **kwargs)<nl><tab><tab>  # Anything else you want goes below<nl><nl><tab> # We only need to extend resizeEvent, not every event.<nl><tab> def resizeEvent(self, event):<nl><nl><tab><tab>  result = super(MyMessageBox, self).resizeEvent(event)<nl><nl><tab><tab>  details_box = self.findChild(QTextEdit)<nl><tab><tab>  # 'is not' is better style than '!=' for None<nl><tab><tab>  if details_box is not None:<nl><tab><tab><tab><tab>details_box.setFixedSize(details_box.sizeHint())<nl><nl><tab><tab>  return result","out":"PyQt4でQMessageBoxのリサイズを許可する方法"}
{"in":"def repeat(x,Y):<nl><tab> A = list(str(x)) #makes a list, A, of each digit: 101 becomes ['1','0','1']<nl><tab> A = map(int,A)  #converts each value of the new list to integers<nl><tab> print 'Proceessing', x<nl><tab> for i in range(0,10):  <nl><tab><tab>  b = A.count(i) #counts how many times each digit is present<nl><tab><tab>  if b>1:<tab><tab><tab>#if there is repetition<nl><tab><tab><tab><tab>print 'Removed', x<nl><tab><tab><tab><tab>Y.remove(x)<nl><nl><nl>B = []<nl>for i in range(100,1000):<tab>#needs to be a 3 digit number (100 until 999)<nl><tab> if i%17 == 0:<nl><tab><tab>  B.append(i)<tab><tab><tab>#creates list of factors of 17<nl>print B<nl><nl>for j in B:<tab><tab><tab><tab><tab>  #removes any values that have digits that occur more than once<nl><tab> repeat(j,B)<nl><nl>print B","out":"繰り返しのある整数を削除する関数で、1つのエントリーがスキップされます。"}
{"in":"x=np.array([6,3,5,2,1,4,9,7,8])<nl>y=np.array([2,1,3,5,7,9,8,10,7])<nl><nl>sort_idx = np.argsort(x)<nl>y=y[sort_idx]<nl>x=x[sort_idx]<nl>minm=np.array([],dtype=int)<nl>maxm=np.array([],dtype=int)<nl>length = y.size<nl>i=0<nl><nl>while i < length-1:<nl><tab> if i < length - 1:<nl><tab><tab>  while i < length-1 and y[i+1] >= y[i]:<nl><tab><tab><tab><tab>i+=1<nl><nl><tab><tab>  if i != 0 and i < length-1:<nl><tab><tab><tab><tab>maxm = np.append(maxm,i)<nl><nl><tab><tab>  i+=1<nl><nl><tab> if i < length - 1:<nl><tab><tab>  while i < length-1 and y[i+1] <= y[i]:<nl><tab><tab><tab><tab>i+=1<nl><nl><tab><tab>  if i < length-1:<nl><tab><tab><tab><tab>minm = np.append(minm,i)<nl><tab><tab>  i+=1<nl><nl><nl>print minm,maxm","out":"関数のxとyの値をnp.arrayで与えた場合、すべての最大値を求めるには？"}
{"in":"from xgoogle.search import GoogleSearch, SearchError<nl>try:<nl>  page = 1<nl>  gs = GoogleSearch(\"foo bar\")  <nl>  gs.results_per_page = 100<nl>  results = []<nl>  while page < 10:<nl><tab><tab>gs.page = page<nl><tab><tab>results += gs.get_results()<nl><tab><tab>page += 1<nl>except SearchError, e:<nl>  print \"Search failed: %s\" % e<nl>for res in results:<nl><tab> print res.url","out":"python xgoogle ライブラリで問題が発生しました。検索結果10件という制限を増やすには？"}
{"in":"import nltk<nl>nltk.download()","out":"stanford NLTK python moduleを入手するにはどうしたらいいですか？"}
{"in":"[logger_root]<nl>level=DEBUG<nl>handlers=screen,file","out":"pythonでロギングレベルを設定する"}
{"in":"from win32com.client import Dispatch<nl><nl>excel = Dispatch('Excel.Application')<nl>wb = excel.Workbooks.Open(\"D:\\\\output.xlsx\")<nl><nl>#Activate second sheet<nl>excel.Worksheets(2).Activate()<nl><nl>#Autofit column in active sheet<nl>excel.ActiveSheet.Columns.AutoFit()<nl><nl>#Save changes in a new file<nl>wb.SaveAs(\"D:\\\\output_fit.xlsx\")<nl><nl>#Or simply save changes in a current file<nl>#wb.Save()<nl><nl>wb.Close()","out":"Pythonを使用してExcelシートの全列をオートフィットさせる"}
{"in":"nums = [3,51,34]<nl>reduce(lambda x, y: [y] if not x else x + [y + x[-1]], nums, None)<nl># [3, 54, 88]","out":"Pythonでリスト要素に数学演算を行うにはどうすればよいですか？"}
{"in":"box_top = (0, 0, x, y \/ 2)<nl>top_part = im1.crop(box_top)<nl>result = im2.copy()<nl>result.paste(top_part, box_top)","out":"画像の一部を貼り付ける - python, PILモジュール"}
{"in":"import psycopg2<nl>from psycopg2.extensions import AsIs<nl><nl>column_list = ['id','name']<nl>columns = ', '.join(column_list)<nl><nl>cursor.execute(\"SELECT %s FROM table\", (AsIs(columns),))","out":"psycopg2でのパラメータの受け渡し"}
{"in":"ships.update(<nl>  {'_id': 1}, <nl>  {\"$set\": {'staff': staff}},<nl>  false,true<nl>)","out":"pymongo：dictを含むフィールドを追加する"}
{"in":"from bs4 import BeautifulSoup<nl><nl>soup = BeautifulSoup(html)<nl><nl>table = soup.find('table', id='test_table')<nl>for anchor in table.find_all('a'):<nl><tab> print anchor['href'], anchor.string","out":"Pythonの正規表現で、マッチした要素に1つの正規表現でマッチする。"}
{"in":"total = value[c1-1]+value[c2-1]","out":"Pythonでリスト内の文字列と整数の和をとる。"}
{"in":"from django.utils import simplejson<nl><nl>def post(self, request, *args, **kwargs):<nl><tab> isUpvote = simplejson.loads(request.POST.get('isUpvote'))","out":"JavascriptからDjangoへBoolean値を変換する？"}
{"in":"s = s.extra(track_scores=True)","out":"elasticsearch-dsl pythonでtrack_scoreを有効にする方法。"}
{"in":"self.spawnPoint = [1, 0]<nl>self.vel = self.spawnPoint # Does not make a copy!<nl>self.vel[0] += 0.1<nl>self.vel[1] += 0.2","out":"Pythonが勝手にIntegerをFloatに変換する。"}
{"in":"def my_reverser(x):<nl>  try:<nl><tab> x_ = x[::-1]<nl>  except TypeError:<nl><tab> return x<nl>  else:<nl><tab> return x if len(x) == 1 else tuple(my_reverser(e) for e in x_)","out":"関数reversedを使ったpythonの入れ子タプルの逆引き"}
{"in":"string = r\"asdasd\\asdasd\"<nl>lhs, rhs = string.split(\"\\\\\")<nl>print rhs","out":"エスケープ文字を使用してもバックスラッシュのある文字列を分割することができない"}
{"in":"pattern = r'(?<=X)([a-z])X'","out":"Regex: 重複するパターンをマッチさせる方法(Python固有かも)"}
{"in":"value = raw_input('Please enter a value between 10 and' + str(max) + 'for percentage')","out":"Pythonはraw_inputを変数で使用します。"}
{"in":"import requests<nl>import BeautifulSoup as bs<nl><nl>URL = \"page to get\"<nl>pg = requests.get(URL).content<nl>pg = bs.BeautifulSoup(pg)<nl><nl>scripts = bs.findAll('script')<nl><nl>for sc in scripts:<nl><tab> try:<nl><tab><tab>  print(\"External code at {}\".format(sc['src']))<nl><tab> except KeyError:<nl><tab><tab>  print(\"Inline code:\")<nl><tab><tab>  print(sc.getText())","out":"pythonを使用してhtmlからjavascriptを書き出す方法"}
{"in":"import os<nl>import tarfile<nl><nl>home = '\/home\/'<nl>backup_dir = '\/backup\/'<nl><nl>home_dirs = [ name for name in os.listdir(home) if os.path.isdir(os.path.join(home, name)) ]<nl><nl>for directory in home_dirs:<nl><tab> full_dir = os.path.join(home, directory)<nl><tab> tar = tarfile.open(os.path.join(backup_dir, directory+'.tar.gz'), 'w:gz')<nl><tab> tar.add(full_dir)<nl><tab> tar.close()","out":"pythonを使ったtarバックアップの作り方"}
{"in":"import numpy as np<nl>import pylab as pl<nl><nl>Y, X = np.mgrid[-10:10:100j, -10:10:100j]<nl><nl>def f(x):<nl><tab> return x**3 -3*x + 5<nl><nl>px = -2.0<nl>py = -np.sqrt(f(px))<nl><nl>qx = 0.5<nl>qy = np.sqrt(f(qx))<nl><nl>k = (qy - py)\/(qx - px)<nl>b = -px*k + py <nl><nl>poly = np.poly1d([-1, k**2, 2*k*b+3, b**2-5])<nl><nl>x = np.roots(poly)<nl>y = np.sqrt(f(x))<nl><nl>pl.contour(X, Y, Y**2 - f(X), levels=[0])<nl>pl.plot(x, y, \"o\")<nl>pl.plot(x, -y, \"o\")<nl><nl>x = np.linspace(-5, 5)<nl>pl.plot(x, k*x+b)","out":"Python -- sympy solve()による楕円曲線のためのMatplotlib"}
{"in":"file = open(\"dizionario_della_vela.txt\", \"r\")<nl>data = file.read()<nl>file.close()<nl>data = data.split(\"<nl>\") # getting every line as seperate list<nl>myDict = {}<nl>for line in data:<nl><tab> line = line.split(\":\")<nl><tab> key = line[0] # getting first element as key<nl><tab> value = \":\".join(line[1:]) # joins elements (starting with second) with <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # \":\". We need this because previous line <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # was splitted by \":\" to get your key. This<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> # is where \"string\" value is produced.<nl><tab> myDict[key] = value<nl><nl>for key in myDict.keys():<nl><tab> print(myDict[key])","out":"Pythonのテキスト分割はstrとstrのリストを返す"}
{"in":"a, b, c = (1, 2, 3)","out":"python: タプルを使ってリストの中身を並べ替える"}
{"in":"#!\/usr\/bin\/env python<nl># encoding: utf-8<nl>\"\"\"<nl>logClient2.py<tab> <nl>Created by Allister on 2010-11-30.<nl>\"\"\"<nl><nl>import wx<nl>import sqlite3<nl><nl>WINDOW_SIZE = (900,400)<nl><nl>class logClient(wx.Frame):<nl><tab> def __init__(self, parent, id, title):<nl><nl><tab><tab>  wx.Frame.__init__(self, parent, id, title, size=WINDOW_SIZE)<tab><tab>  <nl><nl><tab><tab>  self.toolbar = self.CreateToolBar()<nl><tab><tab>  self.startLiveUpdate(None)<nl><nl><tab><tab>  self.Show(True)<nl><nl><tab> def startLiveUpdate(self, event):<nl><tab><tab>  self.createToolbarItem(\"Refresh\", \"refresh.jpg\", self.stopLiveUpdate)<nl><nl><tab> def stopLiveUpdate(self, event):<nl><tab><tab>  self.createToolbarItem(\"Stop\", \"refresh2.jpg\", self.startLiveUpdate)<nl><nl><nl><tab> def createToolbarItem(self, label, imageName, method):<nl><tab><tab>  self.toolbar.RemoveTool(1)<nl><tab><tab>  self.toolbar.AddLabelTool(1, label, wx.Bitmap(imageName))<nl><tab><tab>  self.toolbar.Realize()<nl><tab><tab>  self.Bind(wx.EVT_TOOL, method, id=1)<nl><nl><nl>if __name__ == '__main__':<nl><tab> app = wx.App(False)<nl><tab> logClient(None, -1, \"Log Event Viewer\")<nl><tab> app.MainLoop()","out":"wxPythonを使用してツールバーのラベルを変更する。"}
{"in":"import os<nl><nl>os.system(\"my_util some_file.txt | grep 'Some data1' | awk '{print $2}'\" )","out":"ターミナルから出力を取り込む"}
{"in":"(Person, Date, Comment)","out":"queryset の django join 的な拡張。"}
{"in":"config.get('pylons.app_globals') or config.get('pylons.g')","out":"app_globals にアクセスできる Pylons スレッドを作成する。"}
{"in":"import xml.etree.ElementTree as ET<nl><nl>def sortchildrenby(parent, attr):<nl><tab> parent[:] = sorted(parent, key=lambda child: child.get(attr))<nl><nl>tree = ET.parse('input.xml')<nl>root = tree.getroot()<nl><nl>sortchildrenby(root, 'NAME')<nl>for child in root:<nl><tab> sortchildrenby(child, 'NAME')<nl><nl>tree.write('output.xml')","out":"pythonのetreeでXMLをソートする"}
{"in":"cm2 = compute_confusion_matrix(truth_dict,pred_dict,pos_tag='SPAM',neg_tag='OK')<nl>return quality_score(cm2.tp,cm2.tn,cm2.fp,cm2.fn)","out":"関数内で変数を定義するにはどうすればよいですか？"}
{"in":"item['a'] = x<nl>item['_junk'] = {}<nl>item['_junk']['b'] = y<nl>item['_junk']['c'] = z","out":"配列を入れ子にしたScrapy"}
{"in":"from TwitterAPI import TwitterAPI<nl><nl>TWEET_TEXT = 'some tweet text'<nl>IMAGE_PATH = '.\/some_image.png'<nl><nl>api = TwitterAPI(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_TOKEN_KEY,ACCESS_TOKEN_SECRET)<nl><nl># STEP 1 - upload image<nl>file = open(IMAGE_PATH, 'rb')<nl>data = file.read()<nl>r = api.request('media\/upload', None, {'media': data})<nl>print('UPLOAD MEDIA SUCCESS' if r.status_code == 200 else 'UPLOAD MEDIA FAILURE')<nl><nl># STEP 2 - post tweet with a reference to uploaded image<nl>if r.status_code == 200:<nl><tab> media_id = r.json()['media_id']<nl><tab> r = api.request('statuses\/update', {'status':TWEET_TEXT, 'media_ids':media_id})<nl><tab> print('UPDATE STATUS SUCCESS' if r.status_code == 200 else 'UPDATE STATUS FAILURE')","out":"pythonとtwitterApiでツイートに複数の画像を追加する？"}
{"in":"import numpy as np<nl><nl>def split_into_quadrants(points, idx=0):<nl><tab> if idx < points.shape[-1]:<nl><tab><tab>  positive = points[points[:, idx] >= 0]<nl><tab><tab>  negative = points[points[:, idx] < 0]<nl><tab><tab>  return (split_into_quadrants(positive, idx+1) +<nl><tab><tab><tab><tab><tab> split_into_quadrants(negative, idx+1))<nl><tab> else:<nl><tab><tab>  return [points]<nl><nl>b = np.round(np.random.random((30,3))*20)<nl>b = b - b.mean(axis=0)<nl>print(split_into_quadrants(b))","out":"pythonで点群を四分木に分割する"}
{"in":"portnumber = int(portnumber.strip('\\x00'))","out":"PythonでNULL終端文字列をIntに変換する。"}
{"in":"help('modules')","out":"インストールしたpythonライブラリの一覧を取得するにはどうすればよいですか？"}
{"in":"class A:<nl><nl><tab> def x(self):<nl><tab><tab>  #do stuff and call Class B<nl><tab><tab>  n = 1<nl><tab><tab>  n += B().y() #Instance B and call y method<nl><tab><tab>  print n<nl><nl>class B:<nl><tab> def y(self):<nl><tab><tab>  #do stuff get results and pass results to Class A<nl><tab><tab>  x = 10<nl><tab><tab>  return x<nl><nl>a = A() #create a object with type A<nl>a.x() #call x method of A class","out":"あるクラスのメソッド結果を別のクラスで使用する方法"}
{"in":"text.replace(\"<\", \"\")","out":"Python reportlabのパラグラフ関数は、入力テキストの3分の1だけをpdfファイルに描画する。"}
{"in":"end_trimm = 3<nl>myList = myList[:-end_trimm]","out":"pythonでリストの末尾から一定数のアイテムを削除する方法"}
{"in":"amount = 250000<nl><nl>thousands = amount % 100000<nl>lakhs = amount - thousands","out":"Python : 金額を千とラケに分割する。"}
{"in":"self.label.show()","out":"ユーザー定義スロットにウィジェットを作成する"}
{"in":"def remove_section(alist, start, end):<nl><tab> return alist[:start] + alist[end+1:]","out":"リストから先頭から末尾までが含まれる範囲を削除する方法"}
{"in":"import os, pymunk<nl>pymunk_dir = os.path.dirname(pymunk.__file__)<nl>chipmunk_libs = [<nl><tab> ('chipmunk.dll', os.path.join(pymunk_dir, 'chipmunk.dll'), 'DATA'),<nl>]<nl>#... <nl>coll = COLLECT(exe,<nl><tab><tab><tab><tab><tab>a.binaries + chipmunk_libs,<nl><tab><tab><tab><tab><tab>a.zipfiles,<nl><tab><tab><tab><tab><tab>a.datas,<nl><tab><tab><tab><tab><tab>strip=None,<nl><tab><tab><tab><tab><tab>upx=True,<nl><tab><tab><tab><tab><tab>name=os.path.join('dist', 'basic_test'))","out":"PymunkをPyinstallerで使う"}
{"in":"choice1 = Button(master, text=question1[1].text, command=lambda : check(question1[1].value))","out":"tkinterのボタンコマンドは、クリックせずに機能を実行しますか？"}
{"in":"keyVal = map(str.strip,line.split('=')) #this will remove extra whitespace","out":"Pythonの辞書でキー\/バリューペアを使う方法"}
{"in":"import urllib<nl>data = urllib.urlencode({\"postField1\" : \"postValue1\", \"postField2\" : \"postValue2\", \"etc\" : \"etc\"})<nl>f = urllib.urlopen(\"http:\/\/www.domain.com\/storePostData.php\", data)<nl># At this point your storePostData.php file stores all the post <nl># info in either an sql DB or temporary file so this can accessed later on and<nl># an uuid is passed back which we now read below. In may case I store all post<tab><tab>  <nl># fields in a sql DB and each column represents each post field.<nl>uuid = f.read()<nl># the uuid is the sql table id field which is auto_incremented.<nl># SO now we load the default browser below and send it the uuid so the php script<nl># can access the sql data. Once it has been accessed and the form fields have been <nl># received then we delete that row as the information is useless to us now that we <nl># have filled in the forms fields<nl>import webbrowser<nl>webbrowser.open_new(\"http:\/\/www.domain.com\/someOtherUrl?uuid=\" + uuid)","out":"pythonを使用して、urlに値を投稿するブラウザセッションを読み込むにはどうすればよいですか？"}
{"in":"cutoff = 0.00694444444444444<nl>filtered_list = [ dt for dt in dtime_list if dt <= cutoff ]","out":"Python - 2つの浮動小数点を比較する"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl>from bubblegum.backend.mpl.cross_section_2d import CrossSection<nl>fig= plt.figure()<nl>cs= CrossSection(fig)<nl>img= np.random.rand(100,100)<nl>cs.update_image(img)<nl>plt.show()","out":"matplotlib 画像のスライスを使ったインタラクティブなプロット"}
{"in":"passwd = getpass.getpass()<nl>pid = os.fork()<nl>if pid:<nl>  print 'Parent thinks passwd is', passwd<nl>else:<nl>  print 'Child thinks passwd is', passwd","out":"パスワードの入力を促すPythonプログラムをバックグラウンドで起動する。"}
{"in":"db.commit()","out":"接続を閉じることなく、更新されたMySQLテーブルエントリをpythonで取得する。"}
{"in":"import boto<nl>import boto.dynamodb2<nl>from boto.dynamodb2.table import Table<nl>from boto.dynamodb2.fields import HashKey, RangeKey<nl><nl>drivers = Table('current_fhv_drivers')<nl>rowcountquery = drivers.query(<nl><tab>number__eq = 'blah',<nl><tab>expiration__eq = 'foo',<nl><tab>count__eq = True,<nl>  )<nl>for x in rowcountquery:<nl> print x['Count']","out":"pythonによるdynamodbの行数カウント、botoクエリ"}
{"in":"for node in (n for n in nodelist if condition):<nl><tab> node.x += 1","out":"forループでのクリーナー割り当て（python）"}
{"in":"class Task(Base):<nl><tab> __tablename__ = 'tasks'<nl><tab> id = Column(Integer, primary_key=True)<nl><tab> hostID = Column(Integer, ForeignKey('hosts.id'))<nl><tab> name = Column(String)<nl><tab> host = relationship(\"Host\", backref=backref(\"tasks\", cascade_backrefs=False))<nl><nl><tab> def __init__(self, host, name):<nl><tab><tab>  self.host = host<nl><tab><tab>  self.name = name","out":"SQLAlchemyで非永続的なオブジェクトを作成する：リレーションシップでbackrefの間違った採用？"}
{"in":"from facebookads.objects import AdImage<nl><nl>image = AdImage(parent_id='act_<AD_ACCOUNT_ID>')<nl>image[AdImage.Field.filename] = '.\/test.zip'<nl>image.remote_create(batch=True)<nl><nl># Output image hash.<nl>print image[AdImage.Field.hash]","out":"Facebook Ads APIへのPOSTリクエストでレスポンスボディが空っぽになる。"}
{"in":"template = '<input name=\"#key#\" value=\"#value#\">'<nl>html = template<nl>data = {key:value,key:value}<nl>for key in data.keys():<nl><tab> html = html.replace(\"#key#\", key).replace(\"#value#\", data[value]) + \"<nl>\"<nl><tab> html = html + template<nl>#there's an extra template line here that you'll have to get rid of.<nl>html = \"<nl>\".join(html.split(\"<nl>\")[0:-1])","out":"pythonでオブジェクトからフォームを作成する"}
{"in":"def op(self):<nl><tab><tab>  self.start()<nl><tab><tab>  while True:<nl><tab><tab><tab><tab>time.sleep(self.waiting_time)<nl><tab><tab><tab><tab>if not self.q.empty():<nl><tab><tab><tab><tab><tab> print(\"Outputting: \", self.q.get())<nl><tab><tab><tab><tab>else:<nl><tab><tab><tab><tab><tab> break","out":"PythonによるProducer-Consumerアルゴリズム"}
{"in":"import sys<nl>from PyQt4 import QtGui<nl><nl>app = QtGui.QApplication(sys.argv)<nl>widget = QtGui.QWidget()<nl><nl>unicode_font = QtGui.QLabel(u\"Unicode Font: H\\u2082O\")<nl>unicode_font.setStyleSheet(\"font-family: 'Arial Unicode MS', Arial, sans-serif; font-size: 15px;\") <nl><nl>normal_font = QtGui.QLabel(u\"Normal Font: H\\u2082O\")<nl>normal_font.setStyleSheet(\"font-family: Arial, sans-serif; font-size: 15px;\")<nl><nl><nl>layout = QtGui.QVBoxLayout()<nl>layout.addWidget(unicode_font)<nl>layout.addWidget(normal_font)<nl>widget.setLayout(layout)<nl>widget.show()<nl>sys.exit(app.exec_())","out":"Windowsで添え字2のユニコード文字が表示できない"}
{"in":"import datetime<nl><nl>if __name__ == \"__main__\":<nl><tab> d1 = datetime.datetime.now()<nl><tab> data = port.read()<nl><tab> # Do more things ...<nl><tab> tdelta = datetime.datetime.now() - d1<nl><tab> print(tdelta.total_seconds()) # This is your answer","out":"Pythonで経過時間をカウントする方法"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>x = np.arange(10)<nl>np.random.seed(101)<nl>y = np.random.rand(10)<nl><nl>small = [i for i in range(len(x)) if y[i] < .5 ]<nl>big = [i for i in range(len(x)) if y[i] > .5 ]<nl><nl>fig = plt.figure()<nl>ax = fig.add_subplot(111)<nl><nl>ax.scatter(x,y)<nl># user wants to plot lines connecting big values (>.5)<nl>ax.plot(x[big],y[big])<nl><nl>#plt.show()<nl># now user wants to delete the first (and only) line<nl>del ax.lines[0]<nl><nl># so that they can plot a line only showing small values<nl>ax.plot(x[small],y[small])<nl><nl>plt.show()","out":"pyplot描画から以前に描画した内容を消去する。"}
{"in":"stop_words_lst = ['yo', 'so', 'well', 'um', 'a', 'the', 'you know', 'i mean']<nl>s = \"you know what i mean so just turn the lights on\"<nl><nl>import re<nl>for w in stop_words_lst:<nl><tab> pattern = r'\\b'+w+r'\\b'<nl><tab> s = re.sub(pattern, '', s)<nl><tab> print (s)","out":"Pythonでフレーズからカスタムストップワードを削除する"}
{"in":"#!\/usr\/local\/bin\/python3<nl><nl>print('Content-type: text\/html<nl>')<nl><nl>def fib(n):<nl><tab> a, b = 0, 1<nl><tab> for i in range(n):<nl><tab><tab>  a, b = b, a + b<nl><tab> return a<nl><nl>print('''<nl><tab> <table><nl><tab><tab>  <tr><nl><tab><tab>  <th>Index Number<\/th><nl><tab><tab>  <th>Decimal<\/th><nl><tab><tab>  <th>Hexadecimal<\/th><nl><tab><tab>  <th>Octadecimal<\/th><nl><tab><tab>  <th>float<\/th><nl><tab> <\/tr><nl>''')<nl><nl>for i in range (0, 51):<nl><tab> print('''<nl><tab> <tr><nl><tab><tab>  <td>{0}<\/td><nl><tab><tab>  <td>{1}<\/td><nl><tab><tab>  <td>{1:x}<\/td><nl><tab><tab>  <td>{1:o}<\/td><nl><tab><tab>  <td>{1:.2f}<\/td><nl><tab> <\/tr>'''.format(i, fib(i)))<nl><nl>print('<\/table>')","out":"Python HTMLテーブル"}
{"in":"google = oauth.remote_app('google',<nl><tab><tab><tab><tab><tab><tab><tab> base_url='https:\/\/www.google.com\/accounts\/',<nl><tab><tab><tab><tab><tab><tab><tab> authorize_url='https:\/\/accounts.google.com\/o\/oauth2\/auth',<nl><tab><tab><tab><tab><tab><tab><tab> request_token_url=None,<nl><tab><tab><tab><tab><tab><tab><tab> request_token_params={'scope': 'https:\/\/www.googleapis.com\/auth\/userinfo.email',<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  'response_type': 'code',<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  'hd':'domain.com'},<nl><tab><tab><tab><tab><tab><tab><tab> access_token_url='https:\/\/accounts.google.com\/o\/oauth2\/token',<nl><tab><tab><tab><tab><tab><tab><tab> access_token_method='POST',<nl><tab><tab><tab><tab><tab><tab><tab> access_token_params={'grant_type': 'authorization_code'},<nl><tab><tab><tab><tab><tab><tab><tab> consumer_key=GOOGLE_CLIENT_ID,<nl><tab><tab><tab><tab><tab><tab><tab> consumer_secret=GOOGLE_CLIENT_SECRET)","out":"PythonでGoogle Oauth2.0：特定のドメインにアクセスを制限するにはどうすればよいですか？"}
{"in":"views\/debug.py","out":"django でスタックトレーステンプレートをオーバーライドするには？"}
{"in":"df[df['date_time'].str.startswith('2014-02-21')]","out":"Pandas datetimeスタンプから日付を取得する。"}
{"in":"grouped = [list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[2])]","out":"関連する.tifファイルをグループ化する方法は？"}
{"in":"#!\/usr\/bin\/python<nl>filename='thefile.txt'<nl>search=\"class Parking(models.Model):\"<nl>add=\"<nl><tab> layer_id= models.ForeignKey('sdr_layer.id')\"<nl>content=open(filename,'r').read()<nl>content=content.replace(search,search+add)<nl>fp=open(filename,'w')<nl>fp.write(content)<nl>fp.close()","out":"pythonを使用してテキストファイルに文字列を挿入する方法は？"}
{"in":"import requests<nl>import cookielib<nl><nl><nl>URL = '...whatever...'<nl>jar = cookielib.CookieJar()<nl>r = requests.get(URL, cookies=jar)<nl>r = requests.get(URL, cookies=jar)","out":"CookieJarに`Cookie`を入れる。"}
{"in":"import csv<nl><nl>with open('\/Users\/stephan\/Desktop\/cities.csv', \"r\") as f:<nl><tab> mycsv = csv.DictReader(f)<nl><tab> for row in mycsv:<nl><tab><tab>  for col in FIELDS:<nl><tab><tab><tab><tab>try:<nl><tab><tab><tab><tab><tab> print(row[col])<nl><tab><tab><tab><tab>except KeyError:<nl><tab><tab><tab><tab><tab> pass","out":".csvファイルの列を抽出してそのインデックスを求める"}
{"in":"foo, bar, baz == (list(a) + [None]*3)[:3]","out":"タプルからオプショナルアイテムを解凍するには？"}
{"in":"f = open('apple.txt')<nl>lines = f.readlines()<nl>f.close()<nl>things = []<nl>printtofile = []<nl>for i in lines:<nl><tab> things.append(i)<nl><tab> if i.startswith('date'):<nl><tab><tab>  things.pop()<nl><tab><tab>  for x in things:<nl><tab><tab><tab><tab>if i[:-1] == '<nl>':<nl><tab><tab><tab><tab><tab> printtofile.append(x[:-1]+'|'+i[:-1])<nl><tab><tab><tab><tab>else: <nl><tab><tab><tab><tab><tab> printtofile.append(x[:-1]+'|'+i)<nl><tab><tab>  things = []<nl>print printtofile<nl>writefile = open('file.txt', 'w')<nl>writefile.writelines(printtofile)<nl>writefile.close()","out":"Pythonテキストファイルの書式設定"}
{"in":"finaldict = {}<nl>for key in dict1.keys():<nl><tab> finaldict[key] = {}<nl><tab> for key2 in dict1[key]:<nl><tab><tab>  finaldict[key][key2] = {}<nl><tab><tab>  for key3 in dict2[key2]:<nl><tab><tab><tab><tab>finaldict[key][key2][key3] = dict3[key3]<nl>print finaldict","out":"Pythonの3つの辞書を一緒にまとめる"}
{"in":"np.rec.fromrecords(tab)<nl><nl>rec.array([('a', 1), ('b', 2)], <nl><tab><tab><tab> dtype=[('f0', '|S1'), ('f1', '<i4')])","out":"タプルのリストをNumpyの再アレイにする"}
{"in":"activate_this = '\/path\/to\/env\/bin\/activate_this.py'<nl>execfile(activate_this, dict(__file__=activate_this))","out":"WindowsでApache\/mod_wsgiを使用してvirtualenvからPythonを実行する。"}
{"in":"def print_table(lines, col_num, col_width):<nl><tab> for line_ix in range(0, len(lines), col_num):<nl><tab><tab>  print ' -- '.join([line.strip().ljust(col_width) for line in lines[line_ix:line_ix+col_num]])","out":"Pythonでファイルからテキストをフォーマットするにはどうすればよいですか？"}
{"in":"\/ .join([item for sublist in list1 for item in sublist])","out":"Python - リストから角括弧を削除する"}
{"in":"with open(\"tmp.json\") as json_file:<nl><tab> json_data = json.load(json_file)<nl><tab> for i, data_item in enumerate(json_data['data']):<nl><tab><tab>  fname = 'data_%s' % i<nl><tab><tab>  with open(fname, 'w') as outfile:<nl><tab><tab><tab><tab>json.dump(data_item, outfile)","out":"JSONファイルからデータを抽出するPythonプログラム"}
{"in":"import pandas as pd<nl>df = pd.DataFrame({<nl><tab> 'A': [['a','b','c','d'],['a','b','c'],['x','y','z','q'],['x','l']],<nl><tab> 'B': [12,7,2,9]<nl><tab> })<nl>print(df)<nl><nl>#<tab><tab><tab><tab><tab>A<tab>B<nl># 0  [a, b, c, d]  12<nl># 1<tab>  [a, b, c]<tab>7<nl># 2  [x, y, z, q]<tab>2<nl># 3<tab><tab>  [x, l]<tab>9<nl><nl>def cumulative_frequence(df, nodes):<nl><tab> nodes = set(nodes)<nl><tab> mask = df['A'].apply(lambda group: not nodes.isdisjoint(group))<nl><tab> return df.ix[mask, ['B']].sum().item()<nl><nl>print(cumulative_frequence(df, ['a']))<nl>print(cumulative_frequence(df, ['a','b']))<nl># 19<nl># 19","out":"pandas配列の条件付き累積和"}
{"in":"FullName = LastName + (\", \" + FirstName if FirstName else \"\")","out":"文字列とNone\/文字列をオプションの区切り文字で結合する"}
{"in":"from subprocess import Popen, PIPE<nl><nl>cmdline = ['hipi-i2c', 'r', '1', '0x1D', '0x01']<nl>result = Popen(<nl><tab> cmdline<nl><tab> , stdin=PIPE<nl><tab> , stdout=PIPE<nl><tab> , stderr=PIPE<nl>)<nl>output = result.stdout.readlines()<nl>try:<nl><tab> X = int(output[0])<nl>except:<nl><tab> pass<nl><nl>print X","out":"Python-Raspberry pi: popenの結果からintを取得する。"}
{"in":"# Import guzzle theme https:\/\/github.com\/guzzle\/guzzle_sphinx_theme<nl># Not actually using the theme but intead using the<nl># sitemap functionality and overriding the theme\/templates in source\/<nl>html_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'<nl>html_theme_path = guzzle_sphinx_theme.html_theme_path()<nl>html_theme = 'guzzle_sphinx_theme'<nl>extensions.append(\"guzzle_sphinx_theme\")<nl>html_theme_options = {<nl><tab> \"base_url\": \"YOURSITEURL\"<nl>}","out":"sphinxでsitemap.xmlファイルを生成するにはどうすればよいですか？"}
{"in":"bin\/pycharm.sh","out":"UbuntuでPyCharmを実行する方法 - \"ターミナルで実行 \"または \"実行\"？"}
{"in":"from datetime import datetime, timedelta<nl>fourweeks = datetime.now() + timedelta(weeks=4)","out":"Pythonのdatetimeモジュールで年始を変更する？"}
{"in":"import os, shutil, stat<nl><nl>def on_rm_error( func, path, exc_info):<nl><tab> # path contains the path of the file that couldn't be removed<nl><tab> # let's just assume that it's read-only and unlink it.<nl><tab> os.chmod( path, stat.S_IWRITE )<nl><tab> os.unlink( path )<nl><nl>shutil.rmtree( TEST_OBJECTS_DIR, onerror = on_rm_error )","out":"WindowsのPythonで読み取り専用のattribディレクトリを削除する方法は？"}
{"in":"def my_print(obj):  <nl><tab> if hasattr(obj, '__len__') and len(obj) > 100:  <nl><tab><tab>  print '... omitted object of %s with length %d ...' % (type(obj), len(obj))  <nl><tab> else: print obj","out":"IDLEが巨大なリストを印刷しないようにするにはどうすればよいですか？"}
{"in":"outfile = open('scorefiles.txt', 'a')","out":"複数回の関数呼び出しでデータを上書きするのではなく、ファイルに追加する。"}
{"in":"import clr<nl>files = [ 'file1.py', 'file2.py' ]<tab> # Look into os.walk() if you have more than a few files<nl>clr.CompileModules('Foo.dll', *files)","out":"ライブラリープロジェクトの作成方法"}
{"in":"method = getattr(myPotatoHead, 'play_' + toy)<nl>method()","out":"pythonでメソッドを呼び出す際の一部としての変数"}
{"in":"def __hash__(self):<nl><tab> return hash(frozenset(self.iteritems()))","out":"Pythonにおけるunhashableのルックアップテーブル"}
{"in":"ftp.retrlines(\"LIST -a\")","out":"Python 3: ftplib - nlstコマンドがポイントで始まるファイルを表示しない。"}
{"in":"memory_ptr =  pointer(memory)<nl>ReadMem(0x20000000, 100, memory_ptr)","out":"構造体へのポインタを操作する"}
{"in":"df['d'] = df.apply(lambda x: some_func(a = x['a'], b = x['b'], c = x['c']))","out":"Pandasです：複数の列を使用して関数をマップする"}
{"in":"def f1():<nl><tab> def f2():<nl><tab><tab>  print g[0]<nl><tab><tab>  g[0] = 1<nl><tab><tab>  print g[0]<nl><tab> g =[0]<nl><tab> print g[0]<nl><tab> f2()<nl><tab> print g[0]<nl><nl><tab> f1()","out":"Pythonでネストした関数間でローカル変数を共有する。"}
{"in":"myDict = dict(queryDict.iterlists())","out":"django の QueryDict を Python の Dict に変更する方法は？"}
{"in":"def findLines():<nl><tab> myWord = 'someWordIWantToSearchFor'<nl><tab> answer = []<nl><tab> with open('daily.txt') as myfile:<nl><tab><tab>  lines = myfile.readlines()<nl><tab> for line in lines:<nl><tab><tab>  if myWord in line:<nl><tab><tab><tab><tab>answer.append(line)<nl><tab> return answer","out":"リストで文字列の中の単語を探すには？(パイソン)"}
{"in":"for key in d:<nl><tab> ddd[key] = [val\/sum(d[key]) for val in d[key]]<nl>print list(ddd.items())","out":"python 辞書 値リストの各値を合計値で割る"}
{"in":"import urllib2<nl>try:<nl><tab> fh = urllib2.urlopen('http:\/\/example.com\/check.txt')<nl><tab> print fh.read()<nl>except urllib2.HTTPError, e:<nl><tab> print e.code <nl>except urllib2.URLError, e:<nl><tab> print e.code","out":"Python - urllib2 > HTTPエラーをエスケープする方法"}
{"in":"3>> bytes(int(x, 16) for x in '0xDE 0xAD 0xBE 0xEF'.split())<nl>b'\\xde\\xad\\xbe\\xef'","out":"Python - \"0xDE 0xAD 0xBE 0xEF\" 形式の文字列をバイト配列にパースする"}
{"in":"content = ''<nl>with open(filename, 'rt') as f:<nl><tab> content = f.read()<nl><nl>matches = re.findall(REGEX, content)","out":"with」ブロックに障害があっても、ファイルの中身を操作することができる。"}
{"in":"for index, item in enumerate(L):<nl>  if a in item or b in item:<nl><tab> r.append(index)","out":"Python - 1つの要素を含むリスト内のリストのインデックスを検索する"}
{"in":"import re<nl><nl>with open('php_file.txt', 'r') as f:<nl><tab> html = re.sub('<\\?.*?\\?>', '', f.read(), re.MULTILINE)<nl><nl>with open('html_file.txt', 'w') as f:<nl><tab> f.write(html)","out":"Pythonを使ってHTMLファイルからPHPの行を削除する"}
{"in":"import matplotlib.pylab as plt<nl>import matplotlib.animation as animation<nl>import numpy as np<nl><nl>#create image with format (time,x,y)<nl>image = np.random.rand(100,10,10)<nl><nl>#setup figure<nl>fig = plt.figure()<nl>ax1 = fig.add_subplot(1,2,1)<nl>ax2 = fig.add_subplot(1,2,2)<nl>#set up viewing window (in this case the 25 most recent values)<nl>repeat_length = (np.shape(image)[0]+1)\/4<nl>ax2.set_xlim([0,repeat_length])<nl>#ax2.autoscale_view()<nl>ax2.set_ylim([np.amin(image[:,5,5]),np.amax(image[:,5,5])])<nl><nl>#set up list of images for animation<nl><nl><nl>im = ax1.imshow(image[0,:,:])<nl>im2, = ax2.plot([], [], color=(0,0,1))<nl><nl>def func(n):<nl><tab> im.set_data(image[n,:,:])<nl><nl><tab> im2.set_xdata(np.arange(n))<nl><tab> im2.set_ydata(image[0:n, 5, 5])<nl><tab> if n>repeat_length:<nl><tab><tab>  lim = ax2.set_xlim(n-repeat_length, n)<nl><tab> else:<nl><tab><tab>  # makes it look ok when the animation loops<nl><tab><tab>  lim = ax2.set_xlim(0, repeat_length)<nl><tab> return im, im2<nl><nl>ani = animation.FuncAnimation(fig, func, frames=image.shape[0], interval=30, blit=False)<nl><nl>plt.show()","out":"matplotlibのアニメーションを使ったX軸の値の更新"}
{"in":"for n in numbers:<nl><tab> frequencies[n] += 1","out":"リストで度数を取得し、別のリストにインデックスを付けるには？"}
{"in":"sum(SCORES[letter] for letter in word)","out":"forループで値を足し合わせる(Python)"}
{"in":"re.split(r'\\s+-\\s*|\\s*-\\s+', description)","out":"文字列の末尾から検索して分割する"}
{"in":"Recommendation.objects.filter(user__publication_set__subscriber=request.user).select_related()","out":"複数のテーブルにまたがるクエリを実行するための最良の django の方法は何ですか？"}
{"in":"for x in ['a', 'b', 'c', 'd', 'e']:<nl><tab> setattr(i, x, f(getattr(i, x)))","out":"Pythonで参照による変数のリストを修正するエレガントな方法？"}
{"in":"asciiList = [n.encode(\"ascii\", \"ignore\") for n in strList]<nl>h5File.create_dataset('xxx', (len(asciiList),1),'S10', asciiList)","out":"PythonからHDF5データセットに文字列のリストを格納する。"}
{"in":"name = 'My Name'<nl>skipLines = False<nl>results = []<nl>for x in chatLog:<nl><tab> if x == name:<nl><tab><tab>  skipLines = True<nl><tab> elif not x[0].isdigit():<nl><tab><tab>  skipLines = False<nl><nl><tab> if not skipLines:<nl><tab><tab>  results.append(x)","out":"Python - チャットログファイルの条件付き行を削除する"}
{"in":"import wx<nl><nl>class Frame(wx.Frame):<nl>  def __init__(self, parent, id, title, img_path):<nl><tab> wx.Frame.__init__(self, parent, id, title, <nl><tab><tab><tab><tab><tab><tab><tab> style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER)<nl><nl><tab> image = wx.StaticBitmap(self, wx.ID_ANY)<nl><tab> image.SetBitmap(wx.Bitmap(img_path))<nl><nl><tab> sizer = wx.BoxSizer()<nl><tab> sizer.Add(image)<nl><tab> self.SetSizerAndFit(sizer)<nl><nl><tab> self.Show(True)<nl><nl>app = wx.App()<nl>frame = Frame(None, wx.ID_ANY, 'Image', '\/path\/to\/file.png')<nl>app.MainLoop()","out":"WxPythonでフレームを画像にサイズ合わせする"}
{"in":"from twisted.application.service import Service<nl><nl>class MultiprocessingService(Service):<nl><tab> def startService(self):<nl><tab><tab>  self.pool = multiprocessing.Pool(processes=processes)<nl><nl>MultiprocessingService().setServiceParent(application)","out":"マルチプロセッシングワーカーを搭載したツイストネットワーククライアント？"}
{"in":"json.dumps()","out":"AMQPにpythonの辞書を入れることは可能でしょうか？"}
{"in":"from collections import defaultdict<nl><nl>data = [['a', 'b', 2], ['a', 'c', 1], ['a', 'b', 1]]<nl><nl>result = collections.defaultdict(int) # new keys are auto-added and initialized as 0<nl>for item in data:<nl><tab> a, b, value = item<nl><tab> result[(a,b)] += value<nl>print result<nl># defaultdict(<type 'int'>, {('a', 'b'): 3, ('a', 'c'): 1})<nl>print dict(result)<nl># {('a', 'b'): 3, ('a', 'c'): 1}<nl>print [[a, b, total] for (a, b), total in result.items()]<nl># [['a', 'b', 3], ['a', 'c', 1]]","out":"リストの重複を識別し、その最後の項目を合計する"}
{"in":"import BeautifulSoup<nl><nl>soup = BeautifulSoup.BeautifulSoup('''<table><nl>  <tr><nl><tab> <td>Names<\/td><nl><tab> <td>Fred, John, Barry, <a href=\"http:\/\/www.example.com\/\">Roger<\/a>, James<\/td><nl>  <\/tr><nl><\/table>''')<nl><nl>result = []<nl>for tag in soup.table.findAll('td')[1]:<nl>  if isinstance(tag, BeautifulSoup.NavigableString):<nl><tab> for name in tag.string.split(','):<nl><tab><tab>name = name.strip()<nl><tab><tab>if name:<nl><tab><tab>  result.append({ 'name': name })<nl>  else:<nl><tab> result.append({ 'name': tag.string.strip(), 'url': tag[\"href\"] })<nl><nl>print result","out":"beautifulsoupでリンクのあるカンマ区切りリストを分割する。"}
{"in":"def parse_file():<nl>  with open('SOMETHING.txt', 'r') as f:<nl><tab> c1 = 0<nl><tab> c2 = 0<nl><tab> for i in f:<nl><tab><tab>w = i.split()<nl><tab><tab>c1 += len(w)<nl><tab><tab>for j in w:<nl><tab><tab>  if j.endswith('LY'):<nl><tab><tab><tab> c2 += 1<nl><tab> return {'Total words': c1, 'Words ending with LY': c2}","out":"テキストファイルの各単語を数える python"}
{"in":"import matplotlib.pyplot as pl<nl>from matplotlib.ticker import ScalarFormatter<nl><nl>fig = pl.figure()<nl>ax = fig.add_subplot(111)<nl><nl>ax.set_xscale('log')<nl>ax.set_xticks([1,2,5,10])<nl>ax.get_xaxis().set_major_formatter(ScalarFormatter())<nl>ax.set_xlim([1., 10.])","out":"Matplotlib の対数スケールの書式設定"}
{"in":"class PopenThread(threading.Thread):<nl><nl><tab> def __init__(self, port):<nl><tab><tab>  threading.Thread.__init__(self)<nl><tab><tab>  self.port=port<nl><nl><tab> def run(self):<nl><tab><tab>  Popen('ant -Dport='+str(self.port)+ ' -Dhost='+GetIP()+ <nl><tab><tab><tab><tab><tab> ' -DhubURL=http:\/\/192.168.1.113:4444' <nl><tab><tab><tab><tab><tab> ' -Denvironment=*firefox launch-remote-control'<nl><tab><tab><tab><tab><tab> ' $HOME\/selenium-grid-1.0.8', shell=True)<nl><nl>if '__main__'==__name__:<nl><tab> PopenThread(5555).start()<nl><tab> PopenThread(5556).start()<nl><tab> PopenThread(5557).start()","out":"シェルの複数プロセス起動"}
{"in":"__author__ = 'vinayjoseph'<nl><nl>from google.appengine.ext import ndb<nl>import logging<nl>from datetime import datetime<nl><nl>class Event(ndb.Model):<nl><tab> \"\"\"Models an individual event at xxx xxx \"\"\"<nl><tab> Date = ndb.DateTimeProperty()<nl><tab> Location = ndb.StringProperty()<nl><tab> Address = ndb.StringProperty()<nl><tab> Name = ndb.StringProperty()<nl><nl><nl>def get_meeting_date():<nl><tab> \"\"\"gets the next meeting date from the No SQL Schemaless Google Datastore<nl><tab> \"\"\"<nl><tab> qry = Event.query(Event.Name == 'Next Meeting Location')<nl><tab> for event in qry.fetch(1):<nl><tab><tab>  logging.info(\"Meeting is on %s at %s\" % (str(event.Date), event.Address))","out":"Google App Engineのndbクエリ"}
{"in":"class Player:<nl>  def __init__(self, name, hp):<nl><tab> self.name = name<nl><tab> self.hp = hp","out":"関数内からリネームされたグローバル変数を変更する（python）"}
{"in":"def setUp(self):<nl><tab> self.test_passed = false<nl><nl>def tearDown(self):<nl><tab> if not self.test_passed:<nl><tab><tab>  log()<nl><nl>def test_something(self):<nl><tab> self.assertEquals(something())<nl><tab> self.test_passed = true","out":"ユニットテストが失敗するたびにアクションを実行する"}
{"in":"class exampleForm(forms.Form):<nl> item_price = forms.IntegerField(label = 'item price')<nl> item_quantity = forms.IntegerField(label = 'quantity')<nl> item_total = forms.IntegerField(label = 'total')<nl><nl> def clean_item_total(self):<nl><tab>total = self.cleaned_data.get(\"item_price\", 0)+self.cleaned_data.get(\"item_quantity\", 0)<nl><tab>return total","out":"Django Forms : 他のフィールドの複数であるフィールドを追加する必要があるのですが？"}
{"in":"sel = selected()<nl><nl>for i in sel:<nl><tab> print i.ty.get()<nl><tab> i.ty.set(i.ty.get() + 1)","out":"Maya Pythonでリストからオブジェクトの属性を取得または設定する方法は？"}
{"in":"re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|\\\"[^\\\"]*\\\"|\\S+',strs)","out":"Pythonによる括弧による文字列の分割"}
{"in":"re.search(r'<div.*?>(*.?)<\/div>', price.get_attribute('innerHTML')).group(1)","out":"Selenium Pythonで<div>からテキスト(htmlソース)を取得する方法"}
{"in":"mylist=['I am fabulous']<nl><nl>mylist[0] = mylist[0].replace(' ', ', ')<nl><nl>print mylist","out":"Pythonで、1つの長い文字列を持つリストの各単語の後にカンマを追加するにはどうすればよいですか？"}
{"in":"#Bind listbox selection into entry field <nl>def get_list(event):<nl><tab> index = listbox1.curselection()[0]<nl><tab> seltext = listbox1.get(index)<nl><tab> enter1.delete(0, 50)<nl><tab> enter1.insert(0, seltext)<nl><nl>#Bind entry text into listbox<tab> <nl>def set_list(event):<nl><tab> try:<nl><tab><tab>  index = listbox1.curselection()[0]<nl><tab><tab>  listbox1.delete(index)<nl><tab> except IndexError:<nl><tab><tab>  index = tk.END<nl><tab> listbox1.insert(index, enter1.get())<nl><nl>listbox1 = tk.Listbox(root, width=50, height=6)<nl>listbox1.grid(row=0, column=0)<nl><nl>enter1 = tk.Entry(root, textvariable=source, width=50)<nl>enter1.insert(0, 'Click on Fetch Button, then select item in the listbox')<nl>enter1.grid(row=1, column=0)<nl><nl>enter1.bind('<Return>', set_list)<nl>enter1.bind('<Double-1>', set_list)<nl><nl>listbox1.bind('<ButtonRelease-1>', get_list)","out":"Sqlite3接続でリストボックスの選択項目を入力ボックスに読み込む"}
{"in":"def convert_pdf_to_png(blob):<nl><tab> pdf = Image(blob=blob)<nl><nl><tab> pages = len(pdf.sequence)<nl><nl><tab> image = Image(<nl><tab><tab>  width=pdf.width,<nl><tab><tab>  height=pdf.height * pages<nl><tab> )<nl><nl><tab> for i in xrange(pages):<nl><tab><tab>  image.composite(<nl><tab><tab><tab><tab>pdf.sequence[i],<nl><tab><tab><tab><tab>top=pdf.height * i,<nl><tab><tab><tab><tab>left=0<nl><tab><tab>  )<nl><nl><tab> return image.make_blob('png')","out":"imagemagick wand pdf ページを画像として保存します。"}
{"in":"sorted_qs = sorted(chain(fqs, sqs), key=lambda obj: obj.added)","out":"二つの結合したクエリセットをソートする - django"}
{"in":"import importlib<nl>themodule = importlib.import_module('django-google-storage')","out":"pipでインストールしたpythonパッケージを参照する。"}
{"in":"c = [item for item in a<nl><tab>  if any(name in item for name in b)]","out":"Pythonで2つのリストに含まれる文字列の共通文字"}
{"in":"hands = {} # Create a new dictionary to hold the hands.<nl>hands[\"flush\"] = make_hand(deck) # Generate some hands using your function.<nl>hands[\"straight\"] = make_hand(deck) # Generate another hand with a different name.<nl>print hands[\"flush\"] # Access the hand later.","out":"名前付きリスト"}
{"in":"return json.dumps({'lat': result.lat, 'lon': result.lon})","out":"Python Appengine GeoModelサブクラスをシンプルなjsonでJSONシリアライズできない。"}
{"in":"linecache.clearcache()","out":"フォルダ内のファイルを解析する際にメモリエラーが発生する。"}
{"in":"json.loads(request.POST.get('myd'), object_pairs_hook=collections.OrderedDict)","out":"Pythonでjsonから順序付き辞書を作成する方法"}
{"in":"button.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse(\"red\"))","out":"GTK：CheckButtonのbgカラーを変更する。"}
{"in":"[[\"A\", \"B\", 1.3750], [\"X\", \"Y\", 0.7097]]","out":"JSONをパースしようとするとValueErrorが発生する。"}
{"in":"newList = [row[0] for row in data[1:]]","out":"Python: リスト群の各リストの最初の項目を、2番目のリストから順に削除する。"}
{"in":"from itertools import islice<nl>with open('target.txt', 'w') as target:<nl><tab> f1, f2 = open('f1.txt'), open('f2.txt')<nl><tab> while True:<nl><tab><tab>  ls1 = islice(f1, 32)<nl><tab><tab>  if not ls1:<nl><tab><tab><tab><tab># will not happen in this case<nl><tab><tab><tab><tab>target.write('<nl>' + f2.read())<nl><tab><tab><tab><tab>break<nl><tab><tab>  ls2 = islice(f2, 64)<nl><tab><tab>  if not ls2:<nl><tab><tab><tab><tab>target.write('<nl>' + f1.read())<nl><tab><tab><tab><tab>break<nl><tab><tab>  target.write('<nl>'.join('<nl>'.join(ls) for ls in [ls1, ls2]))<nl><tab> f1.close()<nl><tab> f2.close()","out":"pythonで2つのtxtファイルを順次読み込んで新しいファイルに書き込むにはどうすればよいですか？"}
{"in":"df[(1.5 <= df.two) & (df.two <= 3.5)]","out":"列に対して比較を行うpandas hpw"}
{"in":"from bs4 import BeautifulSoup<nl><nl>html = \"\"\"<tr> <stuff1> <tr><stuff2> <\/tr> <\/tr>\"\"\"<nl>soup =BeautifulSoup(html)<nl><nl>print(soup.find_all(\"tr\"))","out":"re を使って文字列のネストした結果を検索する"}
{"in":"# XXX for whatever reasons, creating the first instance of a callback<nl># function is needed for the unittests on Win64 to succeed.  This MAY<nl># be a compiler bug, since the problem occurs only when _ctypes is<nl># compiled with the MS SDK compiler.  Or an uninitialized variable?<nl>CFUNCTYPE(c_int)(lambda: None)","out":"mod_wsgi djangoアプリからnumpyをインポートする際に、ctypesエラーが発生することがある。"}
{"in":"django.conf.settings","out":"Django では、プロジェクトの外の新しいアプリで settings.py を再利用するにはどうすればよいですか？"}
{"in":"import json<nl>payload={'text': 'bi ba buzemann!',<nl><tab><tab><tab>'nouns': ['streetlight', 'situation'],<nl><tab><tab><tab>'states': ['solid', 'fluid']<nl><tab><tab>  }<nl>requests.post(url, data=json.dumps(payload))","out":"http.server: POST リクエストを JSON にデコードする。"}
{"in":"import matplotlib.pyplot as plt<nl><nl>for i, group in df.groupby('ModelID'):<nl><tab> plt.figure()<nl><tab> group.plot(x='saleDate', y='MeanToDate', title=str(i))","out":"Pandas DataSeries.GroupByでプロットする。"}
{"in":"from datetime import datetime<nl>today = datetime.today()<nl>b.utcoffset(today) == c.utcoffset(today)","out":"pythonで2つのタイムゾーンを比較する方法は？"}
{"in":"my_datetime.strftime(\"%B %d, %Y\")","out":"pythonのdatetimeを文字列に変換して、読みやすい形式の日付にするにはどうすればよいですか？"}
{"in":"fig, ax = plt.subplots(1,2, figsize=(10,4))<nl><nl>x = [2,4,3,6,1,7]<nl>y = [1,2,3,4,5,6]<nl><nl>ax[0].plot(x, y)<nl><nl>ax[1].plot(np.arange(len(x)), y)<nl>ax[1].set_xticklabels(x)","out":"matplotlib\/pylabでX軸の値を自動的にソートしないようにするにはどうしたらいいですか？"}
{"in":"in_str  = \"1, 2, 3, 4\"<nl>listed = [int(x) for x in in_str.split(',')]","out":"pythonで整数をリストに入れる"}
{"in":"if request.method == \"POST\":<nl><tab> image = request.files['myfile'] #myfile is name of input tag<nl><tab> config ={<nl><tab><tab><tab><tab>'album':album,<nl><tab><tab><tab><tab>'name':'Catastrophe!',<nl><tab><tab><tab><tab>'title':'Catastrophe!'<nl><tab> }<nl><tab> print \"uploading image...\"<nl><tab> filename = secure_filename(image.filename)<nl><tab> file.save(os.path.join('\/home\/suraj\/Pictures', filename))<nl><tab> print os.path.realpath(image.filename)","out":"flaskのimage Pathを使った画像のアップロード"}
{"in":"import web<nl><nl>class MyApplication(web.application):<nl><tab> def run(self, port=8080, *middleware):<nl><tab><tab>  func = self.wsgifunc(*middleware)<nl><tab><tab>  return web.httpserver.runsimple(func, ('0.0.0.0', port))<nl><nl>urls = (<nl><tab>'\/(.*)', 'hello'<nl>)<nl><nl>class hello:<nl><tab> def GET(self, name):<nl><tab><tab>  if not name:<nl><tab><tab><tab><tab>name = 'World'<nl><tab><tab>  return 'Hello, ' + name + '!'<nl><nl>if __name__ == \"__main__\":<nl><tab> app = MyApplication(urls, globals())<nl><tab> app.run(port=8888)","out":"シンプルなpythonのWebサーバーを正しい方法でデプロイする方法は？"}
{"in":"def save(self):<nl><tab> from django.template.defaultfilters import slugify<nl><nl><tab> if not self.slug:<nl><tab><tab>  self.slug = slugify(self.title)<nl><nl><tab> super(Your_Model_Name,self).save()","out":"モデル内のどのフィールドが管理アプリで編集可能かを定義する方法はありますか？"}
{"in":"sqlite3.Row","out":"カラムの名前で選択する方法を教えてください（Python & SQLite3）。"}
{"in":"parser.add_argument('path', nargs=1, help='File path to process')","out":"argparse によるファイルパスのグロビングを停止する。"}
{"in":"xarr, yarr = [], []<nl>for i in range(1,n):<nl><tab> dx = random.uniform(-2,2)<nl><tab> x = x+dx<nl><tab> y += ((v**2 - dx**2)**(0.5))*(random.randint(-1,1))<nl><tab> xarr.append(x)<nl><tab> yarr.append(y)<nl>pl.plot(xarr,yarr)<nl><nl>pl.show()","out":"Pythonでforループで生成された2次元値からプロットを作成する"}
{"in":"What is your name?.replace(\"?\",\"\") #this is the most clear<nl>#or<nl>filter(lambda x:x!= \"?\",\"What is your name?\")<nl>#or<nl>\"\".join(x for x in \"What is your name?\" if x != \"?\")<nl>#or<nl>\"What is your name?\".translate(None,\"?\") #this is my favorite","out":"文字列からクエスチョンマークを削除する"}
{"in":"d ={'idx1':{'tokenA': 0.1,<nl><tab><tab><tab><tab>'tokenB': 1.3,<nl><tab><tab><tab><tab>'tokenD': 2.3},<nl><tab><tab>'idx2':{'tokenC': 0.9,<nl><tab><tab><tab><tab>'tokenE': 3.4},<nl><tab><tab>'idxn':{'tokenA': 0.3,<nl><tab><tab><tab><tab>'tokenF': 0.4,<nl><tab><tab><tab><tab>'tokenZ': 7.4}<nl><tab><tab>}<nl><nl>from collections import Counter<nl><nl>token_sums<tab>= sum((Counter(v<tab><tab> ) for k,v in d.iteritems()), Counter())<nl>token_counts = sum((Counter(v.keys()) for k,v in d.iteritems()), Counter())<nl>token_mean<tab>= {k:token_sums[k]\/token_counts[k] for k in token_sums}<nl>print token_mean","out":"以下のようなdictから平均値を求めるにはどうしたらよいでしょうか？"}
{"in":"\"This pure Python MySQL client provides a DB-API to a MySQL database by talking directly to the server via the binary client\/server protocol.\"<nl><nl>import pymysql<nl>conn = pymysql.connect(host='127.0.0.1', unix_socket='\/tmp\/mysql.sock', user='root', passwd=None, db='mysql')<nl>cur = conn.cursor()<nl>cur.execute(\"SELECT Host,User FROM user\")<nl>for response in cur:<nl><tab> print(response)<nl>cur.close()<nl>conn.close()","out":"Python 3.3 Mysql コネクタ"}
{"in":"#! \/usr\/bin\/env python<nl>import pandas as pd<nl>import matplotlib.pyplot as plt<nl>data = pd.read_fwf('myfile.log',header=None,names=['time','amount'],widths=[27,5])<nl>data.time = pd.to_datetime(data['time'], format='%Y-%m-%d %H:%M:%S.%f')<nl>data.set_index(['time'],inplace=True)<nl>data.plot()<nl><nl>#OR <nl>plt.plot(data.index, data.amount)","out":"pandasの日付をmatplotlibでプロットする"}
{"in":"import subprocess<nl>import wx<nl><nl>def main():<nl><tab> p = subprocess.Popen(['ls', '-a'], stdout = subprocess.PIPE)<nl><tab> text = p.stdout.readlines()<nl><tab> text = \"\".join(text)<nl><nl><tab> wx.MessageBox(\"file names:<nl>%s\" % text, \"info\")<nl><nl>if __name__ == '__main__':<nl><tab> app = wx.PySimpleApp()<nl><tab> main()","out":"wxpythonを使って端末の出力をGUIに渡す。"}
{"in":"import netCDF4<nl>dset = netCDF4.Dataset('test.nc')<nl>dset.variables","out":"netCDF4とpythonを使って、netCDFファイルの全変数をプログラムでリストアップする。"}
{"in":"myvars = {}<nl><nl># iterate through all the lines<nl>for line in open('SampleText.txt').readlines():<nl><tab> # skip this line if it doesn't look like an assignment<nl><tab> if not '=' in line: continue<nl><nl><tab> # split it into left and right pieces<nl><tab> left, right = line.split('=', 1)<nl><nl><tab> # keep it around in a dictionary<nl><tab> myvars[left.strip()] = right.strip()<nl><nl># now you can query it to get stuff:<nl>myvars['efgh']<tab># returns \/home\/user\/targetfile1.txt","out":"Pythonです：テキストファイルからファイルパスを取得する"}
{"in":"import re<nl>lookup = {re.search('([A-Z][A-Za-z_]*$)', cls.__name__).group(1): cls for cls in BaseCls.__subclasses__()}<nl># {'A': <class '__main__.ChildClsA'>, 'B': <class '__main__.ClildClsB'>}<nl><nl>input_str = raw_input('Please enter one of {}:'.format(', '.join(lookup)))<nl>new_class = lookup[input_str]()","out":"if文を使用せずに子クラスの作成を決定する方法"}
{"in":"from sqlalchemy import func, desc<nl>session.query(<nl><tab> func.count(tablename.id).label('qty')<nl><tab> ).group_by(tablename.category<nl><tab> ).order_by(desc('qty'))","out":"SQL Alchemyで配列のカラムに最も頻度の高い値を検索する"}
{"in":"import datetime<nl>date = (datetime.date.today() - datetime.timedelta(1)).strftime(\"%d-%b-%Y\")<nl>result, data = mail.uid('search', None, '(SENTSINCE {date})'.format(date=date))","out":"IMAPフォルダを複数の基準で検索する(python)"}
{"in":"try:<nl><tab> dico[\"title\"] = unicode(xml.Items.Item.ItemAttributes.Title)<nl>except AttributeError:<nl><tab> dico[\"title\"] = ''","out":"Pythonですべてのxmlの値にアクセスする（同じ名前のものが複数ある場合"}
{"in":"default_app_config = 'apps.cliente.config.ClienteConfig'","out":"Djangoでアプリのverbose_nameを指定すると、モデルのインポートが壊れる。"}
{"in":"totalData = [ [['Test1',5,2,1,8],['Test2',10,4,3,2]],<nl><tab><tab><tab><tab><tab><tab>[['Test1',2,4,5,1],['Test2',4,6,10,3]] ]<nl>for t in range(len(totalData[0])): #tests<nl><tab> result = [totalData[0][t][0],]<nl><tab> for i in range(1,len(totalData[0][0])): #numbers<nl><tab><tab>  sum = 0.0<nl><tab><tab>  for j in range(len(totalData)):<nl><tab><tab><tab><tab>sum += totalData[j][t][i]<nl><tab><tab>  sum \/= len(totalData)<nl><tab><tab>  result.append(sum)<nl><tab> print result","out":"Pythonでリストの値を平均化する。"}
{"in":"# In models.py, add as_dict() method to all models<nl># Example for class Book<nl>def as_dict(self):<nl><tab> d = {<nl><tab><tab>  \"id\": self.id,<nl><tab><tab>  \"publisher\": self.publisher.as_dict(), # avoid this<nl><tab><tab>  \"title\": self.title,<tab><tab>  <nl><tab><tab>  \"publication_date\": str(self.publication_date),  <nl><tab><tab>  \"publisher\": self.publisher,  <nl><tab><tab>  \"authors\": [author.as_dict() for author in self.authors.all()] # avoid this<nl><tab> }<nl><nl># then in views.py<nl>def getAllBooks(request):<nl><tab> book_list = [book.as_dict() for book in Book.objects.all().select_related()]<nl><tab> return HttpResponse(simplejson.dumps(book_list), <nl><tab><tab><tab><tab><tab><tab><tab><tab>content_type=\"application\/json\")","out":"モデルを整形されたJSON文字列に変換する良い方法はないでしょうか？"}
{"in":"data.sort('COL1', inplace=True)","out":"matplotlib: 折れ線グラフのデータ点の接続順序がおかしい。"}
{"in":"class Client(Person):<nl><tab>favorite_stores = models.ManyToManyField('store.Store')<nl><tab>favorite_vendors = models.ManyToManyField(Vendor)","out":"2つのアプリを超えるDjangoの多人数関係"}
{"in":"dset.attrs[\"Name\"] = \"My Dataset\"","out":"scipy\/numpyの配列を辞書のように効率よく格納する。"}
{"in":"print '.{0,3}'.join(re.escape(part) for part in s.split('?')) + '.*'","out":"python+postgresqlです：文字列リテラルを正規表現に変換する"}
{"in":"colormap = PythonMagick.Image(\"colors256.png\")<nl>original.map(colormap)","out":"(Python)PILやPyPNGを使って、画像に特定のパレットを設定する"}
{"in":"for k in a.keys():<nl><tab>  a[k] = a[k] * 2","out":"Pythonです：Counterオブジェクトの値を乗算する方法は？"}
{"in":"def sc1(self, *argv):<nl><tab><tab>  self.a = float(argv[0]) <nl><tab><tab>  # rather than re-request the value resulting in more function calls<nl><tab><tab>  # i'm using the value that is passed in during the callback<nl><tab><tab>  if not hasattr(self, \"a_prev\"): # this is a hacky method to <nl><tab><tab><tab><tab>self.a_prev = 1<tab><tab><tab><tab> # remember the previous value<nl><nl><tab><tab>  b_diff = self.scale_2.get() - self.a_prev <nl><tab><tab>  c_diff = self.scale_3.get() - self.a_prev<nl><tab><tab>  # calculate the differences to the previous value<nl><nl><tab><tab>  self.scale_2.set(self.a+b_diff) # set the scales<nl><tab><tab>  self.scale_3.set(self.a+c_diff)<nl><tab><tab>  self.a_prev = self.a # remember current value as the new previous","out":"あるスケールが他のスケール値を制御する（tkinter python3"}
{"in":"#!\/usr\/bin\/env python","out":"Visual ProfilerでPyCudaのコードをプロファイルする方法は？"}
{"in":"import difflib","out":"PythonでセットA-セットBの計算を行う。"}
{"in":"from wand.image import Image<nl>from wand.display import display<nl>from wand.drawing import Drawing<nl>from wand.color import Color<nl>img=Image(filename='..\/..\/rmli_fr\/rmli_fr.ave.ras')<nl><nl>color = Color('red')<nl>draw = Drawing()<nl>draw.fill_color = color<nl>for i in pts_comp:<nl><tab> draw.line((i[0], i[1]), (i[0], i[1]))<nl><tab> draw(img)<nl><nl>img.save(filename='rmli.ras')","out":"Wand (imagemagick) グレイスケールの太陽ラスターイメージの上に色のついた点を描く。"}
{"in":"import os<nl>import sys<nl>import shutil<nl><nl>source = raw_input(\"Enter source file path: \")<nl>dest = raw_input(\"Enter destination path: \")<nl><nl>if not os.path.isfile(source):<nl><tab> print \"Source file %s does not exist.\" % source<nl><tab> sys.exit(3)<nl><nl>try:<nl><tab> shutil.copy(source, dest)<nl>except IOError, e:<nl><tab> print \"Could not copy file %s to destination %s\" % (source, dest)<nl><tab> print e<nl><tab> sys.exit(3)","out":"Pythonでファイルをコピーする方法は？"}
{"in":"import numpy as np<nl>from scipy.io import wavfile<nl><nl>fs = 44.1e3<nl>t = np.arange(0, 1.0, 1.0\/fs)<nl><nl>f1 = 440<nl>f2 = 600<nl><nl>x = 0.5*np.sin(2*np.pi*f1*t) + 0.5*np.sin(2*np.pi*f2*t)<nl><nl>fname = 'output.wav'<nl>wavfile.write( fname, fs, x )<nl><nl><nl>fs, data = wavfile.read( fname )<nl><nl>print fs, data[:10]","out":"pythonでオーディオの波の値を読むことを探しています。"}
{"in":"U = np.random.rand(3,24,5) <nl>R = np.eye(3,3)<nl>result = np.einsum( \"ijk,il\", U,R )","out":"numpy: ブロードキャスト行列を配列に掛け合わせる"}
{"in":"#!\/usr\/bin\/python<nl>from PIL import Image<nl>import os, sys<nl><nl>path = \"\/root\/Desktop\/python\/images\/\"<nl>dirs = os.listdir( path )<nl><nl>def resize():<nl><tab> for item in dirs:<nl><tab><tab>  if os.path.isfile(path+item):<nl><tab><tab><tab><tab>im = Image.open(path+item)<nl><tab><tab><tab><tab>f, e = os.path.splitext(path+item)<nl><tab><tab><tab><tab>imResize = im.resize((200,200), Image.ANTIALIAS)<nl><tab><tab><tab><tab>imResize.save(f + ' resized.jpg', 'JPEG', quality=90)<nl><nl>resize()","out":"Python\/PIL フォルダ内の全画像をリサイズする。"}
{"in":"sorted(lst, reverse=True)","out":"Python このリストをどのようにソートするのですか？"}
{"in":"R = (R - A) \/ (1 - A)<nl>G = (G - A) \/ (1 - A)<nl>B = (B - A) \/ (1 - A)","out":"私のスプライトの周りに奇妙な白いピクセル化された境界線がある"}
{"in":"print \"Enter 100 words:\"<nl>words = [] # create a list<nl>for x in range(100): # loop through all the numbers from 0 to 100<nl>  words.append(raw_input(\"Word {}\".format(x + 1))) # ask for the word,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab># then add it to the list","out":"pythonで何回も入力する方法は？"}
{"in":"def __getattr__(self, name):<nl><tab> if hasattr(self.st, name):<nl><tab><tab>  return getattr(self.st, name)<nl><tab> else:<nl><tab><tab>  raise AttributeError","out":"Python 2: クラスの属性をローカル変数からクラス自体に書き出す"}
{"in":"def zero_value(x):<nl><tab> if x is None:<nl><tab><tab>  return None<nl><tab> return type(x)()","out":"与えられた値に対応する「ゼロ値」の取得"}
{"in":"gws = conn.get_all_internet_gateways(filters={'attachment.vpc-id': vpc.id})","out":"AWS boto: VPCに接続されているすべてのインターネットゲートウェイのリストを取得する方法"}
{"in":"ip_string = \",\".join(IPsToPING)<nl>subprocess.call('Fping.exe -H %s ...' % ip_string)","out":"個々のリスト項目（文字列）をストリップするにはどうすればよいですか？"}
{"in":"#!\/usr\/bin\/env python<nl><nl>d = {<nl><tab> 'key1' : ['A', 'B', 'C'], <nl><tab> 'key2' : ['B', 'A', 'G'], <nl><tab> 'key3' : ['Z', 'H', 'I']<nl>}<nl><nl>l = ['A', 'A', 'B', 'D']<nl><nl>uniq_l = set(l) # you don't need to check duplicates twice<nl><nl>for key, value in d.items():<nl><tab> if value[0] in uniq_l:<nl><tab><tab>  print \"Match\", key, value<nl><nl># Output:<nl># Match key2 ['B', 'A', 'G']<nl># Match key1 ['A', 'B', 'C']","out":"リストの項目と一致する辞書の値に対してアクションを実行しますか？"}
{"in":"Location.objects.annotate(encounter_count=Count('subject__encounter'))","out":"アノテートのdjango製品"}
{"in":"inrels = graph.cypher.query('START strt=node({mynode}) \\<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> MATCH strt<-[r:follows]-neighbor \\<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> WHERE neighbor.attr = {myattr} \\<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> RETURN r', {'mynode': self.eid, 'myattr': someattr})<nl><nl>firstrel = inrel.next()","out":"Bulbsを使ってneo4j Cypherクエリを入力する方法は？"}
{"in":"from rx.executors import ThreadPoolExecutor<nl>from rx.futures import Future<nl><nl>with ThreadPoolExecutor(10) as tp:<nl><tab> futures = [tp.submit(foo, i) for i in range(10)] # list of futures<nl><tab> future_all = Future.all(futures) # combines into single future with list of results<nl><tab> future_all_sum = future_all.map(sum) # maps result list to sum of elements<nl><tab> print(future_all_sum.result(timeout=10))","out":"pythonの非同期APIをscalaのように作りたい\/持たせたい"}
{"in":"lines = tuple(open('\/var\/log\/fail2ban.log', 'r'))<nl>seen = set()<tab> <nl>for item in lines:<nl>  item = item.strip('<nl>')<nl>  if \"fail2ban.actions:\" in item and \"[postfix]\" in item and \"Ban\" in item:<nl><tab> item = item.split(' ')<nl><tab> if item[6] not in seen:<nl><tab><tab>seen.add(item[6])<nl><tab><tab>print item","out":"複数のリストでユニックをソートする"}
{"in":"lines = []<nl><nl>with open('file.txt', 'r') as f:<nl><tab> lines = f.readlines()<nl><nl>with open('file.txt', 'w') as f:<nl><tab> f.writelines(lines[:1] + lines[2:]) # This will skip the second line","out":"テキストファイルから2行目を削除する"}
{"in":"import django.utils.translation.trans_real as trans<nl>from django.utils.thread_support import currentThread<nl><nl>def isactive():<nl>  return currentThread() in trans._active","out":"Djangoです：翻訳が有効になっているかどうかを検出する方法は？"}
{"in":"aa1 = [0,1,1,2,3,3,4,4,5,9]<nl>aa2 = [0,1,3,3,4,4,4,4,5,6,7,9]<nl>bins = [0,3,9]<nl>height = [np.histogram( xs, bins=bins)[0] for xs in [aa1, aa2]]<nl>left, n = np.arange(len(bins)-1), len(height)<nl><nl>ax = plt.subplot(111)<nl>color_cycle = ax._get_lines.color_cycle<nl><nl>for j, h in enumerate(height):<nl><tab> ax.bar(left + j \/ n, h, width=1.0\/n, color=next(color_cycle))<nl><nl>ax.set_xticks(np.arange(0, len(bins)))<nl>ax.set_xticklabels(map(str, bins))","out":"matplotlibで不等間隔のビンを同じビン幅でヒストグラムを描画する方法"}
{"in":"p = re.compile(r'([a-zA-Z0-9\\-\\+\\.]+)\\ ([0-9][0-9a-zA-Z\\:\\.\\-]+)')<nl>iterator = p.finditer(\"amd64 build of dvdrip software 1:0.98.10-0.2svn20090909 in archive\")<nl>for match in iterator:<nl><tab> print match.group()<nl># Prints: software 1:0.98.10-0.2svn20090909","out":"Pythonで正規表現を作成する"}
{"in":"def get_img(html):<nl><tab> soup = BeautifulSoup(html)<nl><tab> img_box = []<nl><tab> imgs = soup.find_all('div', class_= 'pthumb')<nl><nl><tab> for img in imgs:<nl><tab><tab>  img_box.append(get_domain(BASE_URL) + img.img['src'])<nl><nl><tab> my_path = '\/home\/<username>\/Desktop'  # use whatever path you like<nl><tab> for img in img_box:<nl><tab><tab>  urllib.request.urlretrieve(img, os.path.join(my_path, os.path.basename(img)))","out":"urlから専用フォルダに画像を保存する"}
{"in":"import sys<nl>import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>testData = np.array([[0,0], [0.1, 0], [0, 0.3], [-0.4, 0], [0, -0.5]])<nl>fig, ax = plt.subplots()<nl>coll = ax.scatter(testData[:,0], testData[:,1], color=[\"blue\"]*len(testData), picker = 5, s=[50]*len(testData))<nl>plt.grid(True)<nl>plt.axis([-0.5, 0.5, -0.5, 0.5])<nl><nl>def on_pick(event):<nl><tab> print testData[event.ind], \"clicked\"<nl><tab> coll._facecolors[event.ind,:] = (1, 0, 0, 1)<nl><tab> coll._edgecolors[event.ind,:] = (1, 0, 0, 1)<nl><tab> fig.canvas.draw()<nl><nl>fig.canvas.mpl_connect('pick_event', on_pick)<nl>plt.show()","out":"Python, Matplotlib, 散布図, クリックした点の色を変える"}
{"in":"for key,group in itertools.groupby(dirtup2,operator.itemgetter(2)):<nl><tab> newlist=sorted(group,key=operator.itemgetter(1),reverse=True)<nl><tab> tuple_with_max=newlist[0]<nl><tab> print tuple_with_max","out":"サブリストから最大の項目を持つタプルを抽出する（ディレクトリで最新のレポートを見つける）。"}
{"in":"cmd = r\"\"\"c:\\temp\\osmconvert.exe c:\\temp\\770.osc.gz -b=1,1,3,3 -o=c:\\temp\\extract.o5m\"\"\"","out":"PythonでOsmconvertを使う"}
{"in":"from pages.view_consignments import ViewConsignmentsPage<nl><nl>class AddConsignmentPage(BasePage):<nl><nl><tab> def __init__(self, driver):<nl><tab><tab>  super(AddConsignmentPage, self).__init__(driver, self._title)<nl><tab><tab>  self._title_uuid = get_random_uuid(7)<nl><tab><tab>  ViewConsignmentsPage._title_uuid = self._title_uuid","out":"Pythonの課題ごとに1回ずつ乱数値を生成する。"}
{"in":"orig_arr = ma.array([[11,12],[21,22]])<nl>orig_arr[1,:] = ma.masked<nl><nl>print orig_arr<nl>## Prints: [[11 12]<nl>##<tab><tab><tab> [-- --]]<nl><nl>view_arr = orig_arr[1,:]<nl>print view_arr<nl>## Prints: [-- --]<nl><nl>view_arr.mask=False # or [True, False] <nl><nl><nl>view_arr[:] = [31,32] <nl>print view_arr<nl>## Prints: [31 32] #or [-- 32]<nl><nl>print orig_arr<nl>## Prints: [[11 12]<nl>##<tab><tab><tab> [31 32]] # or [-- 32]","out":"Numpyでマスクされた配列をスライスするとき、マスクを維持するにはどうすればよいですか？"}
{"in":"os.path.realpath()","out":"Linuxでシンボリックリンクから実行されるスクリプトのファイル名を確認する方法"}
{"in":"import os<nl>for root, dirs, files in os.walk('path\/to\/local\/dir'):<nl><tab> for fname in files:<nl><tab><tab>  full_fname = os.path.join(root, fname)<nl><tab><tab>  ftp.storbinary('STOR remote\/dir' + fname, open(full_fname, 'rb'))","out":"Python ftplib - 複数ファイルのアップロード？"}
{"in":"from urlparse import urlparse<nl>url = \"http:\/\/stackoverflow.com\/questions\/34446468\/looks-like-a-valid-python-syntax-to-me-but-gives-me-invalid-error-using-in-djang\"<nl>long_url = urlparse(url).netloc if url else \"be kind to one another\"<nl>long_url.split('.', 1)[1] if long_url.split('.', 1)[0] == 'www' else long_url","out":"は有効な Python 構文のように見えますが、django で使用すると無効なエラーが発生します。"}
{"in":"scipy.spatial.distance.euclidean","out":"Pythonによる多次元ユークレッド距離の作成"}
{"in":"import smtplib<nl><nl>def sendmail(sender, recipient, subject, body, server=\"localhost\"):<nl><tab> \"Sends an e-mail to the specified recipient.\"<nl><nl><tab> body = \"<html><head><\/head><body><pre>\" + body + \"<\/pre><\/body><\/html>\"<nl><nl><tab> headers = [\"From: \" + sender,<nl><tab><tab><tab><tab><tab>\"Subject: \" + subject,<nl><tab><tab><tab><tab><tab>\"To: \" + recipient,<nl><tab><tab><tab><tab><tab>\"MIME-Version: 1.0\",<nl><tab><tab><tab><tab><tab>\"Content-Type: text\/html\"]<nl><tab> headers = \"\\r<nl>\".join(headers)<nl><nl><tab> session = smtplib.SMTP(server)<nl><tab> session.sendmail(sender, recipient, headers + \"\\r<nl>\\r<nl>\" + body)<tab><tab><tab><tab><tab> <nl><tab> session.quit()","out":"Pythonを使ってgmailからメールを送信する。"}
{"in":"for i, (word, frequency) in enumerate(top_words, start=1):<nl><tab> print(\"%s %d %d\" % (word, i, frequency))","out":"単語のランク番号をプリントアウトする方法は？"}
{"in":"import matplotlib<nl>matplotlib.use('TKAgg')","out":"Mac OS Xでキーボードを使用してpyplot図を閉じる"}
{"in":"#!\/usr\/bin\/env python<nl># -*- coding: utf-8 -*-<nl><nl><nl>import cherrypy<nl><nl><nl>config = {<nl>  'global' : {<nl><tab> 'server.socket_host' : '127.0.0.1',<nl><tab> 'server.socket_port' : 8080,<nl><tab> 'server.thread_pool' : 4<nl>  }<nl>}<nl><nl><nl>class App:<nl><nl>  @cherrypy.expose<nl>  def default(self, *args, **kwargs):<nl><tab> return u'It is me again at {0} with {1}'.format(args, kwargs)<nl><nl><nl>if __name__ == '__main__':<nl>  cherrypy.quickstart(App(), '\/', config)","out":"チェリーピーキャッチオールルート"}
{"in":"logging.info('date={}'.format(date))","out":"Python：ロギング TypeError: 文字列フォーマット時にすべての引数が変換されない。"}
{"in":"w = Canvas(root)<nl>w.pack()<nl>w.create_image(0, 0, image=photo, anchor=\"nw\")","out":"Python、タプルのインデックスが範囲外である。"}
{"in":"def get_detail(self, slug):<nl><tab> qr = v1_api.canonical_resource_for('question')<nl><tab> try:<nl><tab><tab>  question = qr.cached_obj_get(slug=slug)<nl><tab> except Question.DoesNotExist:<nl><tab><tab>  raise Http404<nl><nl><tab> bundle = qr.full_dehydrate(qr.build_bundle(obj=question))<nl><nl><tab> # create response<nl><tab> desired_format = qr.determine_format(self.request)<nl><tab> serialized = qr.serialize(self.request, bundle, desired_format)<nl><tab> return serialized","out":"canonical_resource_for('object') からデータバンドルを構築するTastypie。"}
{"in":"class LogWaitLogInOrder(pipeline.Pipeline):<nl><nl>  def run(self, message1, message2, delay):<nl><tab> with pipeline.InOrder():<nl><tab><tab>yield LogMessage(message1)<nl><tab><tab>yield Delay(seconds=delay)<nl><tab><tab>yield LogMessage(message2)<nl><nl><tab> yield LogMessage('This would happen immediately on run')","out":"Google App Engineのタスクキューを使用して、タスクを(FIFO)順序で実行するには？"}
{"in":"import pylab<nl>import matplotlib.colors<nl>import numpy<nl><nl>im = pylab.imread('lena.png').sum(axis=2) # make grayscale<nl>pylab.imshow(im, cmap=pylab.cm.gray)<nl>pylab.title('orig')<nl>imvals = numpy.sort(im.flatten())<nl>lo = imvals[0]<nl>hi = imvals[-1]<nl>steps = (imvals[::len(imvals)\/256] - lo) \/ (hi - lo)<nl>num_steps = float(len(steps))<nl>interps = [(s, idx\/num_steps, idx\/num_steps) for idx, s in enumerate(steps)]<nl>interps.append((1, 1, 1))<nl>cdict = {'red' : interps,<nl><tab><tab><tab>'green' : interps,<nl><tab><tab><tab>'blue' : interps}<nl>histeq_cmap = matplotlib.colors.LinearSegmentedColormap('HistEq', cdict)<nl>pylab.figure()<nl>pylab.imshow(im, cmap=histeq_cmap)<nl>pylab.title('histeq')<nl>pylab.show()","out":"matplotlibのカラーテーブルのヒストグラム均等化"}
{"in":"def f(x):<nl><tab> return x+1<nl><nl>var1 = 5<nl>var1 = f(var1)<nl># var1 is now 6","out":"python: 変数をそれ自身の関数と等しくなるように設定できますか？"}
{"in":"config.add_route('simple_example', '\/simple_example')<nl>config.add_route('test', '\/test')<nl><nl>@view_config(route_name='test', renderer='templates\/main.html')<nl>def test(request):<nl><tab> partial = [\"Custom\/test.html\"]<nl><tab> return dict(partial=partial)","out":"GETリクエスト辞書に'iDisplayStart'キーがない。"}
{"in":"POS_SERVO = struct.pack('<h', int(posicion))","out":"Python-シリアルポートで送信される整数にstruct.packの値を追加する方法"}
{"in":"from datetime import datetime, timedelta<nl><nl>posts = Post.objects.filter(author=member.user, xyz=xzy_id, pub_date__gte=datetime.now()-timedelta(days=7))","out":"過去7日間からQuerySetオブジェクトを作成する。"}
{"in":"class BaseAttrEnforcer(type):<nl><tab> def __init__(cls, name, bases, d):<nl><tab><tab>  if 'loglevel' not in d:<nl><tab><tab><tab><tab>raise ValueError(\"Class %s doesn't define loglevel attribute\" % name)<nl><tab><tab>  type.__init__(cls, name, bases, d)<nl><nl>class Base(object):<nl><tab> __metaclass__ = BaseAttrEnforcer<nl><tab> loglevel = None<nl><nl>class d1(Base):<nl><tab> logfile = \"d1.log\"<nl><tab> loglevel = \"debug\"<nl><nl>class d2(Base):<nl><tab> logfile = \"d2.log\"<nl><tab> loglevel = \"info\"<nl><nl>class d3(Base):<nl><tab> logfile = \"d3.log\"<nl><tab> # I should fail","out":"Pythonの各サブクラスでクラス変数が異なる値であること"}
{"in":"title_count = Counter(titles).most_common()<nl>for name,count in title_count:<nl><tab> print('{} was found {} times'.format(name, count))","out":"一覧から頻度を抽出する"}
{"in":"import urllib<nl>urllib.urlretrieve(\"http:\/\/www.example.com\/songs\/mp3.mp3\", \"\/home\/download\/mp3.mp3\")","out":"Pythonを使ってファイルをダウンロードする方法とは？"}
{"in":"fp = codecs.open('outputfile6.txt', encoding='utf-8')<nl>lines1 = fp.readlines()<nl>fp.close()<nl>fb = codecs.open('outputfile6.txt', 'w')<nl>for j in range(0,len(lines1)):<nl><tab> if j>end:<nl><tab><tab>  fb.write(lines1[j].encode('UTF-8'))<nl><nl>fb.close()","out":"別のファイルからファイルに書き込み、ファイルから行を削除する。"}
{"in":"authors_books = db.Table(<nl><tab> 'authors_books',<nl><tab> db.Column('id', UUID(as_uuid=True), primary_key=True, default=lambda: uuid.uuid4().hex),<nl><tab> db.Column('author_id', UUID(as_uuid=True), db.ForeignKey('authors.id')),<nl><tab> db.Column('book_id', UUID(as_uuid=True), db.ForeignKey('books.id')),<nl>)","out":"Flask-Sqlalchemy、多対多の関係における2次テーブルのプライマリキー。"}
{"in":"from sqlalchemy.sql import between<nl>import datetime<nl># [all other relevant imports]<nl><nl>td = datetime.timedelta(seconds=2)<nl>t1_entry = session.query(table_1).filter(table_1.name == 'the_name').first()<nl>if t1_entry is not None:<nl> tmin = t1_entry.date - td<nl> tmax = t1_entry.date + td<nl> t2_entry = session.query(table_2).filter(between(table_2.date, tmin, tmax)).first()<nl> return (t1_entry, t2_entry)<nl>return None","out":"SQLAlchemyを使って、2秒以内のオブジェクトをフィルタリングする。"}
{"in":"import base64<nl>import numpy as np<nl><nl>t = np.arange(25, dtype=np.float64)<nl>s = base64.b64encode(t)<nl>r = base64.decodestring(s)<nl>q = np.frombuffer(r, dtype=np.float64)<nl><nl>print(np.allclose(q, t))<nl># True","out":"Numpy配列からbase64へ、そしてNumpy配列に戻す - Python"}
{"in":"import random<nl><nl>def shuffled(seq):<nl>  copy = list(seq)<nl>  random.shuffle(copy)<nl>  return copy<nl><nl>def rand_repeat(seq):<nl>  while True:<nl><tab> for el in shuffled(seq):<nl><tab><tab>yield el<nl><nl>list1 = ['tom', 'mary', 'frank', 'joe', 'john', 'barry']<nl>list2 = [1, 2, 3, 4]<nl><nl>print zip(shuffled(list1), rand_repeat(list2))","out":"forループのために2つのリストをランダム化する"}
{"in":"def print_message(message):<nl><tab> print \"<nl>\"<nl><tab> print \"-\"*10<nl><tab> print message<nl><tab> print \"-\"*10<nl><tab> print \"<nl>\"<nl><nl>print_message('This is a test of the %s system' % codes[0])<nl>print_message('This is not a test of the %s system and all is good'% codes[1])","out":"pythonで、一連のコマンドを1つの変数に代入するにはどうすればよいですか？"}
{"in":"for line in infline:<nl><tab>  #re.sub(\"pattern\",\"replacement\", \"string\")<nl><tab>  line =re.sub(r\"([a-zA-Z]+:[0-9\\.]+)\",r\"\\1 STRING\", line)<nl><tab>  print line","out":"pythonで多桁のワイルドカードを採用し、様々なパターンを使って文字列を解析するにはどうすればよいでしょうか。"}
{"in":"def memsetObject(bufferObject):<nl><tab> \"Note, dangerous\"<nl><tab> import ctypes<nl><tab> data = ctypes.POINTER(ctypes.c_char)()<nl><tab> size = ctypes.c_int()  # Note, int only valid for python 2.5<nl><tab> ctypes.pythonapi.PyObject_AsCharBuffer(ctypes.py_object(bufferObject), ctypes.pointer(data), ctypes.pointer(size))<nl><tab> ctypes.memset(data, 0, size.value)<nl><nl>testObject = \"sneakyctypes\"<nl>memsetObject(testObject)<nl>print repr(testObject)<nl># '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'","out":"Pythonのバッファオブジェクトでmemsetを行うには？"}
{"in":"L = [(x, y[0]) for x, y in L]","out":"Pythonでリストを変更する"}
{"in":"from mod_python import Cookie<nl>ID = Cookie.get_cookie(req, 'ID')<nl>if ID:<nl><tab> ID.expires = time.time() + 60*120<nl><tab> Cookie.add_cookie(req, ID)<nl><tab> ID = ID.value<nl>else:<nl><tab> ID = None","out":"投稿データを設定する python apache"}
{"in":"print(\"UDP target IP:\", UDP_IP)<nl>print(\"UDP target port:\", UDP_PORT)<nl>print(\"message:\", MESSAGE)<nl><nl>sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP<nl>sock.sendto(bytes(MESSAGE, \"utf-8\"), (UDP_IP, UDP_PORT))","out":"PythonがUDPパケットを送信する"}
{"in":"url.split('\/')[-1]","out":"URLの一部を抽出する - python"}
{"in":"state_obj = State.objects.get(name=\"Alaska\")<nl>province_obj = state_obj.provinces({\"name\": \"Juneau\"})<nl>for city in province_obj.cities:<nl><tab> if city.name == \"Test_City\" and city.population == 10000:<nl><tab><tab>  province_obj.cities.remove(city)","out":"mongoengineで、あるドキュメントの別の埋め込みドキュメントにある埋め込みドキュメントの項目を削除する方法"}
{"in":"#!\/usr\/bin\/env python<nl><nl>import re<nl><nl># uncomment\/comment for test with a real file ...<nl># header = open('mycfile.c', 'r').read()<nl>header = \"\"\"<nl><nl>#if 0<nl><tab> whatever(necessary)<nl><tab> and maybe more<nl><nl>#endif<nl><nl>\/* <nl> * This is an original style comment<nl> *<nl> *\/<nl><nl>int main (int argc, char const *argv[])<nl>{<nl><tab> \/* code *\/<nl><tab> return 0;<nl>}<nl><nl>\"\"\"<nl><nl>p_macro = re.compile(\"#if.*?#endif\", re.DOTALL)<nl>p_comment = re.compile(\"\/\\*.*?\\*\/\", re.DOTALL)<nl><nl># Example ...<nl># print re.sub(p_macro, '', header)<nl># print re.sub(p_comment, '', header)","out":"C言語のヘッダーファイルから特定のプリプロセッサーディレクティブやコメントを自動的に削除する方法は？"}
{"in":"data = list(Data.objects.all().values('deviceId','payload'))","out":"Django JSON文字列をjsonオブジェクトに変換します。"}
{"in":"class GuildMiddleware(object):<nl><tab> def process_request(self, request):<nl><tab><tab>  request.G = figure_out_what_G_is()<nl><tab><tab>  return None","out":"カスタムコンテキストプロセッサの定義内で、ビューにコンテキスト変数が既に設定されているかどうかを確認することは可能ですか？"}
{"in":"module_name = 'a.foo'<nl>module = __import__(module_name, globals(), locals(), ['*'])","out":"django - 変数が変更されたときに別のモジュールをインポートする。"}
{"in":"import csv<nl><nl>from itertools import chain<nl><nl>reader = csv.DictReader(f, delimiter='\\x01', lineterminator=\"\\x02\")<nl>my_dict_of_values = {}  # whatever goes here<nl><nl>for line in chain(reader, my_dict_of_values):<nl><tab> do_something(line)","out":"2つの異なるイテレート可能なオブジェクトを反復処理する方法"}
{"in":"import requests<nl>import re<nl><nl>UTORRENT_URL = 'http:\/\/%s:%s\/gui\/' % ('192.168.1.80', '55655')<nl>UTORRENT_URL_TOKEN = '%stoken.html' % UTORRENT_URL<nl>REGEX_UTORRENT_TOKEN = r'<div[^>]*id=[\\\"\\']token[\\\"\\'][^>]*>([^<]*)<\/div>'<nl><nl>auth = requests.auth.HTTPBasicAuth('x', 'x')<nl>r = requests.get(UTORRENT_URL_TOKEN, auth=auth)<nl>token = re.search(REGEX_UTORRENT_TOKEN, r.text).group(1)<nl>guid = r.cookies['GUID']<nl>cookies = dict(GUID = guid)<nl><nl>params = {'action':'add-file','token': token}<nl>files = {'torrent_file': open('C:\\\\x.torrent', 'rb')}<nl>r = requests.post(url=UTORRENT_URL, auth=auth, cookies=cookies, params=params, files=files)","out":"Web apiでTorrentを追加する"}
{"in":"import mechanize<nl><nl>class HeadRequest(mechanize.Request):<nl><tab> def get_method(self):<nl><tab><tab>  return \"HEAD\"<nl><nl>request = HeadRequest(\"http:\/\/www.example.com\/\")<nl>response = mechanize.urlopen(request)<nl><nl>print response.info()","out":"メカナイズライブラリーでHEADリクエストを行うにはどうすればよいですか？"}
{"in":"from PIL import Image<nl>import StringIO<nl>import binascii<nl><nl># In your case, 's' will be the string from the field<nl># in the database.<nl>s = open(\"chenchi.txt\").read()<nl><nl># chop off the '0x' at the front.<nl>s = s[2:] <nl><nl># Decode it to binary.<nl>binary = binascii.unhexlify(s)<nl><nl># Wrap the bytes in a memory stream that can be read like a file.<nl>bytes = StringIO.StringIO(binary)<nl><nl># Use pillow to read the memory stream into an image (it autodetects the format).<nl>im = Image.open(bytes)<nl><nl># And show it. Or you could .save() it.<nl>im.show()","out":"pythonを使用して、Windows sql serverから画像データ型を画像に変換する方法は？"}
{"in":"from subprocess import PIPE<nl>import subprocess<nl>pro = subprocess.Popen(\"ifconfig\", stdout=PIPE, stderr=PIPE)<nl>data = pro.communicate()[0].split()<nl>for line in data:<nl><tab> print \"THIS IS A LINE\"<nl><tab> print line<nl><tab> print \"**************\"","out":"Popenや他のシステムコマンドで、文字列ではなくリストとして出力を得る必要がある。"}
{"in":"x = [1,2,3,4,5,6]<nl>restart = True<nl>while restart:<nl><tab> for i in x:<nl><tab><tab>  # add any exit condition!<nl><tab><tab>  # if foo == bar:<nl><tab><tab>  #<tab>restart = False<nl><tab><tab>  #<tab>break<nl><tab><tab>  if i == 4:<nl><tab><tab><tab>  break<nl><tab><tab>  else:<nl><tab><tab><tab><tab>print i","out":"pythonでforループを再開する方法は？"}
{"in":"#Django<nl>from django.contrib.auth.models import User<nl>from django.conf.urls import url<nl><nl>#Tasty<nl>from tastypie.resources import ModelResource<nl><nl>class UserResource(ModelResource):<nl><tab> class Meta:<nl><tab><tab>  queryset = User.objects.all()<nl><tab><tab>  resource_name = 'users'<nl><nl><tab><tab>  #Disallow list operations<nl><tab><tab>  list_allowed_methods = []<nl><tab><tab>  detail_allowed_methods = ['get', 'put', 'patch']<nl><nl><tab><tab>  #Exclude some fields<nl><tab><tab>  excludes = ('first_name', 'is_active', 'is_staff', 'is_superuser', 'last_name', 'password',)<nl><nl><tab> #Apply filter for the requesting user<nl><tab> def apply_authorization_limits(self, request, object_list):<nl><tab><tab>  return object_list.filter(pk=request.user.pk)<nl><nl><tab> #Override urls such that GET:users\/ is actually the user detail endpoint<nl><tab> def override_urls(self):<nl><tab><tab>  return [<nl><tab><tab><tab><tab>url(r\"^(?P<resource_name>%s)\/$\" % self._meta.resource_name, self.wrap_view('dispatch_detail'), name=\"api_dispatch_detail\"),<nl><tab><tab>  ]","out":"Django Tastypie - オブジェクトの詳細のみを表示するリソース。"}
{"in":"some_list = [l + [10, 11] for l in some_list]","out":"Pythonでリストの中にリストを拡張するにはどうすればよいですか？"}
{"in":"from collections import defaultdict<nl><nl>d = defaultdict(list)<nl>for key, value in yourlist:<nl><tab> d[key].append(value)<nl><nl>result = [[key] + value for key, value in d.items()]","out":"キー\/バリューに基づくリスト内のカップルのグループ化(python)"}
{"in":"ContactDetails.objects.filter(server__user=request.user)","out":"特定のユーザーフィールドを持つすべての被参照オブジェクトを含むクエリセットを取得するにはどうすればよいですか？"}
{"in":"%-140.140s % some_text","out":"テキスト整列, python"}
{"in":"# Retrieve tasks<nl># Reference: http:\/\/docs.celeryproject.org\/en\/latest\/reference\/celery.events.state.html<nl>query = celery.events.state.tasks_by_type(your_task_name)<nl><nl># Kill tasks<nl># Reference: http:\/\/docs.celeryproject.org\/en\/latest\/userguide\/workers.html#revoking-tasks<nl>for uuid, task in query:<nl><tab> celery.control.revoke(uuid, terminate=True)","out":"Celeryのタスクをタスク名で検査・キャンセルする方法"}
{"in":"conn = MySQLdb.connect(host=\"1.2.3.4\", port=1234, user=\"root\", passwd=\"x\", db=\"test\")<nl><nl>for j in range(10):<nl><tab> try:<nl><tab><tab>  for i in range(10):<nl><tab><tab><tab><tab>cur = conn.cursor()<nl><tab><tab><tab><tab>query = \"DELETE FROM SomeTable WHERE ID = %d\" % i<nl><tab><tab><tab><tab>cur.execute(query)<nl><tab><tab><tab><tab>cur.close()<nl><tab><tab>  conn.commit()<nl><tab> except Exception:<nl><tab><tab>  conn.rollback()<nl><nl>conn.close()","out":"MySQLdbで1接続につき複数トランザクションを実行"}
{"in":"import scipy, pylab<nl>names = ['Alice', 'Bob', 'Carol', 'David']<nl>interests = [['Football', 'Swimming'], ['Swimming', 'Jooga', 'Jogging'], <nl><tab><tab><tab><tab> ['Cycling', 'Football'], ['Football', 'Tennis', 'Cycling']]<nl>allinterests = list(set(reduce(lambda x,y:x+y, interests)))<nl>X = scipy.zeros((len(interests), len(allinterests)))<nl>for i, indinterests in enumerate(interests):<nl><tab> for x in indinterests:<nl><tab><tab>  X[i, allinterests.index(x)] = 1<nl>pylab.matshow(X, interpolation='nearest', cmap=pylab.cm.gray_r)<nl>pylab.show()<nl>pylab.yticks(range(len(names)), names)<nl>pylab.ylim([len(names)-0.5, -0.5])<nl>pylab.xticks(range(len(allinterests)), allinterests)<nl>pylab.savefig('interests.png')","out":"多次元データをプロットする"}
{"in":"text2=corpus<nl>text4=nltk.word_tokenize(text2)<nl>tags=nltk.pos_tag(text4)<nl>counter2={}<nl>for a,b in tags:<nl><tab> counter2[b] = counter2.get(b,0)+1<nl>list5=sorted([(freq,word) for word, freq in counter2.items()], reverse=True)[:3]<nl>print [word for freq,word in list5]","out":"最も一般的なPOSのリストでは、アウトカムが意味をなさない"}
{"in":"s = \"Some ABC text followed by XYZ followed by multiple ABC, more ABC, more ABC\"<nl><nl>pattern = re.compile(r'(?<=XYZ)(.*?)ABC')<nl>while pattern.search(s):<nl><tab>s = pattern.sub(r'\\1REPLACED', s)<nl><nl>print s","out":"XYZに続くABCが文字列のどこかに存在する場合にマッチする正規表現"}
{"in":"def main():<nl><tab> phrase = input(\"Enter a phrase: \")<nl><tab> print(\"Number of characters: \",len(phrase))<nl><tab> count = wordCount(phrase)<nl><tab> average(phrase,count)<nl><tab> freqWords(phrase)<nl><nl>def wordCount(phrase):<nl><tab> words = phrase.split()<nl><tab> wordCount = len(words)<nl><tab> print(\"Number of words: \",wordCount)<nl><tab> return wordCount<nl><nl>def average(phrase, wordCount):<nl><tab> avg = len(phrase)\/wordCount<nl><tab> print(\"The average word length: %.01f\" % avg)<nl><nl>def freqWords(phrase):<nl><tab> freqLetter = phrase[0]<nl><tab> max = phrase.count(phrase[0])<nl><tab> for char in phrase:<nl><tab><tab>  if char is not \" \":<nl><tab><tab><tab><tab>if phrase.count(char) > max:<nl><tab><tab><tab><tab><tab> freqLetter = char<nl><tab><tab><tab><tab><tab> max = phrase.count(char)<nl><nl><tab> print(\"The most frequent letter: \", freqLetter)<nl><nl>main()","out":"定義にパラメータを割り当てる方法を教えてください"}
{"in":"source = \"\"\"<nl>class test:<nl><tab> class inner_class:<nl><tab><tab>  pass<nl><tab> pass<nl><nl>class test2:<nl><tab> pass<nl>\"\"\"<nl><nl>import ast<nl>p = ast.parse(source)<nl>classes = [node.name for node in ast.walk(p) if isinstance(node, ast.ClassDef)]<nl># ['test', 'test2', 'inner_class']","out":"pythonでファイル内のすべてのクラス名のリストを見つけるには？"}
{"in":"import os.path<nl>with open('idfile') as fin:<nl><tab>  header = next(fin) #read the `#ID` comment header line.  Don't use it.<nl><tab>  for line in fin:<nl><tab><tab><tab>fname = 'datafileID{0}.csv'.format(line.strip())<nl><tab><tab><tab>if not os.path.exists(fname):<nl><tab><tab><tab><tab> print fname","out":"すべてのファイルが存在することを確認する"}
{"in":"# Import required alphabet<nl>from Bio.Alphabet import IUPAC<nl><nl># Pass imported alphabet as an argument for `SeqIO.parse`:<nl>records = list(SeqIO.parse(handle, 'fasta', IUPAC.extended_protein))","out":"BioPythonです：アミノ酸のアルファベットを変換する方法"}
{"in":"size = 10<nl>maxlen = len(str(size * size))<nl>m = size * 2 - 1<nl>matrix = [[' ' * maxlen] * m for _ in range(m)]<nl><nl>for n in range(size * size):<nl><tab> r = n \/\/ size<nl><tab> c = n % size<nl><tab> matrix[c + r][size - r - 1 + c] = '{0:{1}}'.format(n + 1, maxlen)<nl><nl>print '<nl>'.join(''.join(row) for row in matrix)","out":"数字を菱形に印刷する"}
{"in":"def index():  <nl><tab> return \"Python works!\"<nl><nl>def command(command):  <nl><tab> return \"this is a command %s!\" %command","out":"PythonがApacheからURLを取得する"}
{"in":"with open(inpf, \"r\") as ifile:<nl><tab> for line in ifile:<nl><tab><tab>  if line.startswith(\"lattice parameters\"):<nl><tab><tab><tab><tab>print(next(ifile, '').strip())","out":"pythonでマッチした行の次の行を読む"}
{"in":"def strip_unwanted(line):<nl><tab> title = str(line['title']).replace(' ', '-').replace(\"??\", \"\")<nl><tab> title = ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))<nl><tab> line['title'] = title<nl><tab> return line<nl><nl>with open(\"output.csv\", encoding = \"utf8\") as input:<nl><tab> dic_entries = csv.DictReader(input)<nl><tab> # use the 'map' function<nl><tab> new_entries = map(strip_unwanted, dic_entries)<nl><nl><tab> with open('some.csv', 'wb') as output:<nl><tab><tab>  writer = csv.DictWriter(output)<nl><tab><tab>  writer.writerows(new_entries)","out":"pythonでcsvファイルのカラムを読み込む"}
{"in":"def unanimous(it):<nl>  it1, it2 = itertools.tee(it)<nl>  return all(it1) or not any(it2)","out":"すべての要素がFalseに評価される -OR- すべての要素がTrueに評価されるかを確認する Pythonicな方法"}
{"in":"from collections import Counter<nl>[x*c for x,c in Counter([1, 2, 1, 3, 3]).items()]","out":"python: リストの類似値の合計"}
{"in":"import sys<nl>import tweepy<nl><nl>consumer_key=\"\"<nl>consumer_secret=\"\"<nl>access_key=\"\"<nl>access_secret=\"\"<nl><nl>auth = tweepy.OAuthHandler(consumer_key, consumer_secret)<nl>auth.set_access_token(access_key, access_secret)<nl>api = tweepy.API(auth)<nl><nl><nl>class CustomStreamListener(tweepy.StreamListener):<nl><tab> def on_status(self, status):<nl><tab><tab>  if 'manchester united' in status.text.lower():<nl><tab><tab><tab><tab>print status.text<nl><nl><tab> def on_error(self, status_code):<nl><tab><tab>  print >> sys.stderr, 'Encountered error with status code:', status_code<nl><tab><tab>  return True # Don't kill the stream<nl><nl><tab> def on_timeout(self):<nl><tab><tab>  print >> sys.stderr, 'Timeout...'<nl><tab><tab>  return True # Don't kill the stream<nl><nl>sapi = tweepy.streaming.Stream(auth, CustomStreamListener())<tab> <nl>sapi.filter(locations=[-6.38,49.87,1.77,55.81])","out":"tweepyモジュールに位置情報フィルタを追加する方法"}
{"in":"cursor.executemany(\"insert into table (var1,var2,var3) values (%s, %s, %s)\", [list1,list2,list3])","out":"pymysql（Python）を使ってMySQLに複数のリストをインポートする。"}
{"in":"os.system(\"screencapture screen.png\")","out":"Mac OS XのPythonでスクリーンショットを撮る"}
{"in":"import pandas as pd<nl>data = [('a', 'b', 'c'), ('d', 'e', 'f')]<nl>df = pd.DataFrame(data)<nl>df.to_csv('test.csv', index=False, header=False)","out":"PythonでリストのリストをCSVファイルに書き出すには？"}
{"in":"admin.py<nl>class PermissionInline(admin.TabularInline):<nl><tab> form = PermissionForm<nl><tab> model = Permission<nl><tab> extra = 3<nl><nl>forms.py<nl>class PermissionForm(forms.ModelForm):<nl><tab> class Meta:<nl><tab><tab>  model = Permission<nl><nl><tab> def clean(self):<nl><tab><tab>  cleaned_data = self.cleaned_data<nl><tab><tab>  user = cleaned_data['user']<nl><tab><tab>  role = cleaned_data['role']<nl><tab><tab>  if role.id != 1:<nl><tab><tab><tab><tab>folder = cleaned_data['application'].folder<nl><tab><tab><tab><tab>if len(filter(lambda x:x in user.profile.company.all(),folder.company.all())) > 0: # this is an intersection<nl><tab><tab><tab><tab><tab> raise forms.ValidationError(\"One of the users of this Application works for one of the Repository's organisations!\")<nl><tab><tab>  return cleaned_data","out":"Models.pyで保存前にManyToManyFieldのバリデーションを行う。"}
{"in":"from django.db import IntegrityError<nl><nl>class Property(models.Model):<nl><tab> owner = models.ForeignKey(Owner)<nl><nl><tab> def save(self, *args, **kwargs):<nl><tab><tab>  if self.owner.type == \"Individual\":<nl><tab><tab><tab><tab>if Property.objects.filter(owner=self.owner).exists():<nl><tab><tab><tab><tab><tab> raise IntegrityError<nl><tab><tab>  super(Property, self).save(*args, **kwargs)","out":"Djangoで \"One or Many \"リレーションシップをモデル化するには？"}
{"in":"str = \"WooHoo\"<tab><nl>str = str[:-len(str)\/2]","out":"文字列の長さを均等にするために、よりエレガントなソリューションが必要"}
{"in":"# -*- coding: utf-8 -*-","out":"PythonがUnicode文字を含むファイルを保存しない"}
{"in":"import urllib<nl><nl>print urllib.unquote(\"cmd%5Blogin_user%5D%5Busername%5D=dfdsfdsf&cmd%5Blogin_user%5D%5Bpassword%5D=dsfsdf\")","out":"クエリ文字列のエスケープを解除する方法"}
{"in":"#!\/usr\/bin\/env python<nl># -*- coding: utf-8 -*-<nl>from xml.dom.minidom import *<nl>xml = parse('1.xml')<nl>name = xml.getElementsByTagName('type_id')<nl>hashes = set()<nl>for node in name:<nl><tab> hashes.add(node.childNodes[0].data.encode('utf-8'))<nl><nl>print \"<nl>\".join(sorted(hashes))","out":"python 2 xml によるソートと重複の除去"}
{"in":"inverse_namelist = {v: k for k, v in namelist.items()}","out":"get()を使って辞書からキーを取り出す"}
{"in":"numpy.searchsorted","out":"numpyの配列を高速に検索する方法はありますか？"}
{"in":"self.EIG2D = numpy.vectorize(complex)(EIG2Dtmp[...,0], EIG2Dtmp[...,1])","out":"netcdf pythonで複雑な引数を渡すには？"}
{"in":"# Open a file<nl>fo = open(\"foo.txt\", \"a\") # safer than w mode<nl>fo.write( \"Python is a great language.<nl>Yeah its great!!<nl>\");<nl><nl># Close opend file<nl>fo.close()","out":"Pythonで既存のファイルを開いたり編集したりするには？"}
{"in":"ImagesUrl.objects(src=self.src).update_one(<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> upsert=True, <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> inc__counter=1, <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> set__src=self.src)","out":"Mongoengine - \"save new item or increment counter\" オペレーションを実行するには?"}
{"in":"inner_qs = table2.objects.all()<nl>results = table1.objects.exclude(field1__in=inner_qs)","out":"Djangoで別のテーブルにない値を選択する。"}
{"in":"mylist[:4] = szResult.split()","out":"Python 文字列リスト追加"}
{"in":"print n[-4::]","out":"numpyの配列からインデックスを抽出する python"}
{"in":"# cols to select<nl>c = rpy2.robjects.IntVector((1,3))<nl># selection from df<nl>mydf.rx(True, c)","out":"pythonでrpy2のRデータフレームからカラムを選択する方法は？"}
{"in":"from django.db.models import Count<nl>Games.objects.filter(owned=0).annotate(vote=Count('votes')).order_by('-vote')","out":"Django ORM テーブルリレーション"}
{"in":"def createtable(self):<nl><tab>  rows = self.tableName.rowCount()<nl><tab>  columns = self.tableName.columnCount()<nl><tab>  for i in range(rows):<nl><tab><tab><tab>for j in range(columns):<nl><tab><tab><tab><tab> item = self.cell(\"text\")<nl><tab><tab><tab><tab> # execute the line below to every item you need locked<nl><tab><tab><tab><tab> item.setFlags(QtCore.Qt.ItemIsEnabled)<nl><tab><tab><tab><tab> self.ui.tableName.setItem(i, j, item)","out":"QTableWidgetのセルを読み取り専用にするにはどうすればよいですか？"}
{"in":"import IPython.nbformat.current as nbf<nl>nb = nbf.read(open('test.py', 'r'), 'py')<nl>nbf.write(nb, open('test.ipynb', 'w'), 'ipynb')","out":".pyファイルのコマンドラインから.ipynbを作成する方法はあるのでしょうか？"}
{"in":"list.pop(0)","out":"whileループのBig-O"}
{"in":"x = info.split(';',2)[1]","out":"Pythonで特殊文字の間の文字列を見つけるには？"}
{"in":"#circle.circle_computation()<nl>if circle_create == True:<nl><tab> #circle_list[i].draw_circle()<nl><tab> for j in xrange(i):<nl><tab><tab>  circle_list[j].draw_circle()","out":"Pythonでループ下の反復リストの全要素にアクセスする"}
{"in":"ILLEGAL_NTFS_CHARS = \"[<>:\/\\\\|?*\\\"]|[\\0-\\31]\"<nl>def __removeIllegalChars(name):<nl><tab> # removes characters that are invalid for NTFS<nl><tab> return re.sub(ILLEGAL_NTFS_CHARS, \"\", name)","out":"Pythonでプラットフォーム非互換のフォルダ（ファイル）名をチェックする方法"}
{"in":"fh = open('my.txt','r').read()<nl>unique_chars = set(fh)<nl>len(unique_chars) #for the length.","out":"テキストファイルのユニークな文字をすべて取得する方法？ unix\/python"}
{"in":"ndf = merge(left=df1,right=df1,on=('c','d'),how='inner')<nl>out = ndf[(ndf.a_x == (-1)*ndf.a_y) & (ndf.b_x == (-1)*ndf.b_y)]","out":"Pandas DataFrameで、特定の列に同じ符号または反対の符号を持つ同一の値を持つ一致する行を見つけるにはどうしたらよいですか？"}
{"in":"try:<nl><tab> import locale<nl><tab> locale.setlocale(locale.LC_ALL, 'en_US.utf8')<nl>except Exception:<nl><tab> try:<nl><tab><tab>  locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')<nl><tab> except Exception as e:<nl><tab><tab>  messages.error(request, 'An error occurred: {0}'.format(e))","out":"Mac OS X で django がロケール設定をサポートしない。"}
{"in":"urlpatterns = patterns(\"myapp.views\",<nl><tab> url(r'^$', 'index',dict(template_name = 'myapp\/index.html'), name = 'home'),<nl><tab> url(r'^kick-ass-chart\/$', 'render_chart', name='myapp_render_chart'),<nl>)","out":"画像をレンダリングするためにdjangoでurlpatternを書く。"}
{"in":"dict((k, v.split(',')) for k,v in (x.split(':') for x in s.split('::')))","out":"文字列からint -> listのマップをパースする。"}
{"in":"s = sum(hours)*3600+sum(minutes)*60+sum(seconds)<nl>return '%d hours %d minutes %d seconds'%( s\/3600, (s%3600)\/60, s%60)","out":"リスタートタイム"}
{"in":"from A import settings as A_settings","out":"django で、同じフォルダにある別のプロジェクトからの設定変数にアクセスする方法"}
{"in":"import tkinter as tk<nl><nl>root = tk.Tk()<nl><nl>screen_width = root.winfo_screenwidth()<nl>screen_height = root.winfo_screenheight()","out":"Tkinterで画面サイズを取得する方法は？"}
{"in":"lower, upper = dictionary1[key]","out":"辞書のキーに格納されているリストにアクセスするにはどうすればよいですか？"}
{"in":"import wave<nl><nl>start_time = 5.43<nl>stop_time = 5.81<nl>time_period = stop_time - start_time<nl>wav = wave.open('test.wav')<nl>time_period_frames = time_period * wav.getnframes()","out":"を使えば、ある時間範囲内のフレーム数を取得できますか？"}
{"in":"def _total_resources(self, cr, uid, ids, field_name, arg, context):<nl><tab> res = {}<nl><tab> reqrd_bffr = 0<nl><tab> trng_bffr = 0<nl><tab> billable = 0<nl><tab> for id in ids:<nl><tab><tab>  res[id] = {<nl><tab><tab><tab><tab>'total_resources' : 0,<nl><tab><tab><tab><tab>'req_buffr':0,<nl><tab><tab><tab><tab>'trng_buffr': 0,<nl><tab><tab><tab><tab>'billable' : 0<nl><tab><tab>  }<nl><tab><tab>  list_resources = self.browse(cr,uid,ids[0]).resource_all_id<nl><tab><tab>  print\"list_resources\",list_resources<nl><tab><tab>  for status_chk in list_resources :<nl><tab><tab><tab><tab>status_resrc = status_chk.status_id.name<nl><tab><tab><tab><tab>if status_resrc == 'Required Buffer':<nl><tab><tab><tab><tab><tab> reqrd_bffr=reqrd_bffr + 1<nl><tab><tab><tab><tab>elif status_resrc == 'Training Buffer':<nl><tab><tab><tab><tab><tab> trng_bffr=trng_bffr + 1<nl><tab><tab><tab><tab>elif status_resrc == 'Billable':<nl><tab><tab><tab><tab><tab> billable=billable + 1<nl><tab><tab>  total = len(list_resources)<nl><tab><tab>  res[id] = {'total_resources' : total,'req_buffr':reqrd_bffr,'trng_buffr': trng_bffr, 'billable' : billable}<nl><tab> return res","out":"を引数として受け取り、辞書を作成します。"}
{"in":"values = {<nl><tab><tab>  'order_line_id': order.id,<nl><tab><tab>  'product_id': product.id,<nl>}<nl>if field == 0:<nl><tab> values['new_line'] = line.id","out":"辞書の亜種を作るときに冗長性を排除する方法"}
{"in":"def copy_function(row):<nl><tab> if row['col2']==1:<nl><tab><tab>  return row['col2'] <nl><tab> else: <nl><tab><tab>  return row['col1']<nl>df['col3'] = df.apply(copy_function, axis=1)","out":"数式で値を新しい列にコピーオーバーする"}
{"in":"interval = 2<nl>while True:<nl><tab> next_run = time.time() + interval<nl><tab> do_something()<nl><tab> delta = next_run - time.time()<nl><tab> if delta < 0:<nl><tab><tab>  skipped(delta\/-interval)<nl><tab> else:<nl><tab><tab>  time.sleep(delta)","out":"ループを正確にn秒ごとに実行させるPythonmodule"}
{"in":"user_input = raw_input(\"Please enter a word: \")<nl>ls = [\"a\", \"f\" , \"x\" , \"u\"]<nl>user_list = []<nl>inDict = True<nl><nl>for i in user_input:<nl><tab> if not(i in ls):<nl><tab><tab>  inDict = False<nl><tab><tab>  break<nl>if(inDict):<tab> <nl><tab> user_list.append(user_input)","out":"チェック後に文字列をリストに追加する"}
{"in":"x = np.concatenate((x, new_x))","out":"空のnumpy配列で連結する。"}
{"in":"for k, v in user_actions.iteritems():<nl><tab> print v['notes']","out":"Django は、ネストした辞書を持つ JSON リクエストをデシリアライズする。"}
{"in":"class ContactWizard(SessionWizardView):<nl><tab> template_name = \"invite.html\"<nl><nl><tab> def done(self, form_list, **kwargs):<nl><tab><tab>  form_data = process_form_data(form_list, self.request.user)<nl><nl><tab><tab>  return render_to_response('invitedone.html', {'form_data': form_data})","out":"Django: SessionWizardViewでユーザー名をリクエストするにはどうすればよいですか？"}
{"in":"def test_envconfig():<nl><tab>  import inspect<nl><tab>  for frame, filename, line_num, func, source_code, source_index in inspect.stack():<nl><tab><tab><tab>if 'tests\/unittests\/capital\/' in filename:<nl><tab><tab><tab><tab> print 'The Test env is activated for %s' % (filename)<nl><tab>  return \"user\"","out":"pythonでcallee内の呼び出し元の詳細を追跡する方法"}
{"in":"def contact_create(request):<nl><tab> if request.method == 'POST':<nl><tab><tab>  form = ContactForm(request.POST)<nl><tab><tab>  if form.is_valid():<nl><tab><tab><tab><tab>new_contact = form.save()<nl><tab><tab><tab><tab>return HttpResponseRedirect(reverse(contact_details, args=(new_contact.pk,)))<nl><tab> else:<nl><tab><tab>  form = ContactForm()","out":"Django で ModelForm を保存した後に主キーを取得する。"}
{"in":"import bpy, mathutils<nl><nl>plane = bpy.data.objects[\"Plane\"]<nl>previous = None<nl><nl>for poly in plane.data.polygons:<nl>  center = mathutils.Vector(poly.center)<nl>  if previous:<nl><tab> previous -= center<nl><tab> #print length and center<nl><tab> print(previous.length, center)<nl>  previous = center","out":"ナビゲーションメッシュの長さはどうすればいいのですか？"}
{"in":"import random<nl>import matplotlib.pyplot as plt<nl>import networkx as nx<nl>G=nx.Graph()<nl>G.add_edges_from([('a','b'),('b','d'),('c','e'),('b','e')])<nl>pos=nx.spring_layout(G)<nl>nodes=G.nodes()<nl>random.shuffle(nodes)<nl>blue=nodes.pop()<nl>nx.draw_networkx_nodes(G,pos,nodelist=[blue],node_color='b')<nl>nx.draw_networkx_nodes(G,pos,nodelist=nodes,node_color='r')<nl>nx.draw_networkx_edges(G,pos)<nl>plt.show()","out":"スプリングレイアウト時のノードの色を変更する+ networkx"}
{"in":"df[\"DATE\"].irow(0)","out":"csvファイルから曜日を計算する、csvファイルで1つのフィールドを選択する方法"}
{"in":"data_only=True","out":"Python - openpyxl 既存のxlsxに数式で書き込んだ後にxlsxデータを読み込む。"}
{"in":"column_name='last_login_date'","out":"Django のカスタムユーザーフィールドは AbstractBaseUser と衝突する。"}
{"in":"mylist = []<nl>for i in range(million):<nl><tab> mylist.append(something)<nl>mytup = tuple(mylist)","out":"Python : Pyscripterでの変数サイズの問題"}
{"in":"import itertools<nl>def update_dict(A, result): #update vaules to the same set<nl><tab> for k in A:<nl><tab><tab>  result[k] = result.get(k, {k}).union(set(A[k]))<nl><tab><tab>  tmp = None<nl><tab><tab>  for i in result[k]:<nl><tab><tab><tab><tab>tmp = result.get(k, {k}).union(result.get(i, {i}))<nl><tab><tab>  result[k] = tmp<nl><tab><tab>  for i in result[k]:<nl><tab><tab><tab><tab>result[i] = result.get(i, {i}).union(result.get(k, {k}))<nl><nl>A = {0:('b',), 1:('c',), 2:('c',), 3:('c',)}<nl>B = {'a':(3,), 'b':(0,), 'c':(1,2,3)}<nl>result = dict()<nl>update_dict(A, result)<nl>update_dict(B, result)<nl>update_dict(A, result) #update to fix bugs<nl>update_dict(B, result)<nl><nl>k = sorted([sorted(list(v)) for v in result.values()]) <nl>k = list( k for k, _ in itertools.groupby(k))  #sort and remove dumplicated set<nl><nl>final_result = dict()<nl>for v in k: #merge the result as expected<nl><tab> final_result.update({tuple([i for i in v if isinstance(i, int)]):tuple([i for i in v if not isinstance(i, int)])})<nl>print final_result<nl><nl>#output<nl>{(0,): ('b',), (1, 2, 3): ('a', 'c')}","out":"集合の python 辞書をマージする"}
{"in":"class A(object):<nl><nl>  def __init__(self):<nl><tab> self.logger = logging.LoggerAdapter(log, {'session_id': random(1024)})<nl><nl>  def process(self):<nl><tab> self.logger.info('hello')","out":"Python Logger Filterに変数を注入することは可能ですか？"}
{"in":"command = re.search(\"(\" + re.escape(MyDir) + \")\", body).group(1)","out":"変数 regex python"}
{"in":"pk = open( 'file.txt', 'r' ).readlines() #or 'rb' if there's a need<nl><nl>if len(pk) > 2:<nl><tab> for line in pk[1:-1]:<nl><tab><tab>  print line,<nl><tab><tab>  #or do anything you like to do with line","out":"pythonでファイルから必要な内容を抽出する方法は？"}
{"in":"dict1 = {'imp_local'+str(k):700 for k,val in enumerate(nBottom)}<nl>dict2 = {'imp_global'+str(k):600 for k,val in enumerate(nBottom)}","out":"ループ内で生成された変数を呼び出す方法"}
{"in":"runcall(main, self.argv)","out":"Python-Hotshot 簡単なプログラムをプロファイリングしようとするとエラーが出る"}
{"in":"driver.find_element_by_xpath('\/\/div[contains(@class,\"ui-dialog\") and @aria-describedby=\"dialogContent2\"]\/\/button[@title=\"Close\"]').click()","out":"Seleniumで汎用ポップアップを閉じる"}
{"in":"here = pickle.load(open(\"1965.pkl\", 'rb'))","out":"EOFError Pickled Fileのオープン\/リードエラー。"}
{"in":"print (int(hexlify(corr),16))&0x01","out":"Pythonでビットマスクを適用する"}
{"in":"for i in clslist:<nl><tab> if i.str1 == A and i.str2 == B:<nl><tab><tab>  i.strlist.append(whatever)","out":"pythonでsearchでタプルのリストに追加する。"}
{"in":"print 'Word is',<tab>  #Notice the trailing comma. This will not print a newline char<nl>faultyPrint()","out":"Pythonで返さない関数からの印刷"}
{"in":"from cPickle import dumps<nl>from cookielib import CookieJar<nl>import threading<nl><nl>class MyCookieJar(CookieJar):<nl><tab> def __getstate__(self):<nl><tab><tab>  state = self.__dict__.copy()<nl><tab><tab>  del state['_cookies_lock']<nl><tab><tab>  return state<nl><nl><tab> def __setstate__(self, state):<nl><tab><tab>  self.__dict__ = state<nl><tab><tab>  self._cookies_lock = threading.RLock()<nl><nl>class Person(object):<nl><tab> def __init__(self, name):<nl><tab><tab>  self.name = name<nl><tab><tab>  self.cookies = MyCookieJar()<nl><nl>bob = Person(\"bob\")<nl>print dumps(bob)","out":"CookieJarを漬けるには？"}
{"in":"os.system(\"7z x install.zip subfolder -y -r -oc:\\\\\\\"Program Files (x86)\\\\\\\"Calibre2\")","out":"特定のサブフォルダのみを抽出する 7zip"}
{"in":"runner = unittest.TextTestRunner(verbosity=2)","out":"各単位テストの直後に結果を印刷する"}
{"in":"import requests<nl>r = requests.get(\"http:\/\/localhost:5000\")  <nl># a flask application there sets two cookies 'first' and 'second'<nl><nl>r.cookies.keys()<nl># returns ['first', 'second']<nl><nl>r.headers['Set-Cookie']<nl># returns 'first=4; Path=\/, second=42; Path=\/'","out":"python web-client multipile set-cookie header, get raw set-cookie header."}
{"in":"basename = os.path.basename(file)<nl>if ext in (\".txt\", \".htm\", \".html\"):<nl><tab> ftp.storlines(\"STOR \" + basename, open(file))<nl>else:<nl><tab> ftp.storbinary(\"STOR \" + basename, open(file, \"rb\"), 1024)","out":"ftplibでアップロードしようとすると、うまく接続できるのですが、どこかのタイミングで何か失敗しているようです。"}
{"in":"levels = np.logspace(0,np.log10(Z.max()), 100 )[30:80]<nl>levels_black = [level for i,level in enumerate(levels) if (i+5) % 10 != 0]<nl>levels_red =  [level for i,level in enumerate(levels) if (i+5) % 10 == 0]<nl><nl>CS2_black = pyplot.contour(X,Y,Z,locator=ticker.LogLocator(), colors='k', levels=levels_black, lw=2,norm=colors.LogNorm(),vmin=1,vmax =Z.max())<nl>CS2_red = pyplot.contour(X,Y,Z,locator=ticker.LogLocator(), colors='r', levels=levels_red, lw=2,norm=colors.LogNorm(),vmin=1,vmax =Z.max())<nl><nl>cbar.add_lines(CS2_red)","out":"コンタープロットの特定の線をカラーバーに追加する。"}
{"in":"from google.appengine.ext.remote_api import remote_api_stub<nl><nl>def auth_func():<nl><tab>return ('your_username', 'your_password')<nl><nl>remote_api_stub.ConfigureRemoteApi(None, '\/_ah\/remote_api', auth_func, 'your-app-id.appspot.com')","out":"本番のApp Engineアプリからローカルの開発アプリにライブデータを取得するにはどうすればよいですか？"}
{"in":"numpy.matrix","out":"CのAPIでNumPyの行列を作成する方法はありますか？"}
{"in":"from Tkinter import *<nl>import sys<nl>master = Tk()<tab> <nl>def callback():<nl><tab> master.destroy()<nl><tab> sys.exit()<tab> <nl>b = Button(master, text=\"Click to close\", command=callback)<nl>b.pack()<tab> <nl>mainloop()","out":"Mac用スタンドアロンPyサーバーアプリケーションの作成"}
{"in":"raw = open(filename).read()<nl>docs = []<nl>for raw_doc in raw.split('---'):<nl><tab> try:<nl><tab><tab>  docs.append(yaml.load(raw_doc))<nl><tab> except SyntaxError:<nl><tab><tab>  docs.append(raw_doc)","out":"PyYAMLでyamlに生の文字列としてドキュメントを読み込む"}
{"in":"from bs4 import BeautifulSoup<nl><nl>txt = \"\"\"<div name=\"div1\"><nl><tab><tab>  <li>Test 1<\/li><nl><tab><tab>  <li>Test 2<\/li><nl><tab><tab>  <\/div>\"\"\"<nl><nl>def clone(soup, tag):<nl><tab>newtag = soup.new_tag(tag.name)<nl><tab>for attr in tag.attrs:<nl><tab><tab>newtag[attr] = tag[attr]<nl><tab>return newtag<nl><nl>soup = BeautifulSoup(txt)<nl>tags = soup.find_all(\"li\")<nl>for tag in tags:<nl><tab>print tag.wrap(clone(soup, tag.parent))","out":"PythonでBeautifulSoupを使って、要素とその親をONLYで取得する。"}
{"in":"from glob import glob<nl><nl>with open('C:\/test\/out_file\/out_file.txt', 'w') as out_file:<nl><tab> out_file.write('<nl>'.join(glob('C:\/test\/*.txt')))","out":"pythonでファイルの一覧を取得する"}
{"in":"import os<nl>import sys<nl><nl>sys.path.append('\/home\/ubuntu\/web\/lightea.com\/elderlytracking\/django_test')<nl>os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django_test.settings\") # here django_test is a directory within django_test project <nl><nl>from django.core.wsgi import get_wsgi_application<nl>application = get_wsgi_application()","out":"uwsgi エラー ：DEBUGの設定を要求されたが、設定はされていない"}
{"in":"from csv import reader<nl>nan_counts = {}<nl>with open('\/path\/to\/file') as file:<nl><tab> file_reader = reader(file)<nl><tab> next(file_reader)  # Skip the first row of headers<nl><tab> for row in file_reader:<nl><tab><tab>  year, data = row[1], row[4:]<nl><tab><tab>  nan_counts[year] = data.count('NaN') + nan_counts.get(year, 0)","out":"2つの独立したユニークな列をもとに、NaNの数を計算する"}
{"in":"start = 0<nl>calculated_mean = float('inf')<nl>while calculated_mean > set_mean:<nl><tab> energies = []<nl><tab> for i in range(start, start + 1000): <nl><tab><tab>  system = moves.move(system, 50, true)<nl><tab><tab>  energy = system.energies()<nl><tab><tab>  energies.append(energy)<nl><tab><tab>  print(\"%d: %s\" % (i, energy))<nl><tab> calculated_mean = sum(energies[-10:]) \/ 10","out":"Pythonでループデータ、反復計算、統計計算を行う。"}
{"in":"c = round(((a + b) - abs(a - b)) \/ 2)","out":"Pythonでループや分岐を使わずに2つの数値を比較する"}
{"in":"plt.figure()<nl><nl>CS = plt.contour(X, Y,log_mu,levels = [-7,-8],<nl><tab><tab><tab><tab><tab>  colors=('k',),linestyles=('-',),linewidths=(2,))<nl>CSF = plt.contourf(X, Y,log_mu)<nl>plt.clabel(CS, fmt = '%2.1d', colors = 'k', fontsize=14) #contour line labels<nl>CB = plt.colorbar(CSF, shrink=0.8, extend='both')<nl><nl>plt.xscale('log')<nl>plt.yscale('log')<nl><nl>plt.show()","out":"matplotlibの等高線地図に特定のレベルをマークする。"}
{"in":"kwargs = {\"childWrapper\": {\"inputFIeld\": \"Example2\"}}<nl>form = ParentForm(**kwargs)","out":"Flask-wtfです：フィールドの初期値を設定するためにkwargを使う"}
{"in":"profile = list(profile)","out":"リスト内のモデルオブジェクトのフィールドの値を変更することができない"}
{"in":"ip=\"192.168.1.1\"<nl>for line in csv_file:<nl><tab> if ip in line:<nl><tab><tab>  found = True<nl><tab><tab>  break","out":"PythonでCSVファイルに既にデータが存在するかどうかを確認する方法"}
{"in":"def get_values(self, env):<nl><tab> class ValUsers(models.Model):<nl><tab><tab>  name = models.TextField(max_length=64)<nl><tab><tab>  value = models.TextField(max_length=2048)<nl><tab> ret = EnvUsers.objects.raw(<nl><tab><tab>  'SELECT a.id, a.name, v.value '<nl><tab><tab>  ' FROM Authorization a, Value v ' <nl><tab><tab>  ' WHERE a.user_root = v.parent '<nl><tab><tab>  '<tab><tab>and a.active = %s '<nl><tab><tab>  '<tab><tab>and v.active = %s '<nl><tab><tab>  '<tab><tab>and v.name = %s ',<nl><tab><tab>  [True, True, env]<nl><tab> )<nl><nl><tab> return {u.name: u.value for u in ret}","out":"DjangoでForeignKeyを使わずにモデルをスパンさせる"}
{"in":"def _example_id_default():<nl><tab> return HMAC(\"{}\".format(urandom(32).encode('base_64'))).hexdigest()<nl><nl>class ExampleMixin(object):<nl><tab> \"\"\"Mixin for `AnExample`\"\"\"<nl><nl><tab> example_id = Column(String(255), default=_example_id_default)","out":"デフォルト値でsqlalchemyのミキシンを使ったスーパー"}
{"in":"import csv<nl>with open(\"data.csv\", \"wb\") as f:<nl><tab> csv.writer(f).writerows((k,) + v for k, v in maxDict.iteritems())","out":"Pythonです：タプルの値の辞書をcsvファイルに書き込むには？"}
{"in":"FILTER_SOURCE_FILES = YES<nl>INPUT_FILTER = \"python path\/to\/doxypy.py\"","out":"Pythonスクリプトの1行目をdoxygenに無視させる方法とは？"}
{"in":"from Tkinter import *<nl>import sys<nl><nl>def write():<nl><tab> new_player = e1_var.get() + \" \" + e2_var.get()<nl><tab> with open('stats', 'a') as file:<nl><tab><tab>  file.write(\"<nl>\" + new_player + \"<nl>\")<nl><nl><tab> players[new_player] = Label(text=new_player).grid(column=0)<nl><tab> e1_var.set(\"\")<nl><tab> e2_var.set(\"\")<nl><nl>root=Tk()<nl>root.title(\"Basketball Stats\")<nl>l1=Label(text=\"Player\").grid(column=0, row=0)<nl>l2=Label(text=\"Number\").grid(column=0, row=1)<nl><nl>e1_var = StringVar()<nl>e1 = Entry(textvariable=e1_var).grid(column=1, row=0)<nl><nl>e2_var = StringVar()<nl>e2 = Entry(textvariable=e2_var).grid(column=1, row=1)<nl><nl>b1=Button(text=\"Submit\", command=write).grid(column=1, row=3)<nl><nl>players = {}<nl>with open(\"stats\", \"r\") as file:<nl><tab> for line in file.read().split('<nl>'):<nl><tab><tab>  players[line] = Label(text=line).grid(column=0)<nl><nl>root.mainloop()","out":"Tkinterのラベルを更新する方法は？"}
{"in":"import matplotlib.transforms as transforms<nl><nl>fig = plt.figure()<nl>ax = fig.add_subplot(111)<nl><nl>trans = transforms.blended_transform_factory(<nl><tab> ax.transData, ax.transAxes)<nl><nl>ax.plot(range(50))<nl>ax.axvline(20)<nl><nl>ax.text(20, 0.05, 'test', transform=trans, rotation='vertical', ha='right')","out":"Matplotlib - 軸の下に整列したラベルを追加する"}
{"in":"for line in fname:<nl><tab> line = re.sub('[\\(\\)\\{\\}\\'\\'\\,<>]','', line)<nl><tab> line = re.sub(r\"(\\.\\d)\\d*_?\\d*\", r\"\\1\", line, 1)<nl><tab> fields = line.rstrip(\"<nl>\").split()<nl><tab> outfile.write('%s  %s  %s  %s  %s  %s<nl>' % (fields[0],fields[1],fields[2],fields[3],fields[4],(fields[5])))","out":"行の1列目からピリオド以降の2桁目とそれ以外の数字を削除するにはどうすればよいですか？"}
{"in":"filtered_clue = filter(lambda x: len(x['number']), clue)","out":"リスト内のdictから空集合を取り除く (python 2.7)"}
{"in":"import pytz<nl>import datetime<nl><nl>fecha_actual_Madrid = pytz.timezone('Europe\/Madrid')<tab> <nl>logging.info('time is %s', datetime.datetime.now(fecha_actual_Madrid ))","out":"Google Cloud SQL [GAE + Python]でDatetimeを利用する。"}
{"in":"import contextlib<nl>@contextlib.contextmanager<nl>def argv_tmp():<nl><tab> tmp = sys.argv<nl><tab> sys.argv = []<nl><tab> try:<nl><tab><tab>  yield<nl><tab> finally:<nl><tab><tab>  sys.argv = tmp<nl><nl>with argv_tmp():<nl><tab> from ROOT import *","out":"関数が変数の値を返すことなく、その変数の値を設定するにはどうすればよいですか？"}
{"in":"def slicedict(d, s):<nl><tab> return {k:v for k,v in d.iteritems() if k.startswith(s)}","out":"特定の文字列で始まるキーで辞書をスライスする。"}
{"in":"import argparse<nl><nl>def do_things(args):<nl><tab> print args<nl><tab> # Do your stuff<nl><nl>mainparser = argparse.ArgumentParser()<nl>submainadder = mainparser.add_subparsers(title='subcommands')<nl>parser_ut = submainadder.add_parser('unittest')<nl>parser_ut.set_defaults(func=do_things)<nl><nl>if __name__ == \"__main__\":<nl><tab> stuff = mainparser.parse_args()<nl><tab> stuff.func(stuff)","out":"特定のサブパーサーを確認するにはどうすればよいですか？"}
{"in":"class MyHandler(tornado.web.RequestHandler):<nl><tab> @tornado.web.asynchronous<nl><tab> def get(self):<nl><tab><tab>  self._pcb = tornado.ioloop.PeriodicCallback(self._cb, 1000)<nl><tab><tab>  self._pcb.start()<nl><nl><tab> def _cb(self):<nl><tab><tab>  self.write('Kapooya, Kapooya!')<nl><tab><tab>  self.flush()<nl><nl><tab> def on_connection_close(self):<nl><tab><tab>  self._pcb.stop()","out":"数秒に一度、ある変数をクライアントに返すには？"}
{"in":"import numpy<nl><nl>def rgba_unpremultiply(data):<nl><tab> a = numpy.fromstring(data, 'B') # Treat the string as an array of bytes<nl><tab> a = a.astype('I') # Cast array of bytes to array of uints, since temporary values needs to be larger than byte<nl><tab> alpha = a[3::4] # Every 4th element starting from index 3<nl><tab> alpha = numpy.where(alpha == 0, 255, alpha) # Don't modify colors where alpha is 0<nl><tab> a[0::4] = a[0::4] * 255 \/\/ alpha # Operates on entire slices of the array instead of looping over each element<nl><tab> a[1::4] = a[1::4] * 255 \/\/ alpha<nl><tab> a[2::4] = a[2::4] * 255 \/\/ alpha<nl><tab> return a.astype('B').tostring() # Cast back to bytes","out":"pythonを使ってRGBAデータを効率よく処理する？"}
{"in":"setup(console=[{'script':\"process.py\",'uac_info': \"requireAdministrator\"}])","out":"Python - Windows 8でAccess deniedエラーが発生する。"}
{"in":"from sqlalchemy import event<nl>@event.listens_for(Person.home_addresses, 'append')<nl>def receive_append(target, value, initiator):<nl><tab> # set the address type to home<nl><tab> value.type = 'home'<nl><tab> return value","out":"SQLAlchemyの宣言型モデルでプロパティを自動設定する。"}
{"in":"L = ['Chris Terman', 'Tom Brady', 'Eric Grimson', 'Gisele Bundchen']<nl><nl>print sorted(L,key=lambda x:x.split()[-1]) # sorted by last name<nl>['Tom Brady', 'Gisele Bundchen', 'Eric Grimson', 'Chris Terman']<nl><nl>print sorted(L)# sorted first name<nl>['Chris Terman', 'Eric Grimson', 'Gisele Bundchen', 'Tom Brady']","out":"pythonで名前のリストをソートする"}
{"in":"for i, word in enumerate(z):<nl><tab> if \"-\" not in word:<nl><tab><tab>  if word in d.keys():<nl><tab><tab><tab><tab>z[i] = str(d[word])<nl><tab><tab>  else:<nl><tab><tab><tab><tab>count = count + 1<nl><tab><tab><tab><tab>d[word] = count<nl><tab><tab><tab><tab>z[i] = str(count)","out":"python : 文字列中の単語を置換する"}
{"in":"p.drawString(10, 800, \"Name\")<nl>p.drawString(10, 790, \"Address\")<nl>p.drawString(10, 780, \"School\")","out":"reportlabでpdfを生成する"}
{"in":"df['bins'] = df.groupby(df.hours).density.transform(func)","out":"グループ化された pandas データフレームで計算された値の結合またはマージ"}
{"in":"class MYREALM_securepage(webapp.RequestHandler):<nl>  def get(self):<nl><tab><tab>if not 'Authorization' in self.request.headers:<nl><tab><tab><tab> self.response.headers['WWW-Authenticate'] = 'Basic realm=\"MYREALM\"'<nl><tab><tab><tab> self.response.set_status(401)<nl><tab><tab><tab> self.response.out.write(\"Authorization required\")<nl><tab><tab>else:<nl><tab><tab><tab> auth = self.request.headers['Authorization']<nl><tab><tab><tab> (username, password) = base64.b64decode(auth.split(' ')[1]).split(':')<nl><tab><tab><tab> # Check the username and password, and proceed ...","out":"Python\/WebApp Google App Engine - ヘッダー内のuser\/passをテストする。"}
{"in":"def depth(t):<nl><tab> try:<nl><tab><tab>  return 1+max(map(depth,t))<nl><tab> except:<nl><tab><tab>  return 0<nl><nl>t = (4, (3, 5, (2, 4, 6, (1, 3, 5, 7))))<nl>print(depth(t)) # 4<nl>t = tuple(tuple(range(k)) for k in range(1,200))<nl>print(depth(t)) # 2","out":"Pythonで、ネストされたタプルのネストレベルを決定する簡単な方法"}
{"in":"import json<nl><nl>f = open('data\/convertcsv.json');<nl><nl>data = json.loads(f.read())<nl><nl>f.close()<nl><nl>for row in data:<nl><tab><tab>  print row['sentiment']","out":"pythonでjsonファイルからデータを読み込む正しい方法"}
{"in":"G={'E': 18.0, 'D': 17.0, 'C': 19.0, 'B': 15.0, 'A': 0}<nl><nl><nl>count = 0<nl>_sum = 0<nl>for key in G:<nl><tab> count += 1<nl><tab> _sum += G[key]<nl><nl>print('this is the mean: ', _sum\/count)","out":"辞書に登録されている値の平均を求める"}
{"in":"AA[1,2]='K'","out":"Python: 配列の形状を変えずに、配列の要素を置き換える。"}
{"in":"with open('ProjectEuler11Data.txt') as numbers:<nl><tab> data = numbers.readlines()<nl>lines = [line.split() for line in data]","out":"Pythonでループを使ったリストの作成"}
{"in":"values = range(10)<nl>random.shuffle(values)<nl><nl>def get_value():<nl><tab> return values.pop()","out":"pythonで、リストの一部の数字を除いた範囲にランダムな整数を生成する方法は？"}
{"in":"from selenium import webdriver<nl>driver = webdriver.Firefox()<nl>driver.get('http:\/\/example.com')<nl>element = driver.find_element_by_class_name(\"yourClassName\") #or find by text or etc<nl>element.click()","out":"Pythonによる動的ウェブページのスクレイピング方法"}
{"in":"l = ['03:18:45.2345', '03:19:23']<nl>for item in l:<nl><tab> time_format = \"%H:%M:%S.%f\" if '.' in item else \"%H:%M:%S\"<nl><tab> print datetime.datetime.strptime(item, time_format)","out":"文字列からdatetimeへ、ミリ秒の有無は問いません。"}
{"in":"second_longest = sorted(sentence.split(), key=len)[-2]","out":"Pythonで、文中の2番目に長い単語を見つける方法はありますか？"}
{"in":"all_res = sorted(list(fq) + list(sq), key = lambda x: (x[-1], x[0]))","out":"Pythonで2つのリストをマージする - ただしマージ時にソートする"}
{"in":"overlapped = plot(xdata[-2:-1],ydata[-2:-1],'-',lw=4.5)<nl><nl>for item in overlapped:<nl><tab> item.set_solid_capstyle('butt')","out":"matplotlibによる正確な線端処理"}
{"in":"from matplotlib import pyplot as plt<nl>import numpy as np<nl>randn = np.random.randn<nl>from pandas import *<nl><nl>idx = Index(arange(1,11))<nl>df = DataFrame(randn(10, 5), index=idx, columns=['A', 'B', 'C', 'D', 'E'])<nl>vals = np.around(df.values,2)<nl>normal = plt.normalize(vals.min()-1, vals.max()+1)<nl><nl>fig = plt.figure(figsize=(15,8))<nl>ax = fig.add_subplot(111, frameon=True, xticks=[], yticks=[])<nl><nl>the_table=plt.table(cellText=vals, rowLabels=df.index, colLabels=df.columns, <nl><tab><tab><tab><tab><tab><tab>  colWidths = [0.03]*vals.shape[1], loc='center', <nl><tab><tab><tab><tab><tab><tab>  cellColours=plt.cm.hot(normal(vals)))","out":"matplotlib: テーブルセルの背景色にカラーマップを使用する。"}
{"in":"def __eq__(self, value):<nl><tab> return self.value == value<nl><nl>def __len__(self):<nl><tab> return len(self.value)","out":"Django の models.CharField から choices を継承するとエラーになる。"}
{"in":"from mpl_toolkits.axes_grid1 import make_axes_locatable <nl><nl>ax1 = plt.subplot2grid((1,1), (0,0))<nl>divider = make_axes_locatable(ax1) <nl>ax2 = divider.append_axes(\"bottom\", size=\"100%\", pad=0.5)<nl>ax3 = divider.append_axes(\"bottom\", size=\"100%\", pad=1)","out":"matplotlibで2つのサブプロット間の距離だけを調整する"}
{"in":"def take(dictionary, key):<nl><tab> return {key: dictionary[key]}<nl><nl>R = take(D, k)","out":"pythonの辞書から1つの要素を切り出す"}
{"in":"import pandas as pd<nl>data_xls = pd.read_excel('export.csv', 'Sheet1', index_col=None)<nl>data_xls.to_csv('exceltocsv.csv', encoding='utf-8')","out":"ファイルを開いてcsvとして保存する方法"}
{"in":"query = \"SELECT COUNT(*) from `%s`\" %table<nl>cursor.execute(query)<tab><tab><tab><tab> #execute query separately<nl>res = cursor.fetchone()<nl>total_rows = res[0]<tab><tab>#total rows","out":"Python\/MySQL- 行数のカウントに %s を適切に使用する方法"}
{"in":"from shapely.geometry import box, Polygon<nl><nl>for pixel in pixels:<nl><tab> # say the pixel has llx, lly, urx, ury values.<nl><tab> pixel_shape = box(llx, lly, urx, ury)<nl><nl><tab> for polygon in approximately_overlapping:<nl><tab><tab>  # say the polygon has a ``value`` and a 2-D array of coordinates <nl><tab><tab>  # [[x0,y0],...] named ``xy``.<nl><tab><tab>  polygon_shape = Polygon(xy)<nl><tab><tab>  pixel_value += polygon_shape.intersection(pixel_shape).area * value","out":"データビニング：不規則なポリゴンから規則的なメッシュへ"}
{"in":"if json.encoder.ESCAPE_DCT.get('\/') != '\/':<nl><tab> json.encoder.ESCAPE_DCT['\/'] = '\/'","out":"Google App Engine Python simplejsonのエスケープ？"}
{"in":"approved_rides = [ride for ride in initial_rides if any(<nl><tab><tab><tab> (lat_min < step.latitude< lat_max and \\<nl><tab><tab><tab>  lng_min< step.longitude< lng_max) for step in ride.route.steps.all())]","out":"map()演算、リスト、フロート、およびいくつかの検証を使用した地理アルゴリズムの最適化について教えてください。"}
{"in":"mydict = dict((key, {}) for key in keylist)","out":"辞書の辞書値に値を設定する"}
{"in":"peaks_np = array([s.max() for s in segments])","out":"numpy配列のサブ配列の長さを正規化し、計算を行う"}
{"in":"from mpl_toolkits.mplot3d import Axes3D<nl>from mpl_toolkits.mplot3d.art3d import Poly3DCollection<nl>import matplotlib.pyplot as plt<nl>fig = plt.figure()<nl>ax = Axes3D(fig)<nl>x = [0,1,1,0]<nl>y = [0,0,1,1]<nl>z = [0,1,0,1]<nl>verts = [zip(x, y,z)]<nl>ax.add_collection3d(Poly3DCollection(verts))<nl>plt.show()","out":"python-matplotlibで3Dポリゴンをプロットする。"}
{"in":"import re<nl><nl>s = \"5+5.[)]1\"<nl>s = re.search(\"\\d+\\+\\d+\", s).group()<nl>print(s) # 5+5","out":"パイソンストリングトリミング"}
{"in":"values = {'what': 'surreal', 'punctuation': 'is'}<nl>template=\" Hello, {what} world {punctuation} One of Python least-used functions is \"<nl>t = template.format(**values)<nl>print(t)<nl># Hello, surreal world is One of Python least-used functions is","out":"PythonでMAPの値を文字列テンプレートに代入する方法"}
{"in":"with open('rooms') as f:<nl><tab> chunks = f.read().split('<nl><nl>')<nl><nl>people_by_id = {}<nl><nl>for chunk in chunks:<nl><tab> data = dict(row.split('=', 1) for row in chunk.split('<nl>'))<nl><tab> people_by_id[data['id']] = data<nl><tab> del data['id']<nl><nl>def get_person_by_id(id):<nl><tab> return people_by_id.get(id)","out":"Pythonでファイル内の行を検索して次の数行を読み込む"}
{"in":"form.getvalue('toggle-event')","out":"トグル・ローの状態がpython cgiに送信されない。"}
{"in":"with open('\/tmp\/test.tsv') as infile, open('\/tmp\/test2.tsv', 'w') as outfile:<nl><tab> for line in infile:<nl><tab><tab>  tsplit = line.split(\"\\t\")<nl><tab><tab>  firstcolumns = tsplit[:-1]<nl><tab><tab>  lastitems = tsplit[-1].strip().split(\";\")<nl><tab><tab>  for item in lastitems:<nl><tab><tab><tab><tab>allcolumns = firstcolumns + item.split(\"=\")<nl><tab><tab><tab><tab>outfile.write(\"\\t\".join(allcolumns) + \"<nl>\")","out":"tsvファイルからデータを抽出する python"}
{"in":"from collections import defaultdict<nl>import json<nl><nl>d = defaultdict(dict)<nl>for date in dates:<nl><tab> d[date.year][date.month] = info_for_date(date)<nl>json.dumps(d)","out":"PythonでJSON形式にシリアライズされるデータ構造を作成するにはどうすればよいですか？"}
{"in":"view.setRootIndex(model.index(\"C:\\Myfolder\"))","out":"Python PyQt QFileSystemModel ルートパス"}
{"in":"fig = plt.figure()<nl>ax = fig.add_axes()<nl>ax.invert_xaxis()","out":"Pythonでx軸を反転させたloglogプロット"}
{"in":"random.shuffle()","out":"Pythonです：単語リストでスクランブルされた単語を見つける方法"}
{"in":"def GetSelectedNodes(self,*args):<nl><tab> cal = cmds.checkBox(self.xAxis,q = True, v = True)<nl><tab> print cal","out":"Maya python print state of checkbox?"}
{"in":"import sys<nl><nl>def foobar():<nl><tab> print sys._getframe().f_code.co_name","out":"Pythonにおける__func__（C言語のもの）に相当するもの。"}
{"in":"self.root.grid_columnconfigure(0, weight=1)<nl>self.root.grid_rowconfigure(0, weight=1)<nl>self.contentFrame.grid_columnconfigure(0, weight=1)<nl>self.contentFrame.grid_rowconfigure(0, weight=1)<nl>self.topBar.grid_columnconfigure(0, weight=1)<nl>self.topBar.grid_rowconfigure(0, weight=1)","out":"tkinterウィジェットをスティッキーフレームでセンタリングする方法"}
{"in":"print(\"%s %s\" % (hello, myvar))","out":"Pythonの%演算子に関する問題点"}
{"in":"class Comment(db.Model):<nl><tab> series = db.ReferenceProperty(reference_class=Series);<nl><nl><tab> def series_id(self):<nl><tab><tab>  return Comment.series.get_value_for_datastore(self)","out":"データベースをヒットさせずにdb.ReferencePropertyのキー値を取得するにはどうすればよいですか？"}
{"in":"from pymongo import MongoClient<nl># Assuming youre running mongod on 'localhost' with port 27017<nl>c = MongoClient('localhost',27017)<nl>c.database_names()","out":"pymongoから \"show dbs \"を発行する方法"}
{"in":"from rpy2.robjects.packages import importr<nl><nl>MASS = importr('MASS')<nl><nl># the function is now at MASS.fitdistr","out":"rpy2におけるfitdistr"}
{"in":"myList = ['a','b','c']<nl>myStr = 'z'<nl>res = [[myStr, x] for x in myList]","out":"Python: リスト内のすべての要素と単一の要素をペアリングする。"}
{"in":"class myBool():<nl><tab> def __init__(self, val):<nl><tab><tab>  self.value = val<nl><nl><tab> def __repr__(self):<nl><tab><tab>  return self.value<nl><nl><tab> def __invert__(self):<nl><tab><tab>  if self.value == 'A':<nl><tab><tab><tab><tab>return 'B'<nl><tab><tab>  else:<nl><tab><tab><tab><tab>return 'A'<nl><nl>def main():<nl><tab> a = myBool('A')<nl><tab> print(a)<nl><tab> print(~a)<nl><nl>if __name__ == '__main__':<nl><tab> main()","out":"Pythonでboolean変数をモデル化する"}
{"in":"doc.Tables(1).Rows(1).Delete()","out":"Python - win32comを使用してMicrosoft Wordでテーブルコンテンツを編集することができません。"}
{"in":"from PIL import Image<nl>from PIL import ImageChops<nl><nl>a = Image.open(\"pict1.jpg\")<nl>b = Image.open(\"pict2.jpg\")<nl>diff = ImageChops.difference (a, b)<nl>RED = ('red')<nl>RL = Image.new('RGB', diff.size, RED) # Make a red layer the same size<nl>RedDiff = ImageChops.multiply(RL, diff)<nl>Result = ImageChops.blend(RedDiff, b, 0.7)<nl>Result.show()","out":"2枚の写真の間にある赤い色の差分"}
{"in":"class TourAdmin(admin.ModelAdmin):<nl><tab>def queryset(self, request):<nl><tab><tab>qs = super(TourAdmin, self).queryset(request)<nl><tab><tab>if request.user.is_superuser:<nl><tab><tab><tab><tab>return qs<nl><tab><tab>return qs.filter(ActionUserCode=request.user)<nl>admin.site.register(Tour,TourAdmin)","out":"Django の admin の changelist をフィルタリングして、ログインしているユーザに基づいて特定の行を表示する。"}
{"in":"super(SyncableMixin, self).save(*args, **kwargs)","out":"Django モデル：mixinクラスを使って、djangoのモデルをオーバーライドする方法。"}
{"in":"result = serve_fileobj(RETURN_FILE,disposition='attachment',<nl><tab><tab><tab><tab><tab><tab><tab><tab> content_type='.txt',name=filename)<nl>os.unlink(filename)<nl>return result","out":"cherrypyでファイルを配信し、サーバーからファイルを削除する方法は？"}
{"in":"def delete_everything(self):<nl><tab> Reporter.objects.all().delete()<nl><nl>def drop_table(self):<nl><tab> cursor = connection.cursor()<nl><tab> table_name = self.model._meta.db_table<nl><tab> sql = \"DROP TABLE %s;\" % (table_name, )<nl><tab> cursor.execute(sql)","out":"djangoを使用してテーブルのデータをすべて削除する方法"}
{"in":"(mE, a)","out":"Scipy - 関数の入力値が変化したときのみ、関数の一部を実行する。"}
{"in":"cmap = matplotlib.colors.ListedColormap(['green', 'blue', 'red'])<nl>bounds=[0,125,200,400]<nl>cax = inset_axes(ax3, width=\"8%\", height='70%', loc=4)<nl>cbar = matplotlib.colorbar.ColorbarBase(cax, cmap=cmap, boundaries=bounds)<nl>cax.yaxis.set_ticks_position('left')<nl>cbar.ax.set_yticklabels(['0', '125', '200', '200+'])<nl>cax.yaxis.set_label_position('left')<nl>cbar.set_label('Income (,000s)')","out":"散布図に Matplotlib のカスタム ColorBar を使用する。"}
{"in":"metric=\"precomputed\"","out":"PythonでDBSCAN：予期せぬ結果"}
{"in":"pd.to_datetime(data['Deadline Time'], coerce=True)","out":"Python pandasでゼロのdatetimeをどう扱うか？"}
{"in":"def adminhome():<nl><tab> row1 =''<nl><tab> try:<nl><tab><tab>  db = connect_db()<nl><tab><tab>  rows=g.db.query(\"SELECT * FROM `auth_user` order by id DESC \")<nl><tab><tab>  rows1 = list(rows)<nl><tab><tab>  data=''<nl><tab><tab>  if len(rows1) > 0:<nl><tab><tab><tab><tab>users = rows1<nl><tab><tab>  #close_db(db)<nl><tab> except Exception as e:<nl><tab><tab>  users = e<nl><tab> return users<nl><nl>@app.context_processor<nl>def inject():<nl><tab> return dict(adminhome=adminhome)","out":"FLASKの全URLに対応した関数を登録する"}
{"in":"stackOfImages = np.array((image1, image2)) #iterate over these if many more<nl>redData = stackOfImages[:, N-1, M-1]","out":"3次元のnumpy配列からベクトルを抽出する方法は？"}
{"in":"query_set = Item.objects.extra(select={'count': 'count(1)'}, <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> order_by=['-count']).values('count', 'category')<nl>query_set.query.group_by = ['category_id']","out":"Django の count と group by に相当します。"}
{"in":"urlpatterns = patterns('tiptop.views',<nl><tab> (r'^(\\d+)\/(\\d*)$', 'test_items'),<nl>)","out":"django で Caught NoReverseMatch エラーが発生する。"}
{"in":"import datetime<nl><nl>tomorrow = datetime.datetime.today()+datetime.timedelta(days=1) <nl><nl>upcoming_obj = Events.objects.filter(start_date__gt = tomorrow)","out":"日付と時刻が明日以上のデータを取り戻す"}
{"in":"dict = { 'a': [ \"hello\", \"hey\", \"hi\" ] }","out":"pythonで辞書の値を並び替えるにはどうしたらいいですか？"}
{"in":"dictionary = {}<nl>with open('filename') as f:<nl><tab> for line in f:<nl><tab><tab>  dictionary[line[0]] = line[1]","out":"Pythonのテキストを辞書に登録"}
{"in":"getattr(CallMe, variable)()","out":"文字列からメソッドを呼び出す"}
{"in":"class Foo(ndb.Model):<nl>  CACHE_KEY = 'bla_cache'<nl>  bla = ndb.StringProperty()<nl><nl>  @clasmethod<nl>  def build_page(cls):<nl><tab> result = memcache.get(CACHE_KEY)<nl><tab> if result is None:<nl><tab><tab>result = cls.query().fetch(100)<nl><tab> return result<nl><nl>  def _post_put_hook(self, future):<nl><tab> memcache.delete(CACHE_KEY)","out":"Google App Engine（GAE）のフロントページクエリをキャッシュするためのベストプラクティス"}
{"in":"import matplotlib.pyplot as plt<nl>from numpy import *<nl>xx = arange(0,700,30)<nl>tt = arange(0,100,5)<nl>U = outer(xx,tt)<nl>V = outer(xx**(1\/2),tt\/4)<nl>plt.subplot(121)<nl>plt.pcolor(tt,xx,U)<nl>plt.colorbar()<nl>#plt.axes([0,600,0,100])<nl><nl>plt.xlim(0,100)<nl>plt.ylim(0,600)<nl><nl>plt.subplot(122)<nl>plt.pcolor(tt,xx,V)<nl>plt.colorbar()<nl><nl>plt.show()","out":"pyplotのサブプロットで軸の範囲を修正する。"}
{"in":"data = {}<nl><nl>for dir_item in os.listdir(path):<nl><tab> dir_item_path = os.path.join(path, dir_item)<nl><tab> if os.path.isfile(dir_item_path):<nl><tab><tab>  with open(dir_item_path, 'r') as f:<nl><tab><tab><tab><tab>data[dir_item] = f.read()<nl><tab><tab><tab><tab>for part in data[dir_item].split():<nl><tab><tab><tab><tab><tab> if part.startswith('color='):<nl><tab><tab><tab><tab><tab><tab>  print part[6:]","out":"Python: ディレクトリからすべてのファイルを読み込む"}
{"in":"int1, int2 = tuple","out":"Pythonでタプルから整数を取得するにはどうすればよいですか？"}
{"in":"data = np.load(filename, mmap_mode='r')","out":".npyファイルから特定の値を抽出する。"}
{"in":"from main import Session, User","out":"別のpythonファイルからSQLAlchemyセッションを使用する。"}
{"in":"from scipy.ndimage.interpolation import zoom<nl><nl>plt.pcolor(R,cmap='RdBu')<nl>plt.show()<nl><nl>R2 = zoom(R,2)<nl>plt.pcolor(R2,cmap='RdBu')<nl>plt.show()<nl><nl>R5 = zoom(R,5)<nl>plt.pcolor(R5,cmap='RdBu')<nl>plt.show()<nl><nl>R10 = zoom(R,10)<nl>plt.pcolor(R10,cmap='RdBu')<nl>plt.show()","out":"Python: 図形のための行列の補間"}
{"in":"def increment(self, seconds):<nl><tab> with self._mutex:<nl><tab><tab>  self._countdownInSec += seconds","out":"このコードにミューテックスは本当に必要なのでしょうか？"}
{"in":"MyPrettyPrinter(stream=f).pprint(d)","out":"pprintでUTF-8文字列をファイルに書き込む"}
{"in":"from visual import *<nl><nl>scene.title = \"Faces example\"<nl>scene.width = 600<nl>scene.height = 400<nl><nl>f = frame()<nl>tri = faces(<nl><tab> pos = [<nl><tab><tab>  [0.,0.,0.], [1.,0.,0.], [0.,1.,0.],<tab># first tri - vertices<nl><tab><tab>  [0.,0.,0.], [-1.,0.,0.], [0.,-1.,0.]  # second tri - vertices<nl><tab> ],<nl><tab> color = [<nl><tab><tab>  [1.,0.,0.], [0.5,0.5,0.], [0.,1.,0.], # first tri - colors<nl><tab><tab>  [0.,0.,1.], [0.,0.5,0.5], [0.,1.,0.]  # second tri - colors<nl><tab> ],<nl><tab> frame = f<nl>)<nl><nl>tri.make_normals()<nl>tri.make_twosided()<nl><nl>while True:<nl><tab> rate(100)<nl><tab> f.rotate(angle=0.01)","out":"VPythonで1つの顔を作る？"}
{"in":"class Foo(object):<nl><tab> pass<nl><nl>class Bar(object):<nl><tab> pass<nl><nl>dispatch_dict = {\"Foo\": Foo, \"Bar\": Bar}<nl>dispatch_dict[\"Foo\"]() # returns an instance of Foo","out":"Pythonで変数を使ったクラスのインスタンスを作成する"}
{"in":"import thread, time<nl><nl>def takes_a_while():<nl><nl><tab> def print_status():<nl><tab><tab>  while True:<nl><tab><tab><tab><tab>print i<tab># print current i every two seconds<nl><tab><tab><tab><tab>time.sleep(2)<nl><nl><tab> status_thread = thread.start_new_thread(print_status, ())<nl><tab> for i in xrange(10000000):<nl><tab><tab>  print '*',<nl><tab><tab>  time.sleep(0.1)<nl><tab> status_thread.exit()<nl><nl>takes_a_while()","out":"Python - 長く続くループが進行している間、同じスコープで定期的にスレッドに「何か」させる方法は？"}
{"in":"import ConfigParser<nl><nl>config = ConfigParser.ConfigParser()<nl>config.read('conf.ini')<nl><nl>try:<nl><tab> val = config.get('section1', 'var1')<nl>except:<nl><tab> sys.exit(1)<nl><nl>print val","out":"pythonでiniファイルを解析し、適切な関数を選択する方法"}
{"in":"import turtle<nl><nl>turtle.colormode(255)<nl><nl>for i in range(0,255,15):<nl><tab> turtle.pencolor(i,i,i)<nl><tab> turtle.write(\"Hello\")<nl><tab> turtle.delay(100)","out":"Python Turtleでテキストをフェードアウトさせる"}
{"in":"#!\/usr\/bin\/env python<nl>import csv<nl>afile = open('<directory>\/*.csv', 'r+')<nl>csvReader1 = csv.reader(afile)<nl>for i in range(2):<nl><tab> print csvReader1.next()","out":"csvファイルの最初の2行を標準出力に出力する。"}
{"in":"import datetime<nl><nl>td = datetime.timedelta(seconds=time.time()-a_unix_timestamp)","out":"unixのtimestampを使って、babelのformat_timedelta用のtimedeltaを生成する。"}
{"in":"import threading<nl>import time<nl><nl>value = 3<nl><nl>def process():<nl><tab> while True:<nl><tab><tab>  print(value)<nl><tab><tab>  time.sleep(1)<nl><nl>thread = threading.Thread(target=process)<nl>thread.start()<nl><nl>while True:<nl><tab> value = input('Enter value: ')","out":"ループの中でユーザーの入力を読み取るには（そしてこのループの中で作業をブロックすることなく）どうすればよいでしょうか？"}
{"in":"from pprint import pprint<nl><nl>def getCurrentVariableState():<nl><tab> pprint(locals())<nl><tab> pprint(globals())","out":"Python、すべての束縛された変数の名前と値を表示する"}
{"in":"import csv<nl>testSet = set(['thissucks.in', 'whateverlife.in', 'crapface.in', 'lasttry.in'])<nl>with open('mag.csv', 'ab+') as f:<nl><tab> writer = csv.writer(f ,dialect= 'excel', delimiter= ',')<nl><tab> for domain in testSet:<nl><tab><tab>  writer.writerow([domain, '', 'Related'] )","out":"セット＋フォーマットされた文字列をCSVに書き込む？"}
{"in":"foo,bar,baz,qux","out":"str.splitを使用した後のデータを加工する"}
{"in":"from Tkinter import *<nl>master = Tk()<nl>listbox = Listbox(master, selectbackground=\"red\")","out":"python Tkinter.Listboxのパラメータを変更する。"}
{"in":"list1 = [0,1,4,8,87,6,4,7,5,'a','f','er','fa','vz']<nl>tuple1 = (8,5,'f')<nl><nl>def my_contains(first, second):<nl><tab> return bool(set(first).intersection(second))<nl><nl>my_contains(list1, tuple1) # True<nl>my_contains(list1, [1]) # True<nl>my_contains(list1, (125,178,999)) # False","out":"contains__関数に複数のパラメータを設定する。"}
{"in":"regex = re.compile(r'\"(?:[^\"]|\"\")*\"')","out":"特殊なエスケープルールを持つ文字列マッチングのための正規表現"}
{"in":"query = Q()<nl>for search in (prefs.address1, prefs.address2):<nl><tab> if search:<nl><tab><tab>  query |= Q(title__icontains=search)<nl>results = Stores.objects.filter(query)","out":"Djangoのクエリで「None」DB値を扱う方法"}
{"in":"dice=random.randint(1,7)","out":"サイコロを振って、各数字を何回振ったかをシミュレートするプログラム"}
{"in":"import sys<nl>sys.path.append('\/home\/markstadt\/.local\/lib\/python\/site-packages')<nl>import soundcloud","out":"PythonanywhereにインストールされたモジュールにWeb2pyでアクセスする。"}
{"in":"#!usr\/bin\/env python<nl>import matplotlib.pyplot as plt<nl>import numpy as np<nl><nl>x = np.arange(-180.0,190.0,10)<nl>theta = (np.pi\/180.0 )*x<tab> # in radians<nl><nl>offset = 2.0<nl><nl>R1 = [-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\\<nl>-0.137,-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\\<nl>-0.137,-0.358,-0.483,-0.479,-0.346,-0.121,0.137,0.358,0.483,0.479,0.346,0.121,\\<nl>-0.137,-0.358]<nl><nl>fig1 = plt.figure()<nl>ax1 = fig1.add_axes([0.1,0.1,0.8,0.8],polar=True)<nl>ax1.set_ylim(-2,2)<nl>ax1.set_yticks(np.arange(-2,2,0.5))<nl>ax1.plot(theta,R1,lw=2.5)","out":"Matplotlib\/PythonでPolar Plotの軸オプションを変更する。"}
{"in":"content = b'cmd\\x00arg1\\x00arg2\\x00'<nl>print(content.replace(\"\\x00\", \" \"))","out":"スペースがある場合は、⽋⽋を変換する"}
{"in":"__init__.py","out":"ImportError：bという名前のモジュールがない - Python"}
{"in":"print \" \"+ \"\\033[01;41m\" + \" \" +\"\\033[01;46m\" + \" \" + \"\\033[01;42m\"","out":"python shellでテキストの色を変える？"}
{"in":"if not 'seen' in session.data:<nl><tab> # new session, set a flag<nl><tab> session.data['seen'] = True","out":"Python、CGIでセッションを扱う"}
{"in":"(await-svctim)\/await*100","out":"ビルドサーバー用の仮想マシンの性能をベンチマークされた方はいらっしゃいますか？"}
{"in":"for circle in circles[:]:<nl><tab> circle.update()","out":"Python & Pygameです：ループ下のリストの全要素を反復処理中に更新する"}
{"in":"class MyLayout(BoxLayout):<nl><tab> def getPerson1Name(self):<nl><tab><tab>  return App.get_running_app().person2.getName()","out":"Kivy - Kv言語の子ウィジェットとPythonウィジェットのクラスの両方からオブジェクトにアクセスできるようにする方法は？"}
{"in":"import subprocess # This is how we're going to call the commands.<nl><nl>samples = {} # Empty dict<nl>with open('inputfile','r') as f:<nl><tab> for line in f:<nl><tab><tab>  # Extract sampleID, other things depending on file format...<nl><nl><tab><tab>  samples[sampleID] = [rgid, rglb, grpl, rgpu, rgsm] # Populate dict<nl><nl>for sampleID in samples:<nl><tab> rgid, rglb, grpl, rgpu, rgsm = samples[sampleID]<nl><nl><tab> # Now you can run your commands using the subprocess module.<nl><tab> # Remember to add a change based on sampleID if e.g. the IO files differ.<nl><tab> subprocess.call(['picard-tools', 'AddOrReplaceReadGroups', 'I=input.bam', <nl><tab><tab>  'O=output.bam', 'RGID=%s' % rgid, 'RGLB=%s' % rglb, 'RGPL=%s' %rgpl,<nl><tab><tab>  'RGPU=%s' % rgpu, 'RGSM=%s' % rgsm, 'VALIDATION_STRINGENCY=SILENT', <nl><tab><tab>  'SORT_ORDER=coordinate', 'CREATE_INDEX=true'])","out":"ipython\/パイソンで表計算から辞書まで & more?"}
{"in":"from datetime import datetime<nl><nl>date_format = XFStyle()<nl>date_format.num_format_str = 'dd\/MM\/yyyy'<nl>plan.write(1, 4, datetime.strptime(\"01\/01\/2014\", \"%d\/%M\/%Y\"), date_format)","out":"xlwtを使った日付フォーマットの書き込み"}
{"in":"from sympy import *<nl>s = symbols(\"s\")<nl>t = symbols(\"t\", positive=True)<nl>h = 1\/(s**3 + s**2\/5 + s)<nl>inverse_laplace_transform(h,s,t).evalf().simplify()","out":"シンピー逆ラプラス変換からより良い答えを得るために"}
{"in":"A1 = [1, 2, 3, 3, 4, 4, 4]<nl>B1 = [1, 2, 3, 4, 5, 6, 7]<nl>A2 = []<nl>B2 = []<nl><nl>for i in range(len(A1)):<nl><tab> if A1[i] != A1[i + 1]:<nl><tab><tab>  A2.append(A1[i])<nl><tab><tab>  B2.append(B1[i])<nl><tab> else:<nl><tab><tab>  j = i + 1<nl><tab><tab>  sum = B1[i]<nl><tab><tab>  while j < len(A1) and A1[i] == A1[j]:<nl><tab><tab><tab><tab>sum += B1[j]<nl><tab><tab><tab><tab>del A1[j]<nl><tab><tab><tab><tab>del B1[j]<nl><tab><tab>  A2.append(A1[i])<nl><tab><tab>  B2.append(sum)<nl><tab><tab>  if j >= len(A1):<nl><tab><tab><tab><tab>break<nl><nl>print A2<nl>print B2","out":"A列が繰り返される場合、2列目を合計する"}
{"in":"class Features(EmbeddedDocument):<nl><tab> version = FloatField()<nl><tab> data = ListField(StringField())","out":"EmbeddedDocument 内の MongoEngine ListField がバリデーションで TypeError を投げる。"}
{"in":"images.resize(data, width=188)","out":"Google Python Image Library - 画像の幅を基準にリサイズする方法は？"}
{"in":"python-pygraphviz","out":"pygraphvizでdjango-extensionsを使えるようにする。"}
{"in":"import time<nl>from multiprocessing import Pool, Value, Lock<nl>import decimal<nl>import random<nl><nl>number = Value('i', 0)<nl>lock = Lock()<nl>lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h','i', 'j', 'k']<nl><nl>def thefunction(listi):<nl><tab> time.sleep(decimal.Decimal(random.random()))<nl><tab> with lock:<nl><tab><tab>  number.value += 1<nl><tab><tab>  print time.strftime('%H:%M:%S'), number.value, listi<nl><nl>def initializer(*args):<nl><tab> global number, lock<nl><tab> number, lock = args<nl><nl>pool = Pool(4, initializer, (number, lock))<nl>pool.map(thefunction, lists)<nl>print number.value","out":"Python multiprocessing.pool.map()で呼び出された関数内で数値を増加させる。"}
{"in":"import matplotlib.pyplot as plt<nl>import numpy as np<nl>fig = plt.figure()<nl>ax = fig.add_subplot(111)<nl>ax.plot(np.random.rand(10))<nl><nl>retval = -1<nl>def onclick(event):<nl><tab> print 'button=%d, x=%d, y=%d, xdata=%f, ydata=%f'%(event.button, event.x, event.y, event.xdata, event.ydata)<nl><tab> # Record the x location of the user's click in the global variable and close the figure<nl><tab> global retval<nl><tab> retval = event.xdata<nl><tab> plt.close()<nl><nl>cid = fig.canvas.mpl_connect('button_press_event', onclick)<nl># Bring up the figure (and wait)<nl>plt.show()<nl><nl>print 'User selected point {0}'.format( retval )","out":"python return ydata from matplotlib click."}
{"in":"# A Foolish Consistency is the Hobgoblin of Little Minds [1]<nl># [1]: http:\/\/www.python.org\/dev\/peps\/pep-0008\/#a-foolish-consistency-is-the-hobgoblin-of-little-minds","out":"Pythonのコメントで、長いurlをどのようにフォーマットすれば、PEP8に準拠できるでしょうか？"}
{"in":"ListLayers (map_document_or_layer, {wildcard}, {data_frame})","out":"ArcPy Mapping：レイヤーを一括でシンボル化し、それぞれをJPEGで書き出す（ArcGIS 10.2）"}
{"in":"obj.some_function( '1', 2, '3', g=\"foo\", h=\"bar\" )","out":"オプション引数を持つpython関数"}
{"in":"with open(\"Input.txt\") as inFile:<nl><tab> for item in inFile:<nl><tab><tab>  datePart, holiday = item.split(\", \", 1)<nl><tab><tab>  month, day = datePart.split()","out":"異なるデリミタによるトークン化"}
{"in":"import glob<nl>results = [open(f) for f in glob.glob(\"*.data\")]<nl>sep = \",\"<nl># Uncomment if your Excel formats decimal numbers like 3,14 instead of 3.14<nl># sep = \";\"<nl><nl>with open(\"res.csv\", 'w') as fout:<nl><tab> for row in range(21):<nl><tab><tab>  iterator = (f.readline().strip().replace(\"\\t\", sep) for f in results)<nl><tab><tab>  line = sep.join(iterator)<nl><tab><tab>  fout.write(\"{0}<nl>\".format(line))","out":"Python- 複数のファイルから読み込む"}
{"in":"import sys<nl>sys.path.append('\/your\/dir\/goes\/here')<nl>from base import foo","out":"上記のディレクトリからPythonをインポートする。"}
{"in":"f = open('test.dat', 'r')<nl>while True:<nl><tab> ch=f.read(1)<nl><tab> if not ch: break<nl><tab> print ch","out":"Python - ファイルを1文字ずつ読み込むには？"}
{"in":"edge_list = []<nl>delete_these = []<nl>for point, edges in edges_per_point.items():<nl><tab> edge_list.append(edges.pop(0))<nl><tab> if edges:<nl><tab><tab>  edges_per_point[point] = edges<nl><tab> else:<nl><tab><tab>  delete_these.append(point)<nl><nl>for point in delete_these:<nl><tab> del edges_per_point[point]","out":"リストの辞書から項目を削除する"}
{"in":"indices = 0, 2<nl>somelist = [i for j, i in enumerate(somelist) if j not in indices]","out":"リストから複数の要素を削除する"}
{"in":"mask = freq>=0<nl>pl.plot(freq[mask]*2*np.pi, np.sqrt(sp[mask].real**2+sp[mask].imag**2))<nl>pl.plot(freq[~mask]*2*np.pi, np.sqrt(sp[~mask].real**2+sp[~mask].imag**2))","out":"プロット中の不要な直線を削除する方法は？"}
{"in":"nx.draw_networkx(G,with_labels=False)","out":"NetworkX - ラベルなしでグラフをプロットする。"}
{"in":"import sqlalchemy.types as types<nl><nl>class UUID(types.TypeEngine):<nl><tab> def get_col_spec(self):<nl><tab><tab>  return \"uuid\"<nl><nl><tab> def bind_processor(self, dialect):<nl><tab><tab>  def process(value):<nl><tab><tab><tab><tab>return value<nl><tab><tab>  return process<nl><nl><tab> def result_processor(self, dialect):<nl><tab><tab>  def process(value):<nl><tab><tab><tab><tab>return value<nl><tab><tab>  return process<nl><nl>table = Table('foo', meta,<nl><tab> Column('id', UUID(), primary_key=True),<nl>)","out":"SQLAlchemyでUUIDを使うにはどうすればよいですか？"}
{"in":"x='iamonlywhoknock BREAKINGBAD<nl>'.split(\" \")<nl>mydict={x[0]:x[1]}","out":"文字列から辞書への変換 Python"}
{"in":"import MySQLdb<nl>import os<nl>import datetime<nl><nl>con = MySQLdb.connect(host='localhost', user='root', passwd='password', db='test')<nl>cur = con.cursor()<nl><nl>cur.execute(\"SHOW TABLES\")<nl>data = \"\"<nl>tables = []<nl>for table in cur.fetchall():<nl><tab> tables.append(table[0])<nl><nl>for table in tables:<nl><tab> data += \"DROP TABLE IF EXISTS `\" + str(table) + \"`;\"<nl><nl><tab> cur.execute(\"SHOW CREATE TABLE `\" + str(table) + \"`;\")<nl><tab> data += \"<nl>\" + str(cur.fetchone()[1]) + \";<nl><nl>\"<nl><nl><tab> cur.execute(\"SELECT * FROM `\" + str(table) + \"`;\")<nl><tab> for row in cur.fetchall():<nl><tab><tab>  data += \"INSERT INTO `\" + str(table) + \"` VALUES(\"<nl><tab><tab>  first = True<nl><tab><tab>  for field in row:<nl><tab><tab><tab><tab>if not first:<nl><tab><tab><tab><tab><tab> data += ', '<nl><tab><tab><tab><tab>data += '\"' + str(field) + '\"'<nl><tab><tab><tab><tab>first = False<nl><nl><nl><tab><tab>  data += \");<nl>\"<nl><tab> data += \"<nl><nl>\"<nl><nl>now = datetime.datetime.now()<nl>filename = str(os.getenv(\"HOME\")) + \"\/backup_\" + now.strftime(\"%Y-%m-%d_%H:%M\") + \".sql\"<nl><nl>FILE = open(filename,\"w\")<nl>FILE.writelines(data)<nl>FILE.close()","out":"Pythonでmysqldumpを使わずにMySQLデータベースをダンプするには？"}
{"in":"for e in soup.findAll('br'):<nl><tab> e.extract()","out":"解析されたビューティフルスープリストから<br>タグを削除しますか？"}
{"in":"from sqlalchemy import and_, or_<nl><nl>db.query(ShippingRate).filter(or_( \\<nl><tab> and_(ShippingRate.minimum == None, ShippingRate.maximum == None), \\<nl><tab> and_(ShippingRate.minimum != None, ShippingRate.maximum != None,  literal(myVal).between(ShippingRate.minimum, ShippingRate.maximum)), \\<nl><tab> and_(ShippingRate.minimum == None, myVal < ShippingRate.maximum), \\<nl><tab> and_(ShippingRate.maximum == None, myVal > ShippingRate.minimum)))","out":"SQLAlchemy を使って、片方のカラムが定義されていない 2 つのカラムに基づいてフィルタをかけるには？"}
{"in":"mylist = re.findall(r'''(?x)<tab><tab><tab><tab><tab><tab>  # verbose mode<nl><tab><tab><tab><tab><tab><tab><tab><tab><span\\ info=\".+<\/span>| # allows you to comment the regex<nl><tab><tab><tab><tab><tab><tab><tab><tab>Name:\\ .+<br>|<tab><tab><tab> # for even better readability<nl><tab><tab><tab><tab><tab><tab><tab><tab><span\\ id=\"Phone\"\\ info=\"phonenumber\">.+<\/span>''', file)","out":"Python、read文を複数行にコード化する方法は？"}
{"in":"#cloud-config","out":"プログラムによるEC2サーバーのプロビジョニングとデフォルト設定の方法"}
{"in":"class Event:<nl><tab> def __init__(self, name):<nl><tab><tab>  self.name = name<nl><tab><tab>  self.people = []","out":"Pythonでリストに項目を追加しようとしているが、動作がおかしい。"}
{"in":"from Bio import Entrez, Medline<nl><nl># Always tell NCBI who you are  <nl>Entrez.email = \"your_address@example.com\"  <nl><nl>term=\"((oncology) AND breast cancer) AND resulted in\"<nl><nl>handle = Entrez.esearch(db=\"pubmed\", retmax=10, term=term)<nl>record = Entrez.read(handle)<nl><nl>print record['Count']  # see how many hits in your search<nl><nl>for ref in record['IdList']:<nl><tab> handle = Entrez.efetch(db=\"pubmed\", id=ref, <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>rettype=\"Medline\", <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab>retmode=\"text\")<nl><tab> paper = Medline.read(handle)<nl><tab> # Medline returns a dict from which we can extract the <nl><tab> # fields we desire<nl><tab> print '-' * 30<nl><tab> print paper['TI']<nl><tab> print<nl><tab> print paper['AB']","out":"美しいスープで次ページへ移動する"}
{"in":"pModule = PyImport_Import(PyString_FromString(\"cpp_interface\"));","out":"boost::pythonを使用してPython型からラップされたC++型を抽出するにはどうすればよいですか？"}
{"in":"from zipfile import ZipFile<nl>from StringIO import StringIO<nl><nl>inMemoryOutputFile = StringIO()<nl><nl>zipFile = ZipFile(inMemoryOutputFile, 'w') <nl>zipFile.writestr('OEBPS\/content.xhtml', 'hello world')<nl>zipFile.close()<nl><nl>inMemoryOutputFile.seek(0)","out":"ディスクに触れることなく、ディレクトリ付きのインメモリZIPファイルを作成する方法は？"}
{"in":"import os, re<nl>path = 'C:\/Temp\/Folder1\/allTexts'<nl>listing = os.listdir(path)<nl>for infile in listing:<nl><tab> text = open(path + '\/' + infile).read()<nl><tab> match = re.search('<div id=\"text-interesting1\">', text)<nl><tab> if match is None:<nl><tab><tab>  continue<nl><tab> start = match.start()<nl><tab> end = re.search('<div id=\"text-interesting2\">', text).start()<nl><tab> print text[start:end]","out":"複数のファイルからテキストブロックを検索し、そのテキストブロックを別のファイルに書き込む方法"}
{"in":"pandas.concat([df1, df2], axis=1)","out":"同じインデックスを持つ2つのpandasデータフレームを結合する"}
{"in":"from selenium import webdriver<nl>from selenium.webdriver.support.ui import WebDriverWait<nl><nl>driver = webdriver.Firefox()<nl>driver.get(\"http:\/\/www.saksoff5th.com\/\")<nl><nl>driver.implicitly_wait(10) # seconds<nl><nl>driver.find_element_by_css_selector(\".sign-in > span\").click()<nl>driver.find_element_by_css_selector(\".ui-dialog[style*='display: block'] .ui-icon-closethick\").click()<nl><nl># If you prefer explicit wait, you can do these<nl># WebDriverWait(driver, 10).until(lambda driver: driver.find_element_by_css_selector(\".sign-in > span\")).click()<nl># WebDriverWait(driver, 10).until(lambda driver: driver.find_element_by_css_selector(\".ui-dialog[style*='display: block'] .ui-icon-closethick\")).click()","out":"ダイアログ内で可視の閉じるボタンをクリックする"}
{"in":"def blendShape(self, *args):<nl><nl><tab> blendshape_name = cmds.textField(self.widgets['bs'],  q=True, text=True)<nl><tab> cmds.blendShape(cmds.ls(sl=True)[1], cmds.ls(sl=True)[0], frontOfChain=True, n=blendshape_name)","out":"textFieldのテキストを名前付けに使う - Maya Python"}
{"in":"def is_code_block(node):<nl><tab> return (node.tagname == 'literal_block'<nl><tab><tab><tab><tab>and 'code' in node.attributes['classes'])<nl><nl>code_blocks = doctree.traverse(condition=is_code_block)<nl>source_code = [block.astext() for block in code_blocks]","out":"docutilsを使用して、再構築されたテキストからcodeディレクティブからコードを抽出する。"}
{"in":"for k in sorted(d, key=d.get, reverse=True):<nl><tab> print(\"{:>10}{:>20}\".format(k, d[k]))","out":"pythonで.formatを使って辞書を印刷する"}
{"in":"def f(x):<nl><tab> return {<nl><tab><tab>  'a': 1,<nl><tab><tab>  'b': 2,<nl><tab> }[x]","out":"Pythonのswitch文の代用品？"}
{"in":"def gen_wrapper(cmp):<nl><tab> class Wrapper(object):<nl><tab><tab>  def __init__(self, value): self.value = value<nl><tab><tab>  def __cmp__(self, obj): return cmp(self.value, obj.value)<nl><tab> return Wrapper","out":"Pythonのminヒープ"}
{"in":"result = braintree.Transaction.sale({<nl><tab> \"amount\": \"10.00\",<nl><tab> \"payment_method_token\": the_token,<nl><tab> \"options\": {<nl><tab><tab>  \"submit_for_settlement\": True<nl><tab> }<nl>})","out":"braintree js+pythonでプランのないトランザクションを作成する方法(ホワイトアウト購読)"}
{"in":"url = 'http:\/\/www.klse.info\/companies\/listed-companies\/alphabet\/A'<nl>req = urllib2.Request(url, headers={'User-Agent' : \"Magic Browser\"}) <nl>page = urllib2.urlopen(req).read()","out":"クロームでurllib2を使ってURLリンクを開くことができない"}
{"in":"GridItem.setPen()","out":"GridItemにpyqtgraph.mkPen()を適用するにはどうすればよいですか？"}
{"in":"import http.client<nl>connection = http.client.HTTPConnection('www.python.org')<nl><nl>connection.request('GET', '\/')<nl>response = connection.getresponse()<nl>print(response.status)<nl>print(response.msg)<nl>answer = response.read()<nl>print(answer)","out":"Python - httpリクエストを文字列として送信する。"}
{"in":"import pandas as pd<nl>import numpy as np<nl><nl># load your data<nl><nl>data['Time'] = pd.to_datetime(data['Time'])<nl><nl>list_of_indexes = [np.argmin(g['Time']) for l, g in data.groupby('ID Name')]<nl>data.ix[list_of_indexes]","out":"列の中で最新の値を保持し、それ以外を削除する方法（pandas）。"}
{"in":"test.func_defaults","out":"Pythonのデフォルト引数値へのアクセス"}
{"in":"WSGIScriptAlias \/A \/path\/to\/my\/wsgi.py\/A<nl>WSGIScriptAlias \/B \/path\/to\/my\/wsgi.py\/B","out":"mod_wsgi での Django アプリ - url を消費しない方法"}
{"in":"df = {'dname':[\"123ask\", \"example92\" , \"what3ver\"]}<nl>df['numeric'] = [sum (x.isdigit()  for x in b) for b in df['dname']]<nl>print df['numeric']<nl>#>>> [3, 2, 1]","out":"Python- データフレーム内の各文字列の数値の和を計算する。"}
{"in":"# FRAME 1 ##########################################################<nl>self.frame1 = gtk.Frame()<nl>self.contentTable.attach(self.frame1, 0, 1, 0, 1,<nl>gtk.FILL | gtk.EXPAND, gtk.EXPAND | gtk.SHRINK | gtk.FILL, 0, 0)","out":"gtk python ウィンドウに合わせてコンテンツを拡大する"}
{"in":"with open(\"input1.txt\") as f, open(\"input2.txt\") as f2,open(\"output.txt\",\"w\") as f3:<nl><tab> f2.next() # skip header to avoid writing  A B C twice<nl><tab> for line in f:<nl><tab><tab>  f3.write(line)<nl><tab> f3.write(\"<nl>\") # separate last line from file 1 and first of file 2<nl><tab> for line in f2:<nl><tab><tab>  f3.write(line)","out":"Pythonです：リスト内のファイルを結合する"}
{"in":"re.findall('\"([^\"]*\\.(?:gif|jpg)[^\"]*)\"', text)","out":"テキストファイルの中で、特定のファイルタイプで終わる文字列が出現するすべてのリストを作成するにはどうすればよいですか？"}
{"in":"data = data[0]","out":"リストのパラメータを削除し、中身を削除しない方法は？"}
{"in":"import sys<nl>from PyQt4 import QtGui, QtCore<nl><nl>class CompiledWindow(QtGui.QWidget):<nl><tab> def __init__(self, parent = None):<nl><tab><tab>  QtGui.QWidget.__init__(self, parent)<nl><tab><tab>  self.setWindowTitle('Reasonably named window')<nl><tab><tab>  names = ['Open Logo Picture', 'Open Setup Picture', 'Open first data file', 'Open second data file', 'Enter text about settings', 'Enter other text about settings', 'Enter third setting', 'Enter fourth setting']<nl><tab><tab>  grid = QtGui.QGridLayout(self)<nl><tab><tab>  self.Logo_button = QtGui.QPushButton(names[0], self)<nl><tab><tab>  self.Logo_button.clicked.connect(self.logo_pic)<nl><tab><tab>  grid.addWidget(self.Logo_button, 0, 0)<nl><nl><tab> def logo_pic(self):<nl><tab><tab>  self.Logo_picture = unicode(QtGui.QFileDialog.getOpenFileName())<nl><tab><tab>  print(self.Logo_picture)<nl><nl>app = QtGui.QApplication(sys.argv)<nl>cw = CompiledWindow()<nl>cw.show()<nl>sys.exit(app.exec_())","out":"PyQt4 - シグナルとスロットの話。ボタンとメソッドの接続に問題がある"}
{"in":"import re, sys, md5<nl><nl>def p(s, pos, callBack):<nl>  while pos < len(s):<nl><tab> m = re.match(r'(d+)[', s[pos:])<nl><tab> if m:  # repetition?<nl><tab><tab>number = m.group(1)<nl><tab><tab>for i in range(int(number)):<nl><tab><tab>  endPos = p(s, pos+len(number)+1, callBack)<nl><tab><tab>pos = endPos<nl><tab> elif s[pos] == ']':<nl><tab><tab>return pos + 1<nl><tab> else:<nl><tab><tab>callBack(s[pos])<nl><tab><tab>pos += 1<nl>  return pos + 1<nl><nl>digest = md5.new()<nl>def feed(s):<nl>  digest.update(s)<nl>  sys.stdout.write(s)<nl>  sys.stdout.flush()<nl><nl>end = p(sys.argv[1], 0, feed)<nl>print<nl>print \"MD5:\", digest.hexdigest()<nl>print \"finished parsing input at pos\", end","out":"同一文字を複数回ハッシュ化する"}
{"in":"import os<nl><nl>Export_Dir = os.path.dirname(Export)<nl>Export_Name = os.path.basename(Export)<nl><nl>Output = Export_Dir + \"\\Output_\" + Export_Name<nl>print \"<nl>Output: \" + Output + \"<nl>\"<nl><nl>cmd = grep_loc + \" --file=\" + Serial_List + \" \" + Export + \" > \" + Output<nl>print \"grep usage: <nl>\" + cmd + \"<nl>\"<nl>os.system(cmd)<nl>print \"Output created<nl>\"","out":"Pythonでファイルに対してgrepを使用する"}
{"in":"hist = cv.CreateHist([255], cv.CV_HIST_ARRAY, [[0,255]], 1)<nl>cv.CalcHist([im] , hist)<tab><tab><tab> <nl>for h in range(255):<nl><tab> zm = cv.QueryHistValue_1D(hist, h)<nl><tab> objectArea.append([int(zm)])","out":"二値画像中の複数のblobの面積 python"}
{"in":"DataFrame.update(other, join='left', overwrite=True,<nl><tab><tab><tab><tab><tab>  filter_func=None, raise_conflict=False)","out":"MultiIndex カラムを持つ 2 つの Pandas DataFrame をインデックスと cols の両方でマージ\/ジョイン\/アペンドする。"}
{"in":"m = [<nl><tab> {'title': 'Song 1', 'artist': 'Artist 1',<nl><tab><tab>  'Album': 'Album 1', 'Path': 'path 1'},<nl><tab> {'title': 'Song 2', 'artist': 'Artist 1 Ft 2',<nl><tab><tab>  'Album': 'Album 1', 'Path': 'path 2'},<nl><tab> {'title': 'Song 3', 'artist': 'Artist 1 Ft 3',<nl><tab><tab>  'Album': 'Album 1', 'Path': 'path 3'}<nl>]<nl><nl>from collections import defaultdict<nl><nl># Group all the artists, as per the Album name<nl>d = defaultdict(list)<nl>for item in m:<nl><tab> d[item[\"Album\"]].append(item[\"artist\"])<nl><nl># Gather paths corresponding to the Albums<nl>p = {item[\"Album\"]: item[\"Path\"] for item in m}<nl><nl># Recreate a list of all albums with artist names joined<nl>result = []<nl>for album in d:<nl><tab> result.append({<nl><tab><tab>  \"Album\" : album,<nl><tab><tab>  \"artist\": \"; \".join(d[album]),<nl><tab><tab>  \"Path\"  : p[album]<nl><tab> })<nl><nl>print result","out":"Pythonです：キーとバリューのペアに基づいて辞書をグループ化する方法"}
{"in":"def divide(dividends, divisors):<nl><tab> ret = dict()<nl><tab> for key, dividend in dividends.iteritems():<nl><tab><tab>  if key in divisor:<nl><tab><tab><tab><tab>ret[key] = dividend\/divisors[key]<nl><tab><tab>  else:<nl><tab><tab><tab><tab>ret[key] = dividend<nl><tab> return ret","out":"辞書の値を別の辞書の値で割る python"}
{"in":"def toJSON(self):<nl><tab> clone = copy.deepcopy(self)<nl><tab> if getattr(clone.data, '_state', False):<nl><tab><tab>  del clone.data._state<nl><tab> return jsonpickle.encode(clone, unpicklable=False)","out":"jsonpickle.encode から django _state 属性を除外する簡単な方法"}
{"in":"import gdata.gauth<nl><nl>Client_id='xxx';<nl>Client_secret='yyy'<nl>Scope='https:\/\/spreadsheets.google.com\/feeds\/'<nl>User_agent='myself'<nl><nl>token = gdata.gauth.OAuth2Token(client_id=Client_id,client_secret=Client_secret,scope=Scope,user_agent=User_agent)<nl>print token.generate_authorize_url(redirect_uri='urn:ietf:wg:oauth:2.0:oob')<nl>code = raw_input('What is the verification code? ').strip()<nl>token.get_access_token(code)<nl>print \"Refresh token<nl>\"<nl>print token.refresh_token<nl>print \"Access Token<nl>\"<nl>print token.access_token","out":"Gdata python Googleアプリ認証"}
{"in":"if len(data) == 0:<nl><tab> plt.plot([])<nl>else:<nl><tab> plt.histogram(data)","out":"matplotlibで空のヒストグラムを作るには？"}
{"in":"def queryset(self, request):<nl><tab><tab>  qs = super(ContentAdmin, self).queryset(request)<nl><tab><tab>  return qs.filter(score__name='Twitter').order_by('-score__score')","out":"Django Admin：関連する外部キーの値で注文する"}
{"in":"wmi_sql = wmi.WMI(SQLServer_raw, user=\"%s\\\\%s\" % (sql_domain, sql_user), <nl><tab> password=sql_pass)","out":"WMIコール内で変数を割り当てるにはどうすればよいですか？"}
{"in":"import matplotlib.pyplot as plt<nl>img = plt.imread(filename)<nl><nl># >>> img<nl># array([[38948, 41457, 37714, ..., 61511, 61785, 61824],<nl>#<tab><tab> [39704, 38083, 36690, ..., 61419, 60086, 61910],<nl>#<tab><tab> [41449, 39169, 38178, ..., 60192, 60969, 63538],<nl>#<tab><tab> ...,<nl>#<tab><tab> [37963, 39531, 40339, ..., 62351, 62646, 61793],<nl>#<tab><tab> [37462, 37409, 38370, ..., 61125, 62497, 59770],<nl>#<tab><tab> [39753, 36905, 38778, ..., 61922, 59565, 60035]], dtype=uint16)","out":"Python PILが非圧縮の16ビットTIFF画像で苦労する"}
{"in":"del a[0][0]","out":"Pythonでリストから要素を削除する方法は？"}
{"in":"import matplotlib.pyplot as plt<nl>from numpy.random import randn<nl><nl># plot something<nl>fig, ax = plt.subplots()<nl>cax = ax.imshow(randn(100,100))<nl><nl># create the color bar<nl>cbar = fig.colorbar(cax)<nl>cbar.set_label('dBZ', color = \"white\")<nl><nl># update the text <nl>t = cbar.ax.get_yticklabels();<nl>labels = [item.get_text() for item in t]<nl>cbar.ax.set_yticklabels(labels, color = 'white')<nl>plt.show()","out":"cbarの凡例テキストの色を変更する python"}
{"in":"re.sub(r'(?<=abc)\\d{1,3}', '456', string)","out":"正規表現に関するヘルプ - Python"}
{"in":"list_of_pixels = list(im.getdata())<nl># Do something to the pixels...<nl>im2 = Image.new(im.mode, im.size)<nl>im2.putdata(list_of_pixels)","out":"PILでRGBタプルのリストを使用して画像を作成するにはどうすればよいですか？"}
{"in":"d = {'dog': [['4.1', '7.0', 'dog'], ['1.2', '3.4', 'dog']], 'cat': [['1', '8.2', '5.501', 'cat'], ['6.5', '8', '9.1', 'cat']]}<nl><nl>avg_dict = {}<nl>for key in d:<nl><tab> avg_list = []<nl><tab> i = 0<nl><tab> while (i < len(d[key][0]) - 1):<nl><tab><tab>  avg_list.append((float(d[key][0][i]) + float(d[key][1][i])) \/2.0)<nl><tab><tab>  i += 1<nl><tab> avg_dict[key] = avg_list<nl><nl>print(avg_dict)","out":"辞書の値で入れ子になっているリストの列の平均を求める"}
{"in":"execute()","out":"Fabricでラッパー関数を定義するにはどうすればいいのでしょうか？"}
{"in":"import imp<nl>import os<nl>MODULE_EXTENSIONS = ('.py', '.pyc', '.pyo')<nl><nl>def package_contents(package_name):<nl><tab> file, pathname, description = imp.find_module(package_name)<nl><tab> if file:<nl><tab><tab>  raise ImportError('Not a package: %r', package_name)<nl><tab> # Use a set because some may be both source and compiled.<nl><tab> return set([os.path.splitext(module)[0]<nl><tab><tab>  for module in os.listdir(pathname)<nl><tab><tab>  if module.endswith(MODULE_EXTENSIONS)])","out":"パッケージ内のPythonモジュールの名前を列挙する標準的な方法はありますか？"}
{"in":"def save(self, force_insert=False, force_update=False):<nl><tab> new_task = False<nl><tab> if not self.id:<nl><tab><tab>  new_task = True<nl><tab> super(Task, self).save(force_insert, force_update)<nl><tab> end = self.startDateTime + timedelta(minutes=24*60)<nl><tab> title = \"This is test Task\"<nl><tab> if new_task:<nl><tab><tab>  event = Event(start=self.startDateTime, end=end,title=title,<nl><tab><tab><tab><tab><tab><tab>description=self.description)<nl><tab><tab>  event.save()<nl><tab><tab>  rel = EventRelation.objects.create_relation(event, self)<nl><tab><tab>  rel.save()<nl><tab><tab>  try:<nl><tab><tab><tab><tab>cal = Calendar.objects.get(pk=1)<nl><tab><tab>  except Calendar.DoesNotExist:<nl><tab><tab><tab><tab>cal = Calendar(name=\"Community Calendar\")<nl><tab><tab><tab><tab>cal.save()<nl><tab><tab>  cal.events.add(event)<nl><tab> else:<nl><tab><tab>  event = Event.objects.get_for_object(self)[0]<nl><tab><tab>  event.start = self.startDateTime<nl><tab><tab>  event.end = end<nl><tab><tab>  event.title = title<nl><tab><tab>  event.description = self.description<nl><tab><tab>  event.save()","out":"既存アプリでdjango-schedulerアプリを使う方法"}
{"in":"from PyQt4 import QtGui<nl>from PyQt4 import QtWebKit<nl><nl>class DisplayHTML(QtWebKit.QWebView):<nl><nl><tab> def __init__(self, html, parent=None):<nl><tab><tab>  super().__init__(parent)<nl><tab><tab>  self.setHtml(html)<nl><nl>if __name__ == '__main__':<nl><tab> import sys<nl><tab> app = QtGui.QApplication(sys.argv)<nl><tab> html_template = \"<html><p>Hello, {first}, how {second} you {third}?<\/p><\/html>\"<nl><tab> values_dict = {<nl><tab><tab>  'first': 'Joe',<nl><tab><tab>  'second': 'are',<nl><tab><tab>  'third': 'today',<nl><tab> }<nl><tab> html_ready_to_render = html_template.format(**values_dict)<nl><tab> window = DisplayHTML(html_ready_to_render)<nl><tab> window.show()<nl><tab> sys.exit(app.exec_())","out":"Qt\/pyQt\/PySide - 印刷用ドキュメントテンプレートの作成"}
{"in":"from dateutil import parser<nl>parse_time = lambda s: parser.parse(s, ignoretz = True)<nl><nl>func_map = \"\"\"<nl>function() {<nl><tab> if (this.hasOwnProperty(\"time\"))<nl><tab><tab>  emit(this.time.getUTCFullYear() + \"\/\" + (this.time.getUTCMonth() + 1) + \"\/\" + this.time.getUTCDate(),<nl><tab><tab>  {<nl><tab><tab><tab><tab>count: 1,<nl><tab><tab><tab><tab>not_deleted: (1 - this.deleted)<nl><tab><tab>  });<nl>}<nl>\"\"\"<nl><nl>func_reduce = \"\"\"<nl>function(key, values) {<nl><tab> var result = {count: 0, not_deleted: 0};<nl><nl><tab> values.forEach(function(value) {<nl><tab><tab>  result.count += value.count;<nl><tab><tab>  result.not_deleted += value.not_deleted;<nl><tab> });<nl><nl><tab> return result;<nl>}<nl>\"\"\"<nl><nl>with my_mongo() as m:<nl><tab> result = m.data.inline_map_reduce(func_map, func_reduce)<nl><tab> dataset = {parse_time(day['_id']): day['value']['not_deleted'] for day in result}<nl><tab> dataset2 = {parse_time(day['_id']): day['value']['count'] for day in result}","out":"matplotlibによるMongodbデータ統計の可視化"}
{"in":"clean()","out":"ValidationError を発生させ、レスポンスを返すには？"}
{"in":"oWord.Tables[1].Range.ParagraphFormat.Alignment = WdParagraphAlignment.wdAlignParagraphCenter;","out":"ワードテーブルをページ中央に割り当てる方法"}
{"in":"def save(self, *args, **kwargs):<nl><tab> # save the instance, do this first so that we have an id<nl><tab> super(MyModelClass, self).save(*args, **kwargs)<nl><tab> # if it was a new instance fid is not set yet<nl><tab> if self.id and not self.fid:<nl><tab><tab>  self.fid = encode(self.id)<nl><tab><tab>  # save the instance again now that we've set fid<nl><tab><tab>  super(MyModelClass, self).save(*args, **kwargs)","out":"Django Saveメソッドはモデルインスタンスを2回更新する必要がある。"}
{"in":"hid = plt.pcolormesh(X,Y, data, antialiased=True)<nl><nl>#here we cover up the region that we just plotted in<nl>r3 = [1 for i in range(360)]<nl>theta3 = np.arange(360)*np.pi\/180.<nl>plt.fill(theta3, r3, 'w')<nl><nl>#now we can go through and fill in all the regions<nl>for j in range(len(r)):<nl><tab> rbox = np.array([r[j], r[j], r[j]+ rstep, r[j] + rstep])<nl><tab> for i in range(len(theta)):<nl><tab><tab>  thetabox = np.array([theta[i], theta[i] + tstep, theta[i] + tstep, theta[i]])<nl><tab><tab>  x = rbox*np.cos(thetabox)<nl><tab><tab>  y = rbox*np.sin(thetabox)<nl><tab><tab>  colorv = np.sin(r[j]\/10.*np.pi)<nl><tab><tab>  plt.fill(thetabox,rbox, facecolor = my_cmap(colorv))<nl>#And now we can plot the color bar that fits the data Tada :)<nl>plt.colorbar()<nl>plt.show()","out":"plt.fillで作成したプロットのカラーバーを作成する。"}
{"in":"import codecs<nl>raw_file=open('Documents\/t_alibaba_data.csv', 'r')<nl>result=open('Documents\/result.txt','w')<nl>for line in raw_file.readlines():<nl><tab> entry=line.split(\",\")<nl><tab> deco=entry[3].decode(\"gbk\").strip()<nl><tab> month=deco[0]<nl><tab> if len(deco)==5:<nl><tab><tab>  day=int(deco[2])*10+int(deco[3])<nl><tab> else:<nl><tab><tab>  day=int(deco[4])<nl><tab> result.write(\",\".join(entry[:3])+\",\"+str(month)+\",\"+str(day)+\"<nl>\")<nl>result.close()","out":"CSVデータ読み込み時に特定の文字列を削除する"}
{"in":"query = Notification.query.filter(Notification.id.in_(my_list)).all()","out":"flask-sqlalchemyで複数の値を持つフィルタを使用する。"}
{"in":"import os<nl><nl>var = os.popen('xsel').read()<nl>print var","out":"xselで選択したテキストを取得する方法 - Python"}
{"in":"trial = pgv.AGraph(strict=False, overlap=False, splines='true')<nl>#or<tab><nl>trial = pgv.AGraph(strict=False, overlap=False, splines='spline')","out":"pygraphvizでエッジがノードを横切るのを防ぐ"}
{"in":"def content_file_name(instance, filename):<nl><tab> print instance<nl><tab> print filename<nl><tab> file = os.path.exists(\"media\/file\/\"+str(filename))<nl><tab> print file<nl><tab> if file:<nl><tab><tab>  os.remove(\"media\/file\/\"+str(filename))<nl><tab> return \"file\/\"+str(filename)","out":"djangoでファイル名を変更する"}
{"in":"numpy.zeros((3,3,3))","out":"pythonで入れ子リストを作成する方法は？"}
{"in":"db.online_users.insert(user)","out":"Mongokitでオブジェクトをコレクションに追加する"}
{"in":"my_list = [\"Value1\", \"Value2\"]<nl>json = simplejson.dumps(my_list)<nl># send json","out":"PythonでXMLを生成する"}
{"in":"[aa+bb for aa,bb in zip(a,b)]","out":"Pythonを使用してコードで[(1, 2, 3, 4), (5, 6, 7, 8)]を取得する方法を説明します。"}
{"in":"class Child(Parent):<nl><tab> foobar = Parent.foobar + ['world']","out":"Pythonの継承クラス変数の変更"}
{"in":"qry = (session.query(<nl><tab><tab><tab><tab><tab> table.c.field1,<nl><tab><tab><tab><tab><tab> table.c.field2,<nl><tab><tab><tab><tab><tab> # #strftime* for year-month works on sqlite; <nl><tab><tab><tab><tab><tab> # @todo: find proper function for mysql (as in the question)<nl><tab><tab><tab><tab><tab> # Also it is not clear if only MONTH part is enough, so that<nl><tab><tab><tab><tab><tab> # May-2001 and May-2009 can be joined, or YEAR-MONTH must be used<nl><tab><tab><tab><tab><tab> func.strftime('%Y-%m', table.c.datestamp),<nl><tab><tab><tab><tab><tab> func.count(),<nl><tab><tab><tab><tab><tab> )<nl><tab><tab>  # optionally check only last 2 month data (could have partial months)<nl><tab><tab>  .filter(table.c.datestamp < datetime.date.today() - datetime.timedelta(60))<nl><tab><tab>  .group_by(<nl><tab><tab><tab><tab><tab> table.c.field1,<nl><tab><tab><tab><tab><tab> table.c.field2,<nl><tab><tab><tab><tab><tab> func.strftime('%Y-%m', table.c.datestamp),<nl><tab><tab><tab><tab><tab> )<nl><tab><tab>  # comment this line out to see all the groups<nl><tab><tab>  .having(func.count()>1)<nl><tab><tab>)","out":"SQLAlchemy: 2つのフィールドでグループ化し、日付でフィルタリングする方法"}
{"in":"import wx<nl><nl>def ask(parent=None, message='', default_value=''):<nl><tab> dlg = wx.TextEntryDialog(parent, message, defaultValue=default_value)<nl><tab> dlg.ShowModal()<nl><tab> result = dlg.GetValue()<nl><tab> dlg.Destroy()<nl><tab> return result<nl><nl># Initialize wx App<nl>app = wx.App()<nl>app.MainLoop()<nl><nl># Call Dialog<nl>x = ask(message = 'What is your name?')<nl>print 'Your name was', x","out":"wxPythonを使ってユーザーから入力を得る"}
{"in":"num = 0.1423<nl>print '%06.2f' %num","out":"Pythonで数値を先頭ゼロと小数点以下固定で書式設定する。"}
{"in":"def flatten_list(l):<nl><tab> new_l = []<nl><tab> for item in l:<nl><tab><tab>  if type(item) == type([]):<nl><tab><tab><tab><tab>new_l += flatten_list(item)<nl><tab><tab>  else:<nl><tab><tab><tab><tab>new_l.append(item)<nl><tab> return new_l","out":"Python未知の多次元配列を1次元配列に格納する方法"}
{"in":"import subprocess<nl>p=subprocess.Popen(args, stdout=subprocess.PIPE)<nl>print p.communicate()[0]","out":"Pythonで、os.systemの代わりにsubprocessを使うにはどうしたらいいですか？"}
{"in":"vector<Points> contour","out":"動いている2値画像のドットの中心を求める方法"}
{"in":"numbers = []<nl><nl>while len(numbers) < 5:<nl><tab> number = raw_input('Please input 5 numbers: ')<nl><tab> if number.isdigit():<nl><tab><tab>  numbers.append(int(number)) #may want to use float here instead of int<nl><tab> else:<nl><tab><tab>  print \"You entered something that isn't a number\"<nl><nl>search = raw_input('Search for the numer: ')<nl>if int(search) in numbers:<nl><tab> print \"Found it!\"","out":"ユーザーから入力されたリストをPythonで検索する。"}
{"in":"import pylab<nl><nl>my_labels = ['food', 'music', 'clothes']<nl><nl>fig = pylab.figure()<nl>fig.text(0.4,0.95,\"Consumption by Region\")<nl><nl>ax1 = fig.add_subplot(2,2,1)<nl>ax1.pie([1,2,3])<nl>ax1.text(0.6, 1, \"North West\")<nl><nl>ax2 = fig.add_subplot(2,2,2)<nl>ax2.pie([6,4,3])<nl>ax2.text(0.6, 1, \"North East\")<nl><nl>ax3 = fig.add_subplot(2,2,3)<nl>ax3.pie([1,4,3])<nl>ax3.text(0.6, 1, \"South West\")<nl><nl>ax4 = fig.add_subplot(2,2,4)<nl>ax4.pie([9,1,3])<nl>ax4.text(0.6, 1, \"South East\")<nl><nl>pylab.legend(my_labels, title=\"Legend\", loc=(-1.5,0.9))<nl><nl>pylab.show()","out":"サブプロットでラベルを表示しない"}
{"in":"from dateutil.parser import parse<nl>date = 'Thu, 14 Mar 2013 13:33:07 -0400'<nl>parse(date).strftime(\"%Y-%m-%d %H:%M:%S\")","out":"Pythonで文字列を変換してMySQL DBの日付列dateに挿入する。"}
{"in":"for i in hd_com.comment_message[1:500]:<nl><tab> fl=open('delete.txt','wb')","out":"Pythonで標準出力に印刷するが、ファイルに書き込めない。"}
{"in":"chart.data = [(20.5,32.4),(0.01, 0.01)]","out":"Python Repotrlab 垂直棒グラフのスペースの不一致"}
{"in":"import sys<nl>from PyQt4 import QtGui, uic<nl><nl>class TestGUI(QtGui.QMainWindow):<nl><tab> def __init__(self):<nl><tab><tab>  super(TestGUI, self).__init__()<nl><tab><tab>  uic.loadUi('TEST.ui', self)<nl><tab><tab>  self.actionAdd_Tab.triggered.connect(self.handleAddTab)<nl><nl><tab> def handleAddTab(self):<nl><tab><tab>  contents = QtGui.QWidget(self.tabWidget)<nl><tab><tab>  layout = QtGui.QVBoxLayout(contents)<nl><tab><tab>  # add other widgets to the contents layout here<nl><tab><tab>  # i.e. layout.addWidget(widget), etc<nl><tab><tab>  self.tabWidget.addTab(contents, 'Tab One')<nl><nl>if __name__ == '__main__':<nl><tab> app = QtGui.QApplication(sys.argv)<nl><tab> window = TestGUI()<nl><tab> window.show()<nl><tab> sys.exit(app.exec_())","out":"QTabWidgetに新しいタブを追加するPyQt4メニュー機能"}
{"in":"class MyObject( object ):<nl><tab> def __init__( self, args ):<nl><tab><tab>  pass # Something Expensive<nl><nl>class MyObjectFactory( object ):<nl><tab> def __init__( self ):<nl><tab><tab>  self.pool = {}<nl><tab> def makeMyObject( self, args ):<nl><tab><tab>  if args not in self.pool:<nl><tab><tab><tab><tab>self.pool[args] = MyObject( args )<nl><tab><tab>  return self.pool[args]","out":"同一の入力パラメータを持つオブジェクトを再作成しないクラスの作り方"}
{"in":"class Projet(object):<nl><nl><tab> def pathDirectory(self):<nl><tab><tab>  print \"- - in pathDirectory - -\"<nl><tab><tab>  self.pathDir= str(QFileDialog.getExistingDirectory(ui.pathTab1, 'Select Path','', QFileDialog.ShowDirsOnly))<nl><nl><tab> def goFunc(self):<nl><tab><tab>  print \"- - In goFunc - -\"<nl><tab><tab>  print self.pathDir<nl><nl>if __name__ == \"__main__\":<nl><tab> p = Projet()<nl><tab> p.pathDirectory()<nl><tab> p.goFunc()","out":"メソッド間の価値観の共有"}
{"in":"color_dict = { 'Allan':'red', 'Betty':'blue', 'Chris':'black', 'Diane':'green','Eugene':'purple' }<nl><nl>plt.scatter( data['a'], data['b'], color=[ color_dict[i] for i in data['c'] ] )","out":"文字列に対応した色を持つPythonの散布図"}
{"in":"df.loc[5:6,:] = df.loc[3:4,:].values","out":"Pandas Dataframe - 行と他の行が等しくなるように設定する"}
{"in":"def del_task(self, *args):<nl><tab> if self.task_list.adapter.selection:<nl><tab><tab>  selection = self.task_list.adapter.selection[0].text<nl><tab><tab>  self.task_list.adapter.data.remove(selection)<nl><tab><tab>  self.task_list._trigger_reset_populate()","out":"Python Kivy ListViewです：選択されたListItemButtonを削除する方法は？"}
{"in":"parent.list_child_properties()<nl>Gtk.ContainerClass.list_child_properties(parent)","out":"Gtk3 子ウィジェットを別のウィジェットに置き換える"}
{"in":"today = datetime.today()<nl>def get_data():<nl><tab> \"\"\" @return: [(student, followup), (student, followup), ...] \"\"\"<nl><tab> q = (session.query(Student) # get all students<nl><tab><tab>  .outerjoin(Followup, and_(Student.id == Followup.student_id, func.date(Followup.next_date)==today)) # @NOTE: check for today might need to be different depending on the database used. Current code should work for mysql<nl><tab><tab>  .options(contains_eager(Student.followup)) # let SA know that \"followup\" is loaded (line above)<nl><tab><tab>  .filter(Student.status == \"active\") # filter only for active students<nl><tab><tab>  )<nl><tab> res = [(s, s.followup) for s in q.all()]<nl><tab> return res<nl><nl>data = get_data()<nl><nl># debug<nl>for s, f in data:<nl><tab> print s.name<nl><tab> for _f in f:<nl><tab><tab>  print \"  \", _f","out":"各ユーザーの今日の通知を取得するための最良の方法"}
{"in":"import smtplib<nl>from smtplib import SMTP<tab><tab> <nl><nl>try:<nl><tab> sender = 'xxx@gmail.com'<nl><tab> receivers = ['xxx.com']<nl><nl><tab> message = \"\"\" this message sending from python<nl><tab> for testing purpose<nl><tab> \"\"\"<nl><tab> smtpObj = smtplib.SMTP(host='smtp.gmail.com', port=587)<nl><tab> smtpObj.ehlo()<nl><tab> smtpObj.starttls()<nl><tab> smtpObj.ehlo()<nl><tab> smtpObj.login('xxx','xxx')<nl><tab> smtpObj.sendmail(sender, receivers, message)<nl><tab> smtpObj.quit()<nl><tab> print \"Successfully sent email\"<nl>except smtplib.SMTPException,error:<nl><tab> print str(error)<nl><tab> print \"Error: unable to send email\"","out":"pythonからメールを送ろうとする"}
{"in":"from datetime import datetime, timedelta<nl>import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>size = 10<nl><nl># List of Dates<nl>base = datetime.now()<nl>date_list = [base - timedelta(weeks=x) for x in range(0, size)]<nl>date_list = [i.strftime(\"%Y %m %d\") for i in date_list]<nl><nl>b = np.random.random([size,size])<nl>plt.figure(2)<nl>c = np.arange(0,size)<nl>plt.pcolormesh(c,c,b)<nl>plt.xticks(c, date_list, rotation='vertical')<nl>plt.subplots_adjust(bottom=0.2)<nl>plt.show()","out":"Pythonです：pcolormeshでX軸にdatetimeを追加する方法"}
{"in":"from django.db.models import Sum","out":"django は where 節に基づいてカラムの合計を取得します。"}
{"in":"import os<nl>count = 0<nl>for doc in os.listdir('C:\\Users\\B\\Desktop\\<nl>ewdocs'):<nl><tab> if doc.endswith(\".txt\"):<nl><tab><tab>  with open(doc, 'r') as f:<nl><tab><tab><tab><tab>single_line = ''.join([line for line in f])<nl><tab><tab><tab><tab>single_space = ' '.join(single_line.split())<nl><nl><tab><tab>  with open(\"new_doc{}.txt\".format(count) , \"w\") as doc:<nl><tab><tab><tab><tab>doc.write(single_space)<nl><tab><tab>  count += 1<nl><tab> else:<nl><tab><tab>  continue","out":"複数行のテキストドキュメントを1つにまとめる"}
{"in":"import re<nl>with open(\"in1.txt\") as f:<nl><tab>lines = f.read()<nl><tab>m = re.sub(r'(?s)my _car_.*?(?=my|$)', '', lines)<nl><tab>m = re.sub(r'<nl>+', '<nl>', m)<nl><tab>print m,","out":"ファイルの正規表現に一致する部分を削除する"}
{"in":"import xml.etree.ElementTree as ET<nl>def to_parseable(tree):<nl><tab> t = ET.tostring(tree)<nl><tab> t = t.lower()<nl><tab> return ET.fromstring(t)","out":"PythonのElementTreeで大文字小文字を区別しない検索をする"}
{"in":"class ExceptionLoggingMiddleware(object):<nl><tab> def process_exception(self, request, exception):<nl><tab><tab>  import traceback<nl><tab><tab>  print traceback.format_exc()","out":"Django で manage.py runserver を使っているときにエラーが発生したらスタックトレースを stdout に出力する。"}
{"in":"diff = cv2.matchTemplate(img1, img2, cv2.TM_CCORR_NORMED)<nl>x, y = np.unravel_index(np.argmax(diff), diff.shape)","out":"SimpleCVで別の画像の中にある画像を探す"}
{"in":"import requests,  bs4<nl><nl>headers = {<nl><tab> \"User-Agent\":<nl><tab><tab>  \"Mozilla\/5.0 (Windows NT 6.3; WOW64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/44.0.2403.157 Safari\/537.36\"<nl>}<nl>payload = {'as_epq': 'James Clark', 'tbs':'cdr:1,cd_min:01\/01\/2015,cd_max:01\/01\/2015', 'tbm':'nws'}<nl>r = requests.get(\"https:\/\/www.google.com\/search\", params=payload, headers=headers)<nl><nl>soup = bs4.BeautifulSoup(r.content, 'html5lib')<nl>print soup.find(id='resultStats').text","out":"Pythonを使ったGoogle Scrapeで結果の数が違う"}
{"in":"return all(c in lettersGuessed for c in secretWord)","out":"pythonでリスト内部をループする"}
{"in":"import os<nl><nl>os.system(\"xterm -e 'your command'\")","out":"別のコンソールウィンドウでプロセスを開始する"}
{"in":"from django.core.urlresolvers import reverse<nl>twitterpath = reverse('social:begin', args=('twitter',))","out":"テンプレートで使用するpythonソーシャル認証の値にアクセスする方法"}
{"in":"t = threading.Timer(30.0, unban)<nl>t.start() # after 30 seconds, unban will be run","out":"Pythonの遅延ループを実行するのに一番苦労しない方法"}
{"in":"links = []<nl>for i in urls:<nl><tab> try:<nl><tab><tab>  data = urllib2.urlopen(str(i)).read()<nl><tab><tab>  data = json.loads(data)<nl><tab><tab>  links.append(url)<nl><tab> except:<nl><tab><tab>  pass","out":"forループで要素をフィルタリングする方法は？"}
{"in":"WSGIApplicationGroup %{GLOBAL}","out":"Apache + mod_wsgi の Flask アプリで gevent を実行すると NotImplementedError が発生するのはなぜですか？"}
{"in":"import urllib2<nl><nl>manager = urllib2.HTTPPasswordMgrWithDefaultRealm()<nl>manager.add_password(None, 'https:\/\/app.streamsend.com\/emails', 'login', 'key')<nl>handler = urllib2.HTTPBasicAuthHandler(manager)<nl><nl>director = urllib2.OpenerDirector()<nl>director.add_handler(handler)<nl><nl>req = urllib2.Request('https:\/\/app.streamsend.com\/emails', headers = {'Accept' : 'application\/xml'})<nl><nl>result = director.open(req)<nl># result.read() will contain the data<nl># result.info() will contain the HTTP headers<nl><nl># To get say the content-length header<nl>length = result.info()['Content-Length']","out":"PythonによるCURLの代替"}
{"in":"data[col_name] = a_col.apply(lambda x: x if isinstance(x, datetime.datetime) <nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>and not isinstance(x, pd.tslib.NaTType) else epoch)","out":"PandasのNaTをEpochに置き換える。"}
{"in":"# some code left out for brevity<nl><nl>class InputsModelExtendedForm(ModelForm):<nl><tab> class Meta:<nl><tab><tab>  model = InputsModelExtended<nl><nl><tab> def __init__(self, *args, **kwargs):<nl><tab><tab>  service_choices = kwargs.pop('service_choices')<nl><tab><tab>  super(InputsModelExtendedForm, self).__init__(*args, **kwargs)<nl><nl><tab><tab>  if service_choices:<nl><tab><tab><tab><tab>self.fields['service'] = forms.ChoiceField(choices=service_choices,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> required=False)<nl><nl># example usage:<nl><nl>def my_view(request):<nl><tab> service_choices = (<nl><tab><tab>  ('Foo', 'Foo',),<nl><tab><tab>  ('Bar', 'Bar',),<nl><tab><tab>  ('Baz', 'Baz',),<nl><tab> )<nl><nl><tab> form = InputsModelExtendedForm(request.POST or None, service_choices=service_choices)","out":"django modelformのセレクトセットを変更する"}
{"in":"text.lower()","out":"文字を小文字に変換する"}
{"in":"MyModel.objects.create(**{key: value for key, value in data_dict.iteritems() if key in MyModel._meta.get_all_field_names()})","out":"Django の object.create メソッドに、余計な要素を含む辞書を渡すことは可能でしょうか？"}
{"in":"class Example(Document):<nl><tab> pass<nl><nl>db = Example._get_db()<nl>for collection_name in db.collection_names():<nl><tab> print collection_name","out":"mongoengineでデータベースのコレクションを反復処理するにはどうすればよいですか？"}
{"in":"x1=np.linspace(0,np.pi)<nl>y1=np.sin(x1)<nl><nl>y2=np.sin(x1)<nl><nl>rect1=[0.1,0.1,0.8,0.8]<nl>ax1=plt.axes(rect,frameon=True)<nl>ax1.yaxis.tick_left()<nl>plt.plot(x1,y1)<nl>plt.ylabel('axis 1')<nl>plt.xlabel('x')<nl><nl><nl>rect2=[0.1,1,0.2,0.2]<nl>ax2=plt.axes(rect2,frameon=False)<nl>ax2.yaxis.tick_right()<nl>ax2.plot(x1,y2)<nl><nl>percent = 0.2<nl>xp = percent*np.pi<nl>yp = np.sin(xp)<nl>ax2.plot(xp,yp, marker='o')<nl><nl>ax2.yaxis.set_label_position('right')<nl>ax2.axes.get_xaxis().set_visible(False)<nl>ax2.axes.get_yaxis().set_visible(False)<nl><nl>ax2.annotate('%d Percent' %(percent*100), xy=(0.5, 0.))<nl><nl><nl>rect3=[0.3,1,0.2,0.2]<nl>ax3=plt.axes(rect3,frameon=False)<nl>ax3.yaxis.tick_right()<nl>ax3.plot(x1,y2)<nl><nl>percent = 0.4<nl>xp = percent*np.pi<nl>yp = np.sin(xp)<nl>ax3.plot(xp,yp, marker='o')<nl><nl>ax3.yaxis.set_label_position('right')<nl>ax3.axes.get_xaxis().set_visible(False)<nl>ax3.axes.get_yaxis().set_visible(False)<nl><nl>ax3.annotate('%d Percent' %(percent*100), xy=(0.5, 0.))<nl><nl><nl><nl><nl>plt.show()","out":"matplotlib でサブプロット内に pdf 画像を使用する。"}
{"in":"ok_words = set([\"a\", \"b\", \"c\", \"e\"])<nl><nl>def filter_words(words):<nl><tab> return [word for word in words if word in ok_words]","out":"Pythonで辞書にテキストを通す"}
{"in":"dist([4.0, 7.0], [2.0, 9.0]) - 2.0","out":"点［4，7］と、［2，9］を中心とする半径2の円上の最も近い点との間の距離は？4桁以上の精度で答えよ"}
{"in":"self.request.GET.getlist('pax')","out":"リクエストに含まれる複数の同じキーワードパラメータから値を取得する"}
{"in":"colors = weights.apply(lambda x: (0,0,1,x)).tolist()","out":"Python matplotlib：散布図中の各点に異なる不透明度を割り当てるには？"}
{"in":"df2 = df[((df.index.month == 6) & (df.index.day > 20)) | (df.index.month > 6)]","out":"pandas python select all data after day of year."}
{"in":"import os<nl><nl>zfName = 'simonsZip.kmz'<nl>foo = zipfile.ZipFile(zfName, 'w')<nl>foo.write(\"temp.kml\")<nl># Adding files from directory 'files'<nl>for root, dirs, files in os.walk('files'):<nl><tab> for f in files:<nl><tab><tab>  foo.write(os.path.join(root, f))<nl>foo.close()<nl>os.remove(\"temp.kml\")","out":"pythonでフォルダやファイルをzipにする方法は？"}
{"in":"file.info(\"\/etc\")<nl>##<tab><tab>size isdir mode<tab><tab><tab><tab><tab>mtime<tab><tab><tab><tab><tab>ctime<nl>## \/etc 3638  TRUE  755 2015-07-22 10:51:58 2015-07-22 10:51:58<nl>##<tab><tab><tab><tab><tab><tab>  atime uid gid uname grname<nl>## \/etc 2015-08-01 08:11:43<tab>0<tab>0  root  wheel<nl><nl>file.info(\"\/etc\/hosts\")<nl>##<tab><tab><tab><tab>  size isdir mode<tab><tab><tab><tab><tab>mtime<tab><tab><tab><tab><tab>ctime<nl>## \/etc\/hosts 787448 FALSE  644 2015-07-19 17:34:59 2015-07-19 17:34:59<nl>##<tab><tab><tab><tab><tab><tab><tab><tab>  atime uid gid uname grname<nl>## \/etc\/hosts 2015-08-06 12:30:26<tab>0<tab>0  root  wheel<nl><nl>file_test(\"-f\", \"\/etc\/hosts\") # is a file and not a dir<nl>## [1] TRUE<nl><nl>file_test(\"-d\", \"\/etc\") # is a dir<nl>## [1] TRUE<nl><nl>dir.exists(\"\/etc\") # R 3.2.0+<nl>## [1] TRUE<nl><nl>file.exists(\"\/etc\/hosts\")<nl>## [1] TRUE<nl><nl>Sys.readlink(\"\/etc\") # will return something if it's a symbolic link<nl>## [1] \"private\/etc\"<nl><nl>Sys.readlink(\"\/tmp\")<nl>## [1] \"private\/tmp\"<nl><nl>Sys.readlink(\"\/bin\") # or \"\" if not<nl>## [1] \"\"","out":"Rで引数がファイルかディレクトリかを確認する方法は？"}
{"in":"import os, sys<nl><nl>dataDir = 'fullpath of directory with images'<nl>os.chdir(dataDir)<nl><nl><nl>os.system('SETLOCAL EnableDelayedExpansion')<nl>#This is the path of the imagemagick installation convert command.  <nl>#The invalid parameter I was  getting was because the computer was trying to <nl>#use a different convert command.  This code sets convert as a different<nl>#variable and then calls that new variable as the convert command.  <nl>os.system('SET IMCONV=\"C:\\Program Files\\ImageMagick-6.9.1-Q16\\Convert\"')<nl>os.system('%IMCONV% *.jpg animated.gif')","out":"ImageMagickを使用してpythonでgifを作成する。"}
{"in":"def get_brand_count(filename, brand):<nl><tab> return int(subprocess.check_output('''zcat %s |  '''<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>'''awk 'BEGIN {FS=\";\"};{print $6}' | '''<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>'''grep -i %r | wc -l''' %<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>(filename, brand), shell=True))<nl><nl>brands = 'hummer', 'bmw', 'audi'<nl>with open('results.csv', 'wb') as csvfile:<nl><tab> csvwriter = csv.writer(csvfile)<nl><tab> csvwriter.writerow(brands)  # csv header row (if desired)<nl><tab> for myfilename in glob.iglob('*.gz'):<nl><tab><tab>  csvwriter.writerow([get_brand_count(myfilename, brand)<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>  for brand in brands])","out":"python - ループ中に csv ファイルに書き込む方法"}
{"in":"class History(Article, IHasAttachments):<nl><tab> date = DateField(default=datetime.date.today)","out":"djangoのモデル継承と管理者アプリケーション"}
{"in":"users = session.query(User).all()<nl>for user in users:<nl><tab> users_classes = ','.join([c.class_name for c in user.classes])<nl><tab> print(\"{0} is {1} in {2}\".format(user.user_firstName,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> user.role.role_name,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab> users_classes))","out":"Flask-SQLAlchemyで多対多を選択する。"}
{"in":"thumbor_kwargs = {}<nl>thumbor_kwargs['image_url'] = 'localhost:8000\/media\/image.jpg'<nl>thumbor_kwargs['width'] = 80<nl>thumbor_kwargs['filters'] = [<nl><tab> \"quality(80)\",<nl><tab> \"grayscale()\",<nl>]","out":"Thumborフィルター効果のかけ方"}
{"in":"import copy<nl>import types<nl><nl>def _deepcopy_method(x, memo):<nl><tab> return type(x)(x.im_func, copy.deepcopy(x.im_self, memo), x.im_class)<nl>copy._deepcopy_dispatch[types.MethodType] = _deepcopy_method","out":"Pythonのクラスでメソッドのリストを使用することができません。回避策は？"}
{"in":"import os, zipfile<nl><nl>dir_name = 'C:\\\\SomeDirectory'<nl>extension = \".zip\"<nl><nl>os.chdir(dir_name) # change directory from working dir to dir with files<nl><nl>for item in os.listdir(dir_name): # loop through items in dir<nl><tab> if item.endswith(extension): # check for \".zip\" extension<nl><tab><tab>  file_name = os.path.abspath(item) # get full path of files<nl><tab><tab>  zip_ref = zipfile.ZipFile(file_name) # create zipfile object<nl><tab><tab>  zip_ref.extractall(dir_name) # extract file to dir<nl><tab><tab>  zip_ref.close() # close file<nl><tab><tab>  os.remove(file_name) # delete zipped file","out":"Python 2.7.5を使用して、フォルダ内のすべてのzipファイルを同じフォルダに解凍する。"}
{"in":"xpath = \"\/\/table[2]\/tr\/td\/\/text()[re:match(., '\\\\S')]\"<nl><nl>filtered_html = tree.xpath(<nl><tab> xpath,<nl><tab> namespaces={\"re\": \"http:\/\/exslt.org\/regular-expressions\"})","out":"複数のテーブルを使ったタイムテーブルのWebスクレイピング（Python）"}
{"in":"import os<nl>import subprocess<nl><nl>cwd = os.getcwd()<nl><nl>for i in os.listdir(cwd):<nl><tab> if i.endswith('.ttp'):<nl><tab><tab>  o = i + \"-out\"<nl><tab><tab>  p = subprocess.call([\"program_name\", \"-input\", i, \"-output\", o])","out":"pythonからpython以外のプログラムを呼び出す？"}
{"in":"counter = len(f.readlines())","out":"ファイルの行数を印刷・返送するには？"}
{"in":"def test_check_url(self):<nl><tab> url_a = \"http:\/\/audaxing.wordpress.com\"<nl><tab> dummy_event = self.generate_dummy_auction_event(url_a)<nl><tab> with patch(\"sys.stdin\") as mock_stdin:<nl><tab><tab>  MaddUrl = Mock()<nl><tab><tab>  Minit = Mock(return_value=None)<nl><tab><tab>  with patch('Foo.crawler.crawlerapp.CrawlerApp.__init__', Minit, create=True):<nl><tab><tab><tab><tab>with patch('Foo.crawler.crawlerapp.CrawlerApp.addUrl', MaddUrl, create=True):<nl><nl><tab><tab><tab><tab><tab> ca = Foo.crawler.crawlerapp.CrawlerApp(1)<nl><tab><tab><tab><tab><tab> mock_stdin.read.return_value = EventDataFrame(1, \"TOKEN1\", dummy_event.SerializeToString()).to_bytes()<nl><tab><tab><tab><tab><tab> ca._running = True<nl><tab><tab><tab><tab><tab> input_thread = threading.Thread(target=ca.inputStreamThread)<nl><tab><tab><tab><tab><tab> input_thread.start()<nl><tab><tab><tab><tab><tab> time.sleep(0.5)<nl><tab><tab><tab><tab><tab> ca._running = False<nl><tab> MaddUrl.assert_called_with(url_a)","out":"Objectのメソッドをモックしようとすると「AttributeError」が発生する。"}
{"in":"l = [35,53,[525,6743],64,63,[743,754,757]]<nl><nl>def flatten(xs):<nl><tab> result = []<nl><tab> if isinstance(xs, (list, tuple)):<nl><tab><tab>  for x in xs:<nl><tab><tab><tab><tab>result.extend(flatten(x))<nl><tab> else:<nl><tab><tab>  result.append(xs)<nl><tab> return result<nl><nl>print flatten(l)","out":"pythonでhetrogenous list of listを1つのリストにフラット化する方法は？"}
{"in":"urls = [ user['url'] for user in loadmain ]","out":"TypeError: リストのインデックスは整数でなければならず、JSONの場合はstrではない"}
{"in":"re.findall('ABC-[0-9]+', string)","out":"Python findall regex"}
{"in":"class Alien(object):<nl><tab> def __init__(self):<nl><tab><tab>  self.health = 5<nl><tab> def do_damage(self, amount):<nl><tab><tab>  self.health -= amount","out":"新しい属性を作ることなく値を減らす簡単な方法？"}
{"in":"import string<nl><nl>def func(str1, str2):<nl><tab> s1 = set(str1)<nl><tab> s2 = set(str2)<nl><tab> # requests are ambiguous \"contained in both strings\" can be either interpreted as intersections or union (i chose intersection)<nl><tab> uni = s1.union(s2)<nl><tab> letters_in_both_strings = [item for item in s1.intersection(s2) if item.isalpha()]<nl><tab> non_letters_in_any_string = [item for item in uni if not item.isalpha()]<nl><tab> all_letters = set(string.ascii_uppercase + string.ascii_lowercase)<nl><tab> return letters_in_both_strings, all_letters.difference(uni), non_letters_in_any_string<nl><nl>str1 = input(\"Enter 1st string:\")<nl>str2 = input(\"Enter 2nd string:\")<nl>a, b, c = func(str1, str2)<nl>print(\"|\" + \"\".join(a) + \"|<nl>|\" + \"\".join(b) + \"|<nl>|\" + \"\".join(c) + \"|<nl>\")","out":"pythonでセットを使って2つの文字列から共通の文字を見つける"}
{"in":"T_g.append([x for x in rootss(coeff) if np.isreal(x) and x > 0])","out":"配列の中から本当の正の値だけを残す"}
{"in":"from nltk.corpus.reader import XMLCorpusReader<nl>reader = XMLCorpusReader(dir, file)","out":"NLTKでスペイン語ワードネットを使うには？"}
{"in":"def retrive(directory, a_regex):<nl><tab> for filename in glob.glob(os.path.join(directory, '*.txt')):<nl><tab><tab>  with open(filename, 'r') as file:<nl><tab><tab><tab><tab>important_stuff = re.findall(a_regex, file.read(), re.S)<nl><tab><tab><tab><tab>my_list = [tuple([j.split()[0] for j in i]) for i in important_stuff]<nl><tab><tab><tab><tab># print my_list # old line<nl><tab><tab><tab><tab>print str(my_list).strip('[]') + filename.split('\/')[-1]<nl><nl><nl>lists_per_file = retrive(directory,regex_)","out":"pythonでディレクトリから各ファイル名をリストで運ぶには？"}
{"in":"title = \"This is my title, there are many like it but this one is mine...\"<nl>self.headerItem().setText(0, title)","out":"作成されたツリービューのタイトルを変更するにはどうすればよいか"}
{"in":"vbox.pack_start(self.scrolledwindow)","out":"Python : gtk.TreeViewとgtk.Menuをトップレベルのgtk.Windowに格納する。"}
{"in":"a = tb.open_file(\"FGBS.h5\")<nl>table = a.root.quote.z4<nl>c = pd.DataFrame.from_records(table.read())","out":"Pytables のテーブルを pandas のデータフレームに読み込むにはどうすればよいですか？"}
{"in":"Stop.objects.filter(approved_ts__isnull=False).order_by('line')","out":"関連する別のモデルでクエリセットをグループ化する"}
{"in":"self.function = lambda *args: module1.f(*args)[0]","out":"関数を割り当て、最初の値を無視する"}
{"in":"def add_invoice(request):<nl><tab> InvoiceFormSet = inlineformset_factory(Invoice, InvoiceItem)<nl><tab> if request.POST:<nl><tab><tab>  invoiceForm = InvoiceForm(request.POST) <nl><tab><tab>  invoiceFormSet = InvoiceFormSet(request.POST)<nl><tab><tab>  if invoiceForm.is_valid() and invoiceFormSet.is_valid():<nl><tab><tab><tab><tab>invoice = invoiceForm.save()<nl><tab><tab><tab><tab>invoiceItems = invoiceFormSet.save(commit=False)<nl><tab><tab><tab><tab>for invoiceItem in invoiceItems:<nl><tab><tab><tab><tab><tab> invoiceItem.invoice = invoice<nl><tab><tab><tab><tab><tab> invoiceItem.save()<nl><tab><tab><tab><tab>return redirect('show_invoice', invoice_id=invoice.id)<nl><tab> else:<nl><tab><tab>  invoiceForm = InvoiceForm()<nl><tab><tab>  invoiceFormSet = InvoiceFormSet()<nl><tab> context_data = {<nl><tab><tab><tab><tab>'invoiceForm': invoiceForm,<nl><tab><tab><tab><tab>'invoiceFormSet': invoiceFormSet,<nl><tab><tab><tab><tab>}<nl><tab> return render(request, 'add_invoice.html', context_data)","out":"複数の子モデルを持つModelForm"}
{"in":"import re<nl><nl>def get_id(toParse):<nl><tab> return re.search('id(\\d+)', toParse).groups()[0]","out":"Pythonを使ってiTunesのURLから簡単にIDを抽出する方法"}
{"in":"add_signal_watch_full()","out":"GStreamerバスがNoneメッセージを送信"}
{"in":"import subprocess<nl>import locale<nl><nl>encoding = locale.getdefaultlocale()[1]<nl>proc = subprocess.Popen([\"ping\", \"123.123.123.123\"], stdout=subprocess.PIPE)<nl>out = proc.communicate()[0]<nl>if 'Request timed out' in out.decode(encoding):<nl><tab> print 'the host is down'<nl>else: <nl><tab> print 'the host is up'","out":"出力が何であるかを検出し、そこからif文を実行する方法は？"}
{"in":"import random<nl><nl>def insert_spaces(s):<nl><tab> s = list(s)<nl><tab> for i in xrange(len(s)-1):<nl><tab><tab>  while random.randrange(2):<nl><tab><tab><tab><tab>s[i] = s[i] + ' '<nl><tab> return ''.join(s)","out":"既存の文字列のランダムな位置にスペース文字を挿入する pythonic な方法はありますか？"}
{"in":"def filtering(a_list):<nl><tab> results = []<nl><tab> for i, item in enumerate(a_list):<nl><tab><tab>  if re.search(r'\\d{0,1}\\s+Contacts;\\s*', item) is not None:<nl><tab><tab><tab><tab>results.extend(a_list[i+1:i+6])","out":"正規表現で特定の一致を得た後、リストからN個の値を切り離す。"}
{"in":"f = open(\"text.txt\", \"rb\")<nl>s = f.readlines()<nl>f.close()<nl>f = open(\"newtext.txt\", \"wb\")<nl>s.reverse()<nl>for item in s:<nl>  print>>f, s<nl>f.close()","out":"テキストファイルから行を読み込み、反転して新しいテキストファイルに保存する。"}
{"in":"logger = logging.getLogger(__name__)","out":"Pythonモジュールからカスタマイズ可能なロギングを可能にするためのガイドラインは？"}
{"in":"xls = pd.ExcelFile('path_to_file.xls')<nl>df1 = xls.parse('Sheet1')<nl>df2 = xls.parse('Sheet2')","out":"Pandasを使用して、同じワークブックの複数のワークシートに対してpd.read_excel()を実行する。"}
{"in":"#!\/usr\/bin\/python<nl>from multiprocessing import Process,Queue<nl>import random<nl>import time<nl><nl>def printrand():<nl><tab>#Checks whether Queue is empty and runs<nl><tab>while q.empty():<nl><tab><tab>rand = random.choice(range(1,100))<nl><tab><tab>time.sleep(1)<nl><tab><tab>print rand<nl><nl><nl>if __name__ == \"__main__\":<nl><tab>#Queue is a data structure used to communicate between process <nl><tab>q = Queue()<nl><tab>#creating the process<nl><tab>p = Process(target=printrand)<nl><tab>#starting the process<nl><tab>p.start()<nl><tab>while True:<nl><tab><tab>ip = raw_input(\"Write something: \")<nl><tab><tab>#if user enters stop the while loop breaks<nl><tab><tab>if ip==\"stop\":<nl><tab><tab><tab>#Populating the queue so that printramd can read and quit the loop<nl><tab><tab><tab>q.put(ip)<nl><tab><tab><tab>break<nl><tab>#Block the calling thread until the process whose join() <nl><tab>#method is called terminates or until the optional timeout occurs.<nl><tab>p.join()","out":"Python - 2つのコマンドを同時に実行する"}
{"in":"from datetime import datetime, timedelta<nl>now = datetime.now()<nl>now = now - timedelta(minutes = now.minute % 15, seconds = now.second, microseconds = now.microsecond )","out":"pythonで現在の時間間隔を検索しますか？"}
{"in":"while True:<nl><tab> new = Cell(\"A1\").value<nl><tab> if static != new:<nl><tab><tab>  CellRange(\"C2:E4\").clear()<nl><tab><tab>  Cell(\"C2\").table = {\"mamposteria\": data1,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"moretero\": data2,<nl><tab><tab><tab><tab><tab><tab><tab><tab><tab> \"estructura\": data3}[new]<nl><tab><tab>  static = new","out":"Datanitroを使ったインタラクティブシート"}
{"in":"import re<nl><nl>d = {}<nl><nl>with open('data', 'r') as f:<nl><nl><tab> for line in f:<nl><nl><tab><tab>  line =<tab>re.sub('\\s', '', line)<nl><nl><tab><tab>  key, value = line.split('=')<nl><nl><tab><tab>  d[key] = value<nl><nl>for el in d.items():<nl><nl><tab> print(el)","out":"Pythonです：テキストファイルのデータを辞書に変換する方法は？"}
{"in":"df = pd.concat([DataFrame({'M': [1, 2], 'F': [2, 5]}), \\<nl><tab><tab><tab><tab><tab> DataFrame({'M': [1, 5], 'F': [2, 7]})], \\<nl><tab><tab><tab><tab><tab> axis=1, keys=['Completed', 'Not Completed'])<nl><nl>df.index = ['A', 'B']<nl><nl>df.index.name = 'Name'","out":"Pandas データフレーム列構造"}
{"in":"class N:<nl><tab> def __init__(self):<nl><tab><tab>  self.s = []<nl><tab> def add(self,u):<nl><tab><tab>  self.s.append(u)<nl><tab> def check(self):<nl><tab><tab>  if sorted(self.s) == True:<nl><tab><tab><tab><tab>print \"List is sorted\"<nl><tab><tab>  else:<nl><tab><tab><tab><tab>print \"Not sorted but it will sort now\"<nl><tab><tab><tab><tab>return sorted(self.s)","out":"条件付きでキューを初期化する"}
{"in":"if __name__ == \"__main__\":<nl><tab> import traceback<nl><tab> from raven import Client<nl><tab> client = Client('requests+http:\/\/XXKEYXX@sentry.yourserver.com\/sentry\/1')<nl><tab> try:<nl><tab><tab>  YourApp().run()<nl><tab> except:<nl><tab><tab>  traceback.print_exc()<nl><tab><tab>  ident = client.get_ident(client.captureException())<nl><tab><tab>  print \"Exception caught; reference is %s\" % ident","out":"kivy-clientのクラッシュログを取得してサーバーに送信するにはどうすればよいですか？"}
{"in":"image = load_image(\"\/path\/to\/image\")[:,:,0]","out":"位相相関による並進・回転（Python"}
{"in":"import subprocess<nl>process = subprocess.Popen([\"C:\\Users\\Ben\\Desktop\\youtube-dl\\youtube-dl.exe\", \"--max-quality\", \"FORMAT\", \"--extract-audio\", \"songUrl\"], shell=True, stdout = subprocess.PIPE)<nl><nl>while process.poll() is None:<nl><tab> result = process.stdout.read()<nl><tab> # do some calculations for percentage done","out":"python: コマンドが終了する前にcheck_outputからレスポンスを取得する。"}
{"in":"class Tag(models.Model):<nl><tab> test_case_counter = models.IntegerField(default=0)<nl><tab> my_date_field = models.DateField(auto_now=True,auto_add=True)<nl><nl><tab> class Meta: # notice indentation<nl><tab><tab>  ordering = ['my_date_field']<nl><tab><tab>  app_label = 'project'","out":"ソート関数の書き方"}
{"in":"import csv<nl><nl>result={}<nl>with open('\/tmp\/test.csv','r') as f:<nl><tab> red=csv.DictReader(f)<nl><tab> for d in red:<nl><tab><tab>  result.setdefault(d['team'],[]).append(d['bldg'])<nl><nl>#results={'1': ['1450'], '3': ['204', '250', '1437'], '2': ['1440']}","out":"2列のCSVを1列目をキーとしてdictとして読み込む。"}
{"in":"x=\"[python] how to [css]\"<nl>print re.findall(r\"(?<=\\[)[^\\]]*(?=\\])\",x)<tab># this is the list you want<nl>print re.sub(r\"\\[[^\\]]*\\]\",\"\",x)<tab><tab><tab><tab> # this is the string you want","out":"括弧内単語による文字列の分割"}
{"in":"jrange = np.arange(self.max_j - j_start)<nl>joffset = np.round(jrange * discriminant).astype(int)<nl>i = np.arange(self.max_i)<nl><nl>for j in jrange:<nl><tab> new_i = i + joffset[j]<nl><tab> in_range = new_i < self.max_i<nl><tab> self.grid[new_i[in_range], j+j_start] = standard[i[in_range]]","out":"このコードをpythonのループからnumpyのベクトルに書き換えるにはどうすればよいでしょうか（パフォーマンス的に）。"}
{"in":"G.label(*x)","out":"変数にリストを割り当てる"}
{"in":"company_3 = [o.title() for o in company_2]","out":"このような複雑なforループを使わずに、このコードを繰り返し実行するにはどうしたらよいでしょうか。"}
{"in":"import numpy as np<nl>import matplotlib.pyplot as plt<nl><nl>data = \"\"\"100 0.0<nl><tab><tab>5 500.25<nl><tab><tab>2 10.0<nl><tab><tab>4 5.55<nl><tab><tab>3 950.0<nl><tab><tab>3 300.25\"\"\"<nl><nl>counts = []<nl>values = []<nl><nl>for line in data.split(\"<nl>\"):<nl><tab> x, y = line.split()<nl><tab> values.append(int(x))<nl><tab> counts.append(float(y))<nl><nl>plt.bar(counts, values)<nl><nl>plt.show()","out":"2列のデータからmatlibplot棒グラフを生成する"}
{"in":"sample_means = [x\/seg_len] + [mean(data[x:x+seg_len,i]) for i in range(4)]<nl>writer.writerow(sample_means)","out":"Pythonで書いたcsvファイルに間違った数値の形式が含まれている。"}
{"in":"Stmt<tab><tab><< ( selectToken +<nl><tab><tab><tab><tab><tab> columnNameList('columns') + <nl><tab><tab><tab><tab><tab> Optional( CaselessKeyword('where') + whereExpression('where'), \"\" ) +<nl><tab><tab><tab><tab><tab> Each( [ Optional( CaselessKeyword('group by') + columnNameList('group'), \"\" ).setDebug(),<nl><tab><tab><tab><tab><tab><tab><tab><tab>Optional( CaselessKeyword('order by') + columnNameList('order'), \"\" ).setDebug() ] <nl><tab><tab><tab><tab><tab><tab>  ) <nl><tab><tab><tab><tab>)","out":"pyparsing、Each、結果名"}
{"in":"class GraphElement:<nl><tab> def __init__(self, graph):<nl><tab><tab>  pass<nl><nl>class Edge(GraphElement, tuple):<nl><tab> def __new__(cls, graph, (source, target)):<nl><tab><tab>  return tuple.__new__(cls, (source, target))<nl><tab> def __init__(self, graph, (source, target)):<nl><tab><tab>  GraphElement.__init__(self, graph)","out":"Python：組み込み型からの継承"}
{"in":"import subprocess<nl>subprocess.call('nircmd.exe win close class \"CabinetWClass\"' , shell=True)","out":"pythonでwindows7の全フォルダを閉じる方法"}
{"in":"import unicodedata, re<nl><nl>all_chars = (unichr(i) for i in xrange(0x110000))<nl>control_chars = ''.join(c for c in all_chars if unicodedata.category(c) == 'Cc')<nl># or equivalently and much more efficiently<nl>control_chars = ''.join(map(unichr, range(0,32) + range(127,160)))<nl><nl>control_char_re = re.compile('[%s]' % re.escape(control_chars))<nl><nl>def remove_control_chars(s):<nl><tab> return control_char_re.sub('', s)","out":"pythonで文字列から印刷不可能な文字を除去する。"}
{"in":"import random <nl>score = 0<nl>ops = ['+','-','*']<nl><nl>for i in range(10):<nl><tab> num1 = random.randint(1,9)<nl><tab> num2 = random.randint(1,9)<nl><tab> operation = random.choice(ops)<nl><tab> print(num1)<nl><tab> print(operation)<nl><tab> print(num2)<nl><tab> user = int(input(\"\"))<nl><tab> if operation == \"+\":<nl><tab><tab>  answer = num1 + num2<nl><tab> elif operation == \"-\":<nl><tab><tab>  answer = num1 - num2<nl><tab> elif operation == \"*\":<nl><tab><tab>  answer = num1 * num2<nl><nl><tab> if user == answer:<nl><tab><tab>  print(\"correct\")<nl><tab><tab>  score = score + 1<nl><tab> else:<nl><tab><tab>  print(\"Incorrect\")<nl><tab> print (score)","out":"ランダムに生成された演算を10回繰り返すにはどうしたらいいでしょうか？これは今のところ私のコードです。"}
{"in":"import numpy as np<nl>import pylab as py<nl>from scipy.misc import factorial as fact<nl><nl>e = 0.65<nl><nl><nl>def E(M):<nl><tab> return (M + sum((1.0 \/ 2.0 ** (n - 1) *<nl><tab><tab><tab><tab><tab><tab><tab>sum((-1) ** (k) \/ (fact(n - k) * fact(k)) *<nl><tab><tab><tab><tab><tab><tab><tab><tab> (n - 2 * k) ** (n - 1) *<nl><tab><tab><tab><tab><tab><tab><tab><tab> np.sin((n - 2 * k) * M)<nl><tab><tab><tab><tab><tab><tab><tab><tab> for k in range(0, n \/ 2, 1))) * e ** n<nl><tab><tab><tab><tab><tab><tab><tab><tab> for n in range(1, 4, 1)))<nl><nl><nl>M = np.linspace(0, 2 * np.pi, 50000.0)<nl><nl>fig = py.figure()<nl>ax = fig.add_subplot(111)<nl>ax.plot(E(M), M)<nl>py.xlim((0, 2 * np.pi))<nl>py.ylim((0, 2 * np.pi))<nl>py.show()","out":"Pythonです：有限の点だけを取って無限級数をプロットする"}
{"in":"import module_1<nl><nl>class Card(object):<nl><tab> def __init__(self, suit, number):<nl><tab><tab>  self.suit = suit<nl><tab><tab>  self.number = number<nl><tab><tab>  self.index = [suit, number]<nl><nl>if __name__ == '__main__':<nl><tab> # Keep reference to the original Card class.<nl><tab> original_card = module_1.Card<nl><tab> # Replace with my custom Card class.<nl><tab> module_1.Card = Card  <nl><tab> new_deck = module_1.Deck()<nl><tab> print new_deck.cards[0]<nl><tab> # Restore.<nl><tab> module_1.Card = original_card","out":"pythonでクラス定義をオーバーライドするにはどうすればよいですか？"}
{"in":"text = \"Some sample (with parenthesis) text\"<nl>regEx = re.compile(r'([^\\(]*)\\([^\\)]*\\) *(.*)')<nl>m = regEx.match(text)<nl>while m:<nl>  text = m.group(1) + m.group(2)<nl>  m = regEx.match(text)<nl>print text","out":"括弧の中の内容や括弧そのものを段落から削除する"}
{"in":"shell=True","out":"すべてのパラメータをカンマで区切ることを要求するsubprocess.call"}
{"in":"driver.switch_to.window(driver.window_handles[-1])","out":"インデックスを知らずにWebDriverを新しく開いたChromeタブに移動させるにはどうすればよいですか？"}
{"in":"class mydeque(object):<nl><nl>  def __init__(self):<nl><tab> self.left = []<nl><tab> self.right = []<nl><nl>  def pushleft(self, v):<nl><tab> self.left.append(v)<nl><nl>  def pushright(self, v):<nl><tab> self.right.append(v)<nl><nl>  def popleft(self):<nl><tab> if not self.left:<nl><tab><tab>self.__fill_left()<nl><tab> return self.left.pop()<nl><nl>  def popright(self):<nl><tab> if not self.right:<nl><tab><tab>self.__fill_right()<nl><tab> return self.right.pop()<nl><nl>  def __len__(self):<nl><tab> return len(self.left) + len(self.right)<nl><nl>  def __getitem__(self, i):<nl><tab> if i >= len(self.left):<nl><tab><tab>return self.right[i-len(self.left)]<nl><tab> else:<nl><tab><tab>return self.left[-(i+1)]<nl><nl>  def __fill_right(self):<nl><tab> x = len(self.left)\/\/2<nl><tab> self.right.extend(self.left[0:x])<nl><tab> self.right.reverse()<nl><tab> del self.left[0:x]<nl><nl>  def __fill_left(self):<nl><tab> x = len(self.right)\/\/2<nl><tab> self.left.extend(self.right[0:x])<nl><tab> self.left.reverse()<nl><tab> del self.right[0:x]","out":"PythonによるO(1)インデクサブル整数デキュー"}
{"in":"import servo<nl>servo.move(int(argv[1]), int(argv[2]))","out":"Pythonスクリプトを特定のニーズに合わせて改良したいのですが、どうすればよいでしょうか？"}
{"in":"from matplotlib.pyplot import axes, pie, show, figure, subplot<nl>import matplotlib.gridspec as gridspec<nl><nl>fig = figure(facecolor = 'k')<nl><nl>ax1 = subplot(111, axisbg='k')<nl>ax1.pie([1,2,3,4])<nl>ax1.set_frame_on(True)<nl>ax1.spines['bottom'].set_color('w')<nl>ax1.spines['left'].set_color('w')<nl>ax1.spines['top'].set_color('w')<nl>ax1.spines['right'].set_color('w')","out":"Python matplotlib - 円グラフで白トゲ？"}
{"in":"from selenium import webdriver<nl>driver = webdriver.Firefox()<nl>print (driver.current_url)","out":"ブラウザから現在のURLを取得する python"}
{"in":"if x == \"No Event\":<nl><tab> # Handle no-event situation<nl><tab> pass<nl>elif x.startswith(\"P(\"):<nl><tab> # extract the number<nl><tab> s = x[2:].split()[0]<nl><tab> if \".\" in s:<nl><tab><tab>  # period present<nl><tab><tab>  result = float(s)<nl><tab> else:<nl><tab><tab>  # period not present<nl><tab><tab>  result = int(s)<nl>else:<nl><tab> # Handle unexpected input<nl><tab> pass","out":"Pythonでunicodeをフィルタリングして整数に変換する方法"}
{"in":"from suds.xsd.sxbasic import Import<nl><nl>file_url = 'file:\/\/<path to xml.xsd>'<nl>Import.bind('http:\/\/www.w3.org\/XML\/1998\/namespace', file_url)","out":"Sudがネットワーク経由でxml.xsdを取得するのを防ぐにはどうすればよいですか？"}
{"in":"from subprocess import call<nl>call([\"open\", \"hi.jpg\"])","out":"pythonにpngファイルを出力させたい。"}
{"in":"from turtle import *<nl>from time import sleep<nl>turtle = Turtle()<nl>screen = Screen()<nl>screen.onscreenclick(turtle.goto)<nl>turtle.getscreen()._root.mainloop()","out":"Python - クリックでマウスに亀を移動させる"}
{"in":"df.unstack(level=1)","out":"複数インデックスのPandas DataFrameを補間で埋める"}
{"in":"print(\"Hello World\")","out":"ターミナルからpython3.2を入力してprintを実行するとシンタックスエラーが発生する。"}
{"in":"def devisors_number(n):<nl><tab> result = 0<nl><tab> sqrt_n = int(n**0.5)<nl><nl><tab> for i in xrange(1, sqrt_n + 1):<nl><tab><tab>  if n % i == 0:<nl><tab><tab><tab><tab>result += 1<nl><nl><tab> result *= 2<nl><nl><tab> if sqrt_n**2 == n:<nl><tab><tab>  result -= 1<nl><nl><tab> return result<nl><nl><nl>n = int(raw_input(\"Enter a number: \"))<nl>d = devisors_number(n)<nl>print \"{0} has {1} devisors\".format(n, d)","out":"pythonでt個のテストケースに対して、数の除数の総数を求める。"}
{"in":"with open('r.0', 'r') as IRR, open('tt', 'w') as fd_w:<nl><tab> lines = []<nl><tab> for line in IRR:<nl><tab><tab>  line = line.strip()<nl><tab><tab>  if line:<nl><tab><tab><tab><tab>lines.append(line)<nl><tab><tab>  else:<nl><tab><tab><tab><tab># empty line, found a complete block, test for status line<nl><tab><tab><tab><tab>if 'status:<tab><tab><tab>ASSIGNED PA' in lines:<nl><tab><tab><tab><tab><tab> for line in lines:<nl><tab><tab><tab><tab><tab><tab>  fd_w.write(line + '<nl>')<nl><tab><tab><tab><tab>lines = []","out":"ファイルから行を書き込む"}
{"in":"mail.send_mail(sender=\"\",<nl><tab><tab><tab><tab><tab>  to=\"\",<nl><tab><tab><tab><tab><tab>  subject=\"\",<nl><tab><tab><tab><tab><tab>  body=\"\",<nl><tab><tab><tab><tab><tab>  html=\"your html\")","out":"google app engine mail APIで背景画像を設定する"}
{"in":"from itertools import combinations<nl><nl>def find_sum_in_list(numbers, target, comboSize):<nl><tab> results = []<nl><tab> for combo in combinations(numbers, comboSize):<nl><tab><tab>  if sum(combo) == target:<nl><tab><tab><tab><tab>results.append(combo)<nl><tab> return results<nl><nl><nl>if __name__ == \"__main__\":<nl><tab> numbers = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300]<nl><tab> total = 1200<nl><tab> comboSize = 5<nl><tab> print find_sum_in_list(numbers, total, comboSize)","out":"Pythonの再帰的な組み合わせを制限する方法は？"}
{"in":"dict((k, v) for (k, v) in somedict.iteritems() if not k.startswith('someprefix'))","out":"Pythonでdictから特定のキーを削除する最速の方法"}
{"in":"output_list = list(itertools.product(*test_list))","out":"Pythonは、範囲のリストの組み合わせを返す？"}
{"in":"import cv2<nl><nl>def crop(img):<nl><tab> face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')<nl><tab> sub_face = img<nl><nl><tab> faces = face_cascade.detectMultiScale(img, 1.1, 5)<nl><tab> for (x,y,w,h) in faces:<nl><tab><tab>  sub_face = img[y:y+h, x:x+w]<nl><nl><tab> return sub_face<nl><nl><nl>imageToCrop = cv2.imread('izz.jpg',0)<nl>croppedImage = crop(imageToCrop)<nl><nl>cv2.imshow('img',croppedImage)<nl>cv2.waitKey(0)<nl>cv2.destroyAllWindows()","out":"カメラで顔周りを撮影する"}
{"in":"foos = doc.find('foos')<nl>for foo in foos:<nl><tab> for text in foo.itertext():<nl><tab><tab>  print text.strip(),<nl><tab> print","out":"xmlタグのtext要素内にタグを抽出する。"}
{"in":"s_regs = sorted(regexes,key=lambda x:len(x))<nl>s_regs.reverse()<nl>regex = '|'.join(s_regs)","out":"Python regexの順序に関する問題"}
{"in":"import BeautifulSoup<nl><nl>doc = '''<html><head><title>Page title<\/title><\/head><body><p id=\"firstpara\" align=\"center\">This is <i>paragraph<\/i> <a onclick=\"\">one<\/a>.<p id=\"secondpara\" align=\"blah\">This is <i>paragraph<\/i> <b>two<\/b>.<\/html>'''<nl>soup = BeautifulSoup.BeautifulSoup(doc)<nl><nl>for tag in soup.recursiveChildGenerator():<nl><tab> if isinstance(tag,BeautifulSoup.Tag) and tag.name not in ('a'):<nl><tab><tab>  print(tag.string)<nl><tab> elif isinstance(tag,BeautifulSoup.Tag) and tag.name in ('a'):<nl><tab><tab>  print(tag)","out":"Python \/ BeautifulSoupを使って、HTMLの塊からアンカーやリンクを除くすべてのタグを取り除くことは可能でしょうか？"}
{"in":"class SoundManager:<nl><tab> sounds = [] # list of sound objects<nl><nl><tab> @staticmethod<nl><tab> def playRandom():<nl><tab><tab>  random.choice(SoundManager.sounds).play()","out":"ランダムな音を選択する Pygame"}
{"in":"cherrypy.server.socket_host = '192.168.0.147'<nl>cherrypy.server.socket_port = 8080","out":"CherryPyアプリをローカルにデプロイする方法"}
{"in":"df.index.is_monotonic","out":"Pandasのデータフレームのインデックスがソートされているかどうかを確認する方法"}
{"in":"import wx<nl><nl>class Frame(wx.Frame):<nl><tab> def __init__(self, title):<nl><tab><tab>  wx.Frame.__init__(self, None, title=title, size=(300,200))<nl><nl><tab><tab>  self.panel = wx.Panel(self)<nl><tab><tab>  box = wx.BoxSizer(wx.VERTICAL)<nl><tab><tab>  m_text = wx.StaticText(self.panel, -1, 'File Uploaded!')<nl><tab><tab>  m_text.SetSize(m_text.GetBestSize())<nl><nl><tab><tab>  box.Add(m_text, 0, wx.ALL, 10)<nl><tab><tab>  self.panel.SetSizer(box)<nl><tab><tab>  self.panel.Layout()<nl><nl><tab><tab>  self.timer = wx.Timer(self)<nl><tab><tab>  self.Bind(wx.EVT_TIMER, self.onClose, self.timer)<nl><tab><tab>  self.timer.Start(5000)<nl><nl><tab> def onClose(self, event):<nl><tab><tab>  self.Close()<nl><nl>app = wx.App(redirect=True)<nl>top = Frame('test')<nl>top.Show()<nl>app.MainLoop()","out":"テキストを含むウィンドウをポップアップ表示し、一定時間後に自動的に閉じる。"}
{"in":"plt.figure(1)<nl>plt.hist(trials, bins=2, align=\"mid\",<nl><tab><tab><tab>weights=np.zeros_like(trials) + 1. \/ len(trials))<nl><nl><nl># ------------------------------<nl># New lines to add tick marks as requested<nl>tick_locs = [0.25, 0.75]<nl>tick_lbls = ['0','1']<nl>plt.xticks(tick_locs, tick_lbls)<nl># ------------------------------<nl><nl>plt.ylim(0,1.0)<nl>plt.title(\"Bernoulli Distribution with p = \" + str(p))<nl>plt.xlabel(\"Outcome\")<nl>plt.ylabel(\"Probability\")<tab> <nl>plt.show()","out":"pyplotでビンを正しく表示する"}
{"in":"last_state = False<nl>while True:<nl><tab> x,y = win32api.GetCursorPos()<nl><tab> state = x < 0<nl><tab> if state == last_state:<nl><tab><tab>  continue<nl><tab> last_state = state<nl><tab> if state:<nl><tab><tab>  print(\"2\")<nl><tab> else:<nl><tab><tab>  print(\"1\")","out":"カーソル位置が特定のX値を超えたときにアクションを起こす"}
{"in":"\\\\{(.*)\\\\}","out":"中括弧の間をすべてハイライトするQRegEx"}
{"in":"def makeImage (triangle, largura, altura):<nl><tab> \"\"\"<nl><tab> triangle: receives a tuple in the form: x1, y1, x2, y2, x3, y3, R, G, B, A<nl><tab> largura: image weight<nl><tab> altura: image height<nl><nl><tab> returns: numPy array of the triangle composed final image<nl><tab> \"\"\"<nl><tab> back = Image.new('RGBA', (largura,altura), (0,0,0,0))<nl><tab> poly = Image.new('RGBA', (largura,altura))<nl><tab> pdraw = ImageDraw.Draw(poly)<nl><nl><tab> pdraw.polygon([1,2,3,4,5,6], fill=(255,0,0,127))<nl><tab> back.paste(poly,mask=poly)<nl><nl><tab> back = back.convert('RGB')<nl><tab> backArr = asarray(back)<nl><tab> #back.show()<nl><nl><tab> return backArr","out":"Matplotlibの図形をNumPyの配列に変換し、境界線\/フレーム\/軸をなくす"}
{"in":"res = service.data().ga().get(ids='ga:' + profile_id, start_date='2014-01-01', end_date=t, metrics='ga:sessions', dimensions='ga:browser',sort='-ga:sessions' , max_results='5' ).execute()","out":"Analytics reporting apiからディメンションデータを取得するにはどうすればよいですか？"}
{"in":"'''<nl>This is a multiline<nl>comment. I can type here whatever I want.<nl>'''","out":"pythonで複数行のコメント"}
{"in":"fd.seek(0)","out":"python ファイルへの書き込みで null 文字の前置きを行う。"}
{"in":"import win32file # Ensure you import the module.<nl><nl>file_handle = win32file.CreateFile('filename.txt', win32file.GENERIC_READ, win32file.FILE_SHARE_DELETE | win32file.FILE_SHARE_READ | win32file.FILE_SHARE_WRITE, None, win32file.OPEN_EXISTING, win32file.FILE_ATTRIBUTE_NORMAL, None)","out":"Pythonです：ロックを作成せずにファイルを開く"}
{"in":"import re<nl><nl>p = re.compile('\\d+(\\.\\d+)?')<nl><nl>a = raw_input('How much is 1 share in that company? ')<nl><nl>while p.match(a) == None:<nl><tab> print \"You need to write a number!<nl>\"<nl><tab> a = raw_input('How much is 1 share in that company? ')","out":"Python - 浮動小数点数に対してisdigitを使う？"}
{"in":"# for python 3.x use 'tkinter' rather than 'Tkinter'<nl>import Tkinter as tk<nl>import datetime<nl>import math<nl>MINUTE = 60<nl>HOUR = 60*MINUTE<nl>class App():<nl><tab> def __init__(self):<nl><tab><tab>  self.root = tk.Tk()<nl><tab><tab>  self.done_time=datetime.datetime.now() + datetime.timedelta(seconds=HOUR\/2) # half hour<nl><tab><tab>  self.label = tk.Label(text=\"\")<nl><tab><tab>  self.label.pack()<nl><tab><tab>  self.update_clock()<nl><tab><tab>  self.root.mainloop()<nl><nl><tab> def update_clock(self):<nl><tab><tab>  elapsed = self.done_time - datetime.datetime.now()<nl><tab><tab>  h,m,s,fractional_s = elapsed.seconds\/3600,elapsed.seconds\/60,elapsed.seconds%60<nl><tab><tab>  fractional_seconds = math.floor(elapsed.microseconds\/1000000.0*100)<nl><tab><tab>  self.label.configure(text=\"%02d:%02d:%02d.%02d\"%(h,m,s))<nl><tab><tab>  self.root.after(1000, self.update_clock)<nl><nl>app=App()","out":"Tkinterのカウントダウンタイマーをアクティブに更新させる"}
{"in":"self.scrollbar.grid(column=6, row=5, rowspan=2,  sticky=N+S+W)","out":"スクロールバーによるテキストウィジェットのスクロール (Tkinter のグリッドレイアウトを使用)"}
{"in":"import itertools<nl><nl>tasks_combinations = [[1, 2, 3], [2, 3, 4]]<nl>people_tasks = [[1, 3], [2, 3], [3, 4]]<nl><nl>people_tasks_product = map(set, (itertools.product(*people_tasks)))<nl><nl>for tasks_combination in tasks_combinations:<nl><tab> if set(tasks_combination) in people_tasks_product:<nl><tab><tab>  print('Task combination {} is covered.'.format(tasks_combination))<nl><tab> else:<nl><tab><tab>  print('Task combination {} is NOT covered.'.format(tasks_combination))","out":"あるリストに含まれるすべての可能な組み合わせが、別のリストに含まれるオブジェクトの属性に現れるかどうかをチェックする。"}
{"in":"from urllib import request<nl>filename = '\/Users\/kyle\/Desktop\/html_test.html'<nl><nl>u = request.urlopen('http:\/\/www.ebay.com')<nl>with open(filename, 'wb') as f: #notice the 'b' here<nl><tab> f.write(u.read())<nl><nl>import webbrowser<nl>webbrowser.open_new(filename)","out":"ブラウザでファイルを開けない"}
{"in":"import re<nl>filename = re.findall(\"filename=(\\S+)\", f[1]['Content-Disposition'])","out":"ヘッダーのContent-Dispositionからファイル名を取得する方法"}
{"in":"import RPi.GPIO as GPIO<nl>GPIO.setwarnings(False)<nl>GPIO.setmode(GPIO.BCM)<nl>GPIO.setup(4,GPIO.OUT)<nl>GPIO.setup(17,GPIO.OUT)<nl>GPIO.setup(22,GPIO.OUT)<nl>GPIO.setup(23,GPIO.OUT)<nl>GPIO.output(4,1)<nl>GPIO.output(17,0)<nl>GPIO.output(22,1)<nl>GPIO.output(23,0)<nl>i=GPIO.input(4)<nl>j=GPIO.input(17)<nl>k=GPIO.input(22)<nl>l=GPIO.input(23)<nl>data=[i,j,k,l]<nl>ser.write(data)","out":"Raspberry piのGPIOピンの状態を読み取り、シリアルポートから送信する。"}
{"in":"data.groupby('Name').sum()['Score'].reset_index()","out":"Pandasでデータフレームを結合する"}
{"in":"class Hangmanner:<nl><tab> correct_word = ''<tab> <nl><tab> current_guess = ''<nl><nl><tab> def play_hangman(self, word):<nl><tab><tab>  self.correct_word = word<nl><nl><tab><tab>  self.current_guess = '_' * len(self.correct_word)<nl><nl><tab><tab>  while self.current_guess != self.correct_word:<nl><tab><tab><tab><tab>self.guess_letter(input(\"Please guess a letter: \"))<nl><nl><tab> def guess_letter(self, guessed_letter):<nl><tab><tab>  for i in range(len(self.correct_word)):<nl><tab><tab><tab><tab>if self.correct_word[i] == guessed_letter:<nl><tab><tab><tab><tab><tab> if i == 0:<nl><tab><tab><tab><tab><tab><tab>  self.current_guess = self.correct_word[i] + self.current_guess[1:]<nl><tab><tab><tab><tab><tab> else:<nl><tab><tab><tab><tab><tab><tab>  self.current_guess = self.current_guess[:i] + self.correct_word[i] + self.current_guess[i + 1:]<nl><tab><tab>  print(self.current_guess)<nl><nl>if __name__ == \"__main__\":<nl><tab> hangmanner = Hangmanner()<nl><tab> hangmanner.play_hangman(\"test\")","out":"Pythonでハングマン関数を実装する"}
{"in":"import MySQLdb<nl>db = MySQLdb.connect(host=\"localhost\",<nl><tab><tab><tab><tab><tab><tab><tab>user=\"user\",<nl><tab><tab><tab><tab><tab><tab><tab> passwd=\"password\", <nl><tab><tab><tab><tab><tab><tab><tab> db=\"database\") <nl>cur = db.cursor() <nl>cur.execute(\"SELECT common_name , genus , species  FROM table WHERE sequence LIKE 'MDPSSID%'\")","out":"pythonでデータベースを検索する"}
{"in":"server.set_debuglevel(True)","out":"PythonでSSL付きエクセルシートをメール送信する。"}
{"in":"check_call(['gzip', fullFilePath])","out":"Pythonでファイルをgzipする"}
{"in":"ret = np.zeros_like(data[0,:,:])<nl>for latIdx in xrange(grid.shape[1]):<nl><tab> for lonIdx in xrange(grid.shape[2]):<nl><tab><tab>  # check if we need to flip the column<nl><tab><tab>  if grid[0,latIdx,lonIdx] > grid[-1,latIdx,lonIdx]:<nl><tab><tab><tab><tab>ind = -1<nl><tab><tab>  else:<nl><tab><tab><tab><tab>ind = 1<nl><tab><tab>  f = interpolate.interp1d(grid[::ind,latIdx,lonIdx], \\<nl><tab><tab><tab><tab><tab> data[::ind,latIdx,lonIdx], \\<nl><tab><tab><tab><tab><tab> kind=interp)<nl><tab><tab>  ret[latIdx,lonIdx] = f(value)<nl>return ret","out":"SciPyで3Dデータを補間する際のパフォーマンスを向上させる方法"}
{"in":"Chair.objects.filter(datetime__isnull=False)","out":"あるフィールドに `None` がないすべてのオブジェクトを検索するクエリーを作成する。"}
{"in":"import numpy as np<nl>W1 = np.arange(25*64).reshape(25, 64)<nl>W2 = np.arange(25*64).reshape(64, 25)<nl>b1 = np.arange(25)<nl>b2 = np.arange(64)<nl><nl>theta = np.concatenate([W1.flat, W2.flat, b1, b2])<nl>print(theta.shape)<nl># (3289,)","out":"pythonで行列を列ベクトルに変換し、すべて足し算する方法"}
{"in":"# Fast O(n) solution using a dictionary<nl>def solution(lst):<nl><tab> counts = {}<nl><nl><tab> for item in lst:<nl><tab><tab>  if item in counts:<nl><tab><tab><tab><tab>counts[item] += 1<nl><tab><tab>  else:<nl><tab><tab><tab><tab>counts[item] = 1<nl><nl><tab> for item in lst:<nl><tab><tab>  if counts[item] == 1:<nl><tab><tab><tab><tab>return item<nl><nl><tab> return -1<nl><nl>print(solution([1,2,1,3,2,5])) # prints 3<nl>print(solution([1,2,1,3,3,2,5])) # prints 5<nl>print(solution([1,2,1,3,3,2,5,5])) # prints -1<nl>print(solution([7])) # prints 7","out":"Python: リスト内の最初のユニークな数字"}
{"in":"print ('radius<tab>area<tab>  circumference')","out":"プリントアウトしたものを最終出力で正しく表示させるにはどうしたらいいか"}
{"in":"def add_data (new_data, old_data, n): # keep n points<nl><tab> return (old_data + new_data)[-n:]","out":"pythonで2つの異なるソースからのオンラインデータをプロットするにはどうすればよいですか？"}
{"in":"for error in dtd.error_log.filter_from_errors():<nl><tab> print(error.message)<nl><tab> print(error.line)<nl><tab> print(error.column)","out":"Pythonのlxml dtd.validate関数でxmlファイルのエラー位置を取得する方法とは？"}
{"in":"def root_pre(l):<nl><tab> root = \"\"<nl><tab> for t in zip(*l):<nl><tab><tab>  if not all(t[0] == s for s in t):<nl><tab><tab><tab><tab>break<nl><tab><tab>  root += t[0]<nl><tab> ln = len(root)<nl><tab> pres = [s[ln:] for s in listData]<nl><tab> return root, pres<nl><nl>print(root_pre(listData))<nl>('black', ['ish', 'en', 'ed'])","out":"pythonでDataのリストでルート識別を行う："}
{"in":"def test(the_list):<nl><tab> for i in range(len(the_list)):<nl><tab><tab>  the_list[i] = the_list[i].lower()<nl><nl>the_list=[\"Python\", \"Programming\"]<nl>test(the_list)<nl>print the_list","out":"関数に渡してリストの要素を変更する"}
{"in":"try:<nl><tab> import cPickle as pickle  # Improve speed<nl>except ValueError:<nl><tab> import pickle<nl><nl>file_temp = open('temp', 'w')<nl>pickle.dump(scenes, file_temp)<nl>file_temp.close()","out":"MATLABのsave()のように、Pythonの変数をファイルに保存する。"}
{"in":"import subprocess<nl><nl>DETACHED_PROCESS = 0x00000008<nl><nl>subprocess.Popen(args,<nl><tab><tab><tab><tab><tab>  cwd=cwd,<nl><tab><tab><tab><tab><tab>  creationflags=DETACHED_PROCESS)","out":"PySide GUIアプリケーションからSubprocessで呼び出されたアプリケーション（py2exe）が動作しなくなった。"}
{"in":"def OnRun(self,event):<nl><tab> path = \"\/path\/to\/youtube-dl.py\"<nl><tab> url = \"http:\/\/www.youtube.com\/\"<nl><tab> subprocess.Popen(path, url, \"--extract-audio\", \"--audio-format\", \"mp3\")","out":"wxpythonでシンプルなボタンでcmdコマンドを実行する。"}
{"in":"def scanFiles(dir): <nl><tab> fout = open(\"animals.las\", \"w\")<nl><tab> for root, dirs, files in os.walk(dir):<nl><tab><tab>  for file in files:<nl><tab><tab><tab><tab>if '.las' in file:<nl><tab><tab><tab><tab># read the file<nl><tab><tab><tab><tab><tab> fin = open(file, \"r\")<nl><tab><tab><tab><tab><tab> str2 = fin.read()<nl><tab><tab><tab><tab><tab> fin.close()<nl><tab><tab><tab><tab># call the function and get the changed text<nl><tab><tab><tab><tab><tab> str3 = replace_words(str2, word_dic)<nl><tab><tab><tab><tab># write changed text back out<nl><tab><tab><tab><tab><tab> fout.write(str3)<nl><tab><tab><tab><tab><tab> #time.sleep(1)<nl><tab> fout.close()","out":"このスクリプトにリネーム機能を追加するにはどうすればよいですか？"}
{"in":"import os, datetime<nl><nl>folder_name = \"MY_PATH\"<nl>for file_name in os.listdir(folder_name):<nl><tab> file_name_full = os.path.join(folder_name, file_name)<nl><tab> if not os.path.isfile(file_name_full):<nl><tab><tab>  continue<nl><tab> timestamp = os.path.getctime(file_name_full)<nl><tab> dt = datetime.datetime.fromtimestamp(timestamp)<nl><tab> # print out the datestamp<nl><tab> print dt<nl><nl><tab> # if you now want to put them into subfolders based on the year 2012 <nl><tab> # you can do something like the following<nl><tab> yr = dt.year<nl><tab> subfolder_name = \"\"<nl><tab> if yr < 2012:<nl><tab><tab>  subfolder_name = \"before 2012\"<nl><tab> else:<nl><tab><tab>  subfolder_name = \"2012 and after\"<nl><tab> subfolder_name_full = os.path.join(folder_name, subfolder_name)<nl><tab> new_file_name_full = os.path.join(subfolder_name_full, file_name)<nl><tab> # I assume your folders are premade. If not, you can do a quick-and-dirty mkdir here<nl><nl><tab> print \"Moving %s -> %s\" % (file_name_full, new_file_name_full)<nl><tab> os.rename(file_name_full, new_file_name_full)","out":"pythonで作成日による画像ソーター"}
{"in":"print(('<tab> {:<' + str(SHOWLEN) + '.' <nl><tab> + str(SHOWLEN) +'}  {:<}').format(value[1], value[0]))","out":"str.format()で幅と精度を表す変数を使うにはどうしたらいいですか？"}
{"in":"doc.xpath('\/\/*[contains(@style,\"background\") and contains(@style,\"url(\")]')","out":"インラインスタイルのhtmlタグで背景画像が使用されているかどうかを調べる。"}
{"in":"cmd = 'ping 192.168.1.1'<nl>output = subprocess.check_output(cmd.split())","out":"プログラムサブプロセスでテキストファイルを取り込む他のプログラムの読み込み"}
{"in":"records = db_session.query(Resource).filter(<nl><tab><tab><tab><tab>  Resources.data[\"lastname\"].astext == \"Doe\"<nl><tab><tab><tab> ).all()","out":"Python SQLAlchemyとPostgress - JSON要素にクエリをかける方法"}
{"in":"def groupings(a):<nl><tab>  g = []<nl><tab>  for val in a:<nl><tab><tab><tab>if not g:<nl><tab><tab><tab><tab> g.append(val)<nl><tab><tab><tab>elif abs(g[-1] - val) <= 1.00001:<nl><tab><tab><tab><tab> g.append(val)<nl><tab><tab><tab>else:<nl><tab><tab><tab><tab> yield g<nl><tab><tab><tab><tab> g = []<nl><nl>print list(groupings(my_numpy_array))","out":"NumPyの配列内で連続する値のグループを特定する。"}
{"in":"transformed = sig(x)","out":"numpyでvectorの各要素に関数を適用する。"}
{"in":"import collections<nl>files_by_str = collections.defaultdict(list)<nl><nl>thestrings = []<nl>with open('Strings.txt') as f:<nl>  for line in f:<nl><tab> text = line.split('=', 1)[1]<nl><tab> text = text.strip().replace('\"', '')<nl><tab> thestrings.append(text)<nl><nl>import os<nl><nl>for root, dirs, files in os.walk('\/top\/dir\/of\/interest'):<nl>  for name in files:<nl><tab> path = os.path.join(root, name)<nl><tab> with open(path) as f:<nl><tab><tab>data = f.read()<nl><tab><tab>for text in thestrings:<nl><tab><tab>  if text in data:<nl><tab><tab><tab> files_by_str[text].append(path)<nl><tab><tab><tab> break","out":"Pythonスクリプトで、一連のファイル内の文字列のインスタンスを検索する。"}
{"in":"my_functions = []<nl><nl>def put_in_list(fn):<nl><tab> my_functions.append(fn)<nl><tab> return fn<nl><nl>@put_in_list<nl>def function1():<nl><tab> pass<nl><nl>@put_in_list<nl>def function2():<nl><tab> pass","out":"静的に定義された関数のリストを動的に定義する、Pythonicでエレガントな方法？"}
{"in":"import logging<nl><nl>logging.debug('Debug Message')<nl><nl>if some_error:<nl><tab>logging.error('Error Message')","out":"Django Debug Toolbar で Logging を使うにはどうしたらいいですか？"}
{"in":"import multiprocessing<nl>import os<nl>import time<nl><nl>import cherrypy<nl><nl>def run_in_sub_proc(size):<nl><tab> for i in range(size):<nl><tab><tab>  print os.getpid(), i<nl><tab><tab>  time.sleep(1)<nl><nl>pool = multiprocessing.Pool(2)<nl><nl>class Root(object):<nl><tab> @cherrypy.expose<nl><tab> def index(self):<nl><tab><tab>  pool.map_async(run_in_sub_proc, (3, 5))<nl><nl>if __name__ == '__main__':<nl><tab> cherrypy.engine.subscribe('stop', pool.join)<nl><tab> cherrypy.quickstart(Root())","out":"マルチスレッドとマルチプロセシングを併用する方法は？"}
{"in":"numpy.random.normal()","out":"Box-Muller法による正規分布からの値の生成"}
{"in":"host = request.host<nl>host = host.split(':', 1)[0] # Strip off optional ':##' port number<nl>username = None<nl>if host.endswith('.yourdomain.com'):<nl><tab> username = host.split('.', 1)[0]","out":"ユーザ名を先頭に持つurlをマッピングする方法は？"}
{"in":"if ext == 'gz':<nl><tab>command = 'gunzip -c {} -k | pg_restore -U {} -h {} -p {}' \\<nl><tab><tab><tab><tab> '-d {}'.format(file, user, server, port, new_dbname)<nl>elif ext == 'bz2':<nl><tab>command = 'bunzip2 -c {} -k | pg_restore -U {} -h {} -p {}' \\<nl><tab><tab><tab><tab> '-d {}'.format(file, user, server, port, new_dbname)<nl>elif ext == 'zip':<nl><tab>command = 'unzip -p {} | pg_restore -U {} -h {} -p {} ' \\<nl><tab><tab><tab><tab> '-d {}'.format(file, user, server, port, new_dbname)<nl>else:<nl><tab>command = 'pg_restore -U {} -h {} -p {} -d {} {}'.format(user,<nl><tab><tab><tab><tab><tab> server, port, new_dbname, file)","out":"pg_restoreで自動的に解凍する方法はありますか？"}
{"in":"#!\/usr\/bin\/python<nl>import rpy2.robjects as robjects<nl><nl>l = [1,2,3,4,5]<nl><nl># get ks.test via execute string as R statement<nl>test = robjects.r('ks.test')<nl># get a built-in functions variables directly<nl>pexp = robjects.r.pexp<nl><nl>l_vector = robjects.IntVector(l)<nl>result = test(l_vector, pexp)<nl>print result[result.names.index('p.value')]","out":"rpy2でRにリストを渡し、結果を返す方法"}
{"in":"'''<nl>This is a multiline<nl>comment.<nl>'''","out":"Pythonのマルチラインコメント"}
{"in":"key1, key2 = random.sample(list(d), 2)<nl>d[key1], d[key2] = d[key2], d[key1]","out":"辞書の中の2つのランダムな値を入れ替える"}
{"in":"set(thingList1) & set(thingList2) & set(thingList3)","out":"pythonで3つの集合の交差点？"}
{"in":"import copy<nl>if 'career_business' in add_sal and 'career_business' in add_perc and \\<nl><tab><tab>add_sal['career_business'] == add_perc['career_business']:<nl><tab>add_all = copy.deepcopy( add_sal )<nl><tab>add_all['percent'] = add_perc['percent']","out":"python: キーの値が同じであれば辞書をマージする。"}
{"in":"sorted(itertools.chain(list1.itervalues(), list2.itervalues(),<nl><tab> list3.itervalues()), key=operator.itemgetter('timestamp'))","out":"pythonで、3つのdictを組み合わせて、dictのキーの1つでソートする最も効率的な方法は何でしょうか？"}
{"in":"import os<nl>import stat<nl><nl>executable = stat.S_IEXEC | stat.S_IXGRP | stat.S_IXOTH<nl>for filename in os.listdir('.'):<nl><tab> if os.path.isfile(filename):<nl><tab><tab>  st = os.stat(filename)<nl><tab><tab>  mode = st.st_mode<nl><tab><tab>  if mode & executable:<nl><tab><tab><tab><tab>print(filename,oct(mode))","out":"linuxでpythonを使って実行ファイルを検索するにはどうすればよいですか？"}
{"in":"from ctypes import * <nl><nl>your_dll = cdll.LoadLibrary(\"your_dll.dll\") <nl><nl>PFloat = POINTER(c_float) <nl>PInt<tab>= POINTER(c_int) <nl><nl>p_data<tab> = PFloat() <nl>p_classes = PInt() <nl>buff<tab><tab>= create_string_buffer(1024) <nl>n1<tab><tab>  = c_int( 0 ) <nl>n2<tab><tab>  = c_int( 0 ) <nl><nl>ret = your_dll.read_data( buff, byref(n1), byref(n2), byref(p_data), byref(p_classes) ) <nl><nl>print('Data:<tab> ', p_data.contents) <nl>print('Classes: ', p_classes.contents)","out":"PythonでSwigでfloat **を使うには？"}
{"in":"a = 10e-50","out":"Python、指数10進数表記で数値をコード化する。"}
{"in":"from collections import defaultdict<nl>d = defaultdict(dict)<nl>for line in open('input_file','r'):<nl><tab> line = line.strip()<nl><tab> a,b = line.split(',')<nl><tab> node = a.split('=')[1] <nl><tab> key, value = b.split('=')<nl><tab> d[node][key] = value","out":"pythonでtxtファイルから辞書を作るにはどうしたらいいでしょうか？"}
{"in":"b = a[:20]","out":"大きなタプルのリストから、より小さなタプルのリストを作るには？"}
{"in":"rules = app.url_map._rules<nl>for rule in rules:<nl><tab> print rule.endpoint, rule, rule.defaults","out":"Flaskです：モジュール内の各ViewクラスのURLを取得する"}
{"in":"headers = {<nl><tab> \"X-Auth-Token\": \"dddddsssb04411b4c6a2\",<nl><tab> \"Access-Control-Allow-Origin\": \"*\",<nl>}<nl>r = requests.post(\"https:\/\/verylong\/url\", headers=headers)","out":"トークンを使ってCDN URLにヘッダーを追加するPythonリクエストモジュール"}
{"in":"import hashlib<nl>[(fname, hashlib.md5(open(fname, 'rb').read()).digest()) for fname in fnamelst]","out":"pythonでファイルのチェックサムを作成する方法"}
{"in":"QWidget#Form {background-image: url(test.jpg);}","out":"PyQt4 画像を背景にする"}
{"in":"for r in range(rows):<nl><tab> A[r,B[r,:]!=0] = np.dot(B[r , B[r,:]!=0], C[: , B[r,:]!=0].T)","out":"pythonで行列の特定の行の非ゼロ要素にアクセスする"}
{"in":"re.compile('(?<=}})\\s+(?={{)')","out":"PythonでTCLのリストをパースする"}
{"in":"import urllib2<nl>from bs4 import BeautifulSoup<nl>url = urllib2.urlopen(\"http:\/\/www.example.com\/\").read()<nl>soup = BeautifulSoup(url)<nl>for line in soup.find_all('a'):<nl><tab><tab>  print(line.get('href'))","out":"PythonでWebサイトをパースする"}
{"in":"def find_next(cur_dt):<nl><tab> import datetime as dt<nl><tab> t = [dt.time(5,30), dt.time(8,30), dt.time(13,0), dt.time(17,30)]<nl><nl><tab> cur_t = cur_dt.time()<nl><tab> cur_d = cur_dt.date()<nl><nl><tab> for i in range(len(t)):<nl><tab><tab>  if t[i] > cur_t:<nl><tab><tab><tab><tab>rt = [t[(j+i)%len(t)] for j in range(len(t))]<nl><tab><tab><tab><tab>rd = [cur_d] * (len(t)-i) + [cur_d + dt.timedelta(days=1)]*i<nl><tab><tab><tab><tab>return [dt.datetime.combine(rd[j],rt[j]) for j in range(len(rt))]<nl><nl><tab> # everything happens tomorrow<tab><tab>  <nl><tab> return [dt.datetime.combine(cur_d + dt.timedelta(days=1), i) for i in t]","out":"Pythonで未来の日付のシーケンスを生成し、集合から最も近い日付を決定する方法"}
{"in":"import numpy<nl>masses = numpy.array([[0,  0,  0,  0],<nl>[0,  1,  0,  0],<nl>[0,  2,  0,  0],<nl>[1,  0,  0,  0],<nl>[1,  1,  0,  1],<nl>[1,  2,  0,  1],<nl>[2,  0,  0,  0],<nl>[2,  1,  0,  0],<nl>[2,  2,  0,  0]])<nl><nl>nonZeroMasses = masses[numpy.nonzero(masses[:,3])] # Not really necessary, can just use masses because 0 mass used as weight will work just fine.<nl><nl>CM = numpy.average(nonZeroMasses[:,:3], axis=0, weights=nonZeroMasses[:,3])","out":"python: 質量の中心を計算する"}
{"in":"from multiprocessing import Pool, cpu_count<nl><nl># ...<nl>all_files = [\"file%d\" % i for i in range(5)]<nl><nl><nl>def process_file(file_name):<nl><tab> # process file<nl><tab> return \"finished file %s\" % file_name<nl><nl>pool = Pool(cpu_count())<nl><nl># this is a blocking call - when it's done, all files have been processed<nl>results = pool.map(process_file, all_files)<nl><nl># no more tasks can go in the pool<nl>pool.close()<nl><nl># wait for all workers to complete their task (though we used a blocking call...)<nl>pool.join()<nl><nl><nl># ['finished file file0', 'finished file file1',  ... , 'finished file file4']<nl>print results","out":"python, subprocess: (グループ内の)1つのプロセスが終了したときに新しいプロセスを起動する。"}
{"in":"driver.find_element_by_id()","out":"Seleniumを使って、Googleに検索テキストを入力する。"}
{"in":"waitTime=0.5<nl><nl>def is_ava():<nl><tab> global waitTime  # <--------<nl><tab> waitTime = waitTime + 0.1<nl><tab> print waitTime<nl><nl>if __name__ == '__main__':<nl><tab> is_ava()","out":"UnboundLocalError: 代入前にローカル変数が参照されました。"}
{"in":"google-api-python-client","out":"PythonによるGoogleデータ転送API"}
{"in":"from django.contrib.admin.models import LogEntry<nl><nl>class LogEntryAdmin(admin.ModelAdmin):<nl><tab> readonly_fields = ('content_type', 'user', 'action_time')<nl><nl>admin.site.register(LogEntry, LogEntryAdmin)","out":"django admin の logEntry を読み取り専用にする？"}
{"in":"tuple(tuple(tuple(l2) for l2 in l1) for l1 in inner_loop)","out":"多次元配列から多次元タプルへの変換"}
{"in":"from scrapy.contrib.spiders import CrawlSpider, Rule<nl>from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor<nl>from scrapy.selector import Selector<nl>from scrapy.http import Request<nl><nl>class people(CrawlSpider):<nl>  name=\"people\"<nl>  allowed_domains=[\"http:\/\/blog.sina.com.cn\/\"]<nl>  start_urls=[\"http:\/\/blog.sina.com.cn\/s\/blog_53d7b5ce0100e7y0.html\"]<nl>  rules=(Rule(SgmlLinkExtractor(allow=(\"http:\/\/blog.sina.com.cn\/\",)),  callback='parse_item', follow=True),<nl>#restrict the crawling in the articalContent section only<nl>  Rule(SgmlLinkExtractor(restrict_xpaths=('\/\/div[contains(@class, \"articalContent\")]'))),<nl>  )<nl><nl>  def parse(self,response):<nl><tab><tab>links = Selector(text=response.body).xpath('\/\/div[contains(@class, \"articalContent\")]\/\/a\/\/text()')<nl><tab><tab>for link in links:<nl><tab><tab><tab> print link.extract()","out":"scrapyを使った1階層下のクローリング"}
{"in":"apples = [red, green]<nl>for type in apples:<nl><tab> for item in type:<nl><tab><tab>  print item","out":"配列のリストをForループに送る"}
{"in":"d = {frozenset((1,2)): \"foo\"}<nl>print d.get(frozenset((2,1)))","out":"(x,y)または(y,x)にマッチするタプルをpython辞書で検索する。"}
{"in":"import zipfile<nl>from lxml import etree<nl><nl>z = zipfile.ZipFile('mydocument.ods')<nl><nl>data = z.read('content.xml')<nl>data = etree.XML(data)<nl><nl>etree.dump(data)","out":"Python：lxmlでOpen Office calcからデータを取り込む"}
{"in":"import subprocess<nl><nl>ps = subprocess.Popen('ps -ef', shell=True, stdout=subprocess.PIPE)<nl>print ps.stdout.readlines()","out":"pythonを使用して、現在のユーザーのプロセスのリストを表示するにはどうすればよいですか？"}
